ARM GAS  /tmp/cceAWXAd.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB62:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
  33:Src/main.c    ****   *
ARM GAS  /tmp/cceAWXAd.s 			page 2


  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* USER CODE END Header */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  52:Src/main.c    **** #include "main.h"
  53:Src/main.c    **** #include "usb_device.h"
  54:Src/main.c    **** #include "tcpm_driver.h"
  55:Src/main.c    **** #include "usb_pd.h"
  56:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  57:Src/main.c    **** /* USER CODE BEGIN Includes */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  62:Src/main.c    **** /* USER CODE BEGIN PTD */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PTD */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  67:Src/main.c    **** /* USER CODE BEGIN PD */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PD */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  72:Src/main.c    **** /* USER CODE BEGIN PM */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE END PM */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  77:Src/main.c    **** ADC_HandleTypeDef hadc;
  78:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  79:Src/main.c    **** 
  80:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  81:Src/main.c    **** I2C_HandleTypeDef hi2c2;
  82:Src/main.c    **** DMA_HandleTypeDef hdma_i2c1_rx;
  83:Src/main.c    **** DMA_HandleTypeDef hdma_i2c1_tx;
  84:Src/main.c    **** DMA_HandleTypeDef hdma_i2c2_rx;
  85:Src/main.c    **** DMA_HandleTypeDef hdma_i2c2_tx;
  86:Src/main.c    **** 
  87:Src/main.c    **** /* USER CODE BEGIN PV */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PV */
  90:Src/main.c    **** 
ARM GAS  /tmp/cceAWXAd.s 			page 3


  91:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  92:Src/main.c    **** void SystemClock_Config(void);
  93:Src/main.c    **** void dfu_otter_bootloader(void);
  94:Src/main.c    **** static void MX_GPIO_Init(void);
  95:Src/main.c    **** static void MX_DMA_Init(void);
  96:Src/main.c    **** static void MX_ADC_Init(void);
  97:Src/main.c    **** static void MX_I2C1_Init(void);
  98:Src/main.c    **** static void MX_I2C2_Init(void);
  99:Src/main.c    **** 
 100:Src/main.c    **** /* USER CODE BEGIN PFP */
 101:Src/main.c    **** const struct tcpc_config_t tcpc_config[CONFIG_USB_PD_PORT_COUNT] = {
 102:Src/main.c    ****   {0, fusb302_I2C_SLAVE_ADDR, &fusb302_tcpm_drv}
 103:Src/main.c    **** };
 104:Src/main.c    **** /* USER CODE END PFP */
 105:Src/main.c    **** 
 106:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 107:Src/main.c    **** /* USER CODE BEGIN 0 */
 108:Src/main.c    **** 
 109:Src/main.c    **** /* USER CODE END 0 */
 110:Src/main.c    **** 
 111:Src/main.c    **** /**
 112:Src/main.c    ****   * @brief  The application entry point.
 113:Src/main.c    ****   * @retval int
 114:Src/main.c    ****   */
 115:Src/main.c    **** int main(void)
 116:Src/main.c    **** {
 117:Src/main.c    ****   /* USER CODE BEGIN 1 */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE END 1 */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 124:Src/main.c    ****   HAL_Init();
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN Init */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END Init */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Configure the system clock */
 131:Src/main.c    ****   SystemClock_Config();
 132:Src/main.c    **** 
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE END SysInit */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* Initialize all configured peripherals */
 139:Src/main.c    ****   MX_GPIO_Init();
 140:Src/main.c    ****   MX_DMA_Init();
 141:Src/main.c    ****   MX_ADC_Init();
 142:Src/main.c    ****   MX_I2C1_Init();
 143:Src/main.c    ****   MX_I2C2_Init();
 144:Src/main.c    ****   MX_USB_DEVICE_Init();
 145:Src/main.c    ****   /* USER CODE BEGIN 2 */
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* USER CODE END 2 */
ARM GAS  /tmp/cceAWXAd.s 			page 4


 148:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,BUTTON_Pin) == 1) {
 149:Src/main.c    ****     dfu_otter_bootloader();
 150:Src/main.c    ****   }  
 151:Src/main.c    ****     
 152:Src/main.c    ****   /* Infinite loop */
 153:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 154:Src/main.c    **** 
 155:Src/main.c    ****   tcpm_init(0);
 156:Src/main.c    ****   HAL_Delay(50);
 157:Src/main.c    ****   pd_init(0);
 158:Src/main.c    ****   HAL_Delay(50);
 159:Src/main.c    **** 
 160:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA,LED_POWER_Pin,1);
 161:Src/main.c    ****   char str[40];
 162:Src/main.c    **** 
 163:Src/main.c    **** 
 164:Src/main.c    ****   while (1)
 165:Src/main.c    ****   {
 166:Src/main.c    ****     HAL_Delay(2);
 167:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA,LED_STATUS_Pin,HAL_GPIO_ReadPin(GPIOA,BUTTON_Pin));
 168:Src/main.c    ****         
 169:Src/main.c    ****     memset(str,' ',40);
 170:Src/main.c    ****     sprintf(&str[0],"Otter! %d\n\r",1);//pd_is_connected(0),pd_is_port_enabled(0));
 171:Src/main.c    ****     //pd_request_source_voltage(0,20000);
 172:Src/main.c    ****     CDC_Transmit_FS((unsigned char*)str,sizeof(str));
 173:Src/main.c    ****     
 174:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOA,INT_N_Pin) == 0) {
 175:Src/main.c    ****       tcpc_alert(0);
 176:Src/main.c    ****     }
 177:Src/main.c    **** 
 178:Src/main.c    ****     pd_run_state_machine(0);
 179:Src/main.c    ****   }
 180:Src/main.c    ****   /* USER CODE END 3 */
 181:Src/main.c    **** }
 182:Src/main.c    **** void dfu_otter_bootloader(void)
 183:Src/main.c    **** {
 184:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 185:Src/main.c    ****   NVIC_SystemReset();
 186:Src/main.c    **** }
 187:Src/main.c    **** 
 188:Src/main.c    **** /**
 189:Src/main.c    ****   * @brief System Clock Configuration
 190:Src/main.c    ****   * @retval None
 191:Src/main.c    ****   */
 192:Src/main.c    **** void SystemClock_Config(void)
 193:Src/main.c    **** {
 194:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 195:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 196:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 197:Src/main.c    **** 
 198:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 199:Src/main.c    ****   */
 200:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 201:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 202:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 203:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 204:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
ARM GAS  /tmp/cceAWXAd.s 			page 5


 205:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 206:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 207:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 208:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 209:Src/main.c    ****   {
 210:Src/main.c    ****     Error_Handler();
 211:Src/main.c    ****   }
 212:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 213:Src/main.c    ****   */
 214:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 215:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 216:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 217:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 218:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 219:Src/main.c    **** 
 220:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 225:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 226:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 227:Src/main.c    **** 
 228:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     Error_Handler();
 231:Src/main.c    ****   }
 232:Src/main.c    **** }
 233:Src/main.c    **** 
 234:Src/main.c    **** /**
 235:Src/main.c    ****   * @brief ADC Initialization Function
 236:Src/main.c    ****   * @param None
 237:Src/main.c    ****   * @retval None
 238:Src/main.c    ****   */
 239:Src/main.c    **** static void MX_ADC_Init(void)
 240:Src/main.c    **** {
 241:Src/main.c    **** 
 242:Src/main.c    ****   /* USER CODE BEGIN ADC_Init 0 */
 243:Src/main.c    **** 
 244:Src/main.c    ****   /* USER CODE END ADC_Init 0 */
 245:Src/main.c    **** 
 246:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 247:Src/main.c    **** 
 248:Src/main.c    ****   /* USER CODE BEGIN ADC_Init 1 */
 249:Src/main.c    **** 
 250:Src/main.c    ****   /* USER CODE END ADC_Init 1 */
 251:Src/main.c    ****   /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conv
 252:Src/main.c    ****   */
 253:Src/main.c    ****   hadc.Instance = ADC1;
 254:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 255:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 256:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 257:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 258:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 259:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 260:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 261:Src/main.c    ****   hadc.Init.ContinuousConvMode = ENABLE;
ARM GAS  /tmp/cceAWXAd.s 			page 6


 262:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 263:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 264:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 265:Src/main.c    ****   hadc.Init.DMAContinuousRequests = DISABLE;
 266:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 267:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 268:Src/main.c    ****   {
 269:Src/main.c    ****     Error_Handler();
 270:Src/main.c    ****   }
 271:Src/main.c    ****   /**Configure for the selected ADC regular channel to be converted. 
 272:Src/main.c    ****   */
 273:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 274:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 275:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 276:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 277:Src/main.c    ****   {
 278:Src/main.c    ****     Error_Handler();
 279:Src/main.c    ****   }
 280:Src/main.c    ****   /**Configure for the selected ADC regular channel to be converted. 
 281:Src/main.c    ****   */
 282:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 283:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 284:Src/main.c    ****   {
 285:Src/main.c    ****     Error_Handler();
 286:Src/main.c    ****   }
 287:Src/main.c    ****   /* USER CODE BEGIN ADC_Init 2 */
 288:Src/main.c    **** 
 289:Src/main.c    ****   /* USER CODE END ADC_Init 2 */
 290:Src/main.c    **** 
 291:Src/main.c    **** }
 292:Src/main.c    **** 
 293:Src/main.c    **** /**
 294:Src/main.c    ****   * @brief I2C1 Initialization Function
 295:Src/main.c    ****   * @param None
 296:Src/main.c    ****   * @retval None
 297:Src/main.c    ****   */
 298:Src/main.c    **** static void MX_I2C1_Init(void)
 299:Src/main.c    **** {
 300:Src/main.c    **** 
 301:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 0 */
 302:Src/main.c    **** 
 303:Src/main.c    ****   /* USER CODE END I2C1_Init 0 */
 304:Src/main.c    **** 
 305:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 1 */
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* USER CODE END I2C1_Init 1 */
 308:Src/main.c    ****   hi2c1.Instance = I2C1;
 309:Src/main.c    ****   hi2c1.Init.Timing = 0x0000020B;
 310:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 311:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 312:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 313:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 314:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 315:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 316:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 317:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 318:Src/main.c    ****   {
ARM GAS  /tmp/cceAWXAd.s 			page 7


 319:Src/main.c    ****     Error_Handler();
 320:Src/main.c    ****   }
 321:Src/main.c    ****   /**Configure Analogue filter 
 322:Src/main.c    ****   */
 323:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 324:Src/main.c    ****   {
 325:Src/main.c    ****     Error_Handler();
 326:Src/main.c    ****   }
 327:Src/main.c    ****   /**Configure Digital filter 
 328:Src/main.c    ****   */
 329:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 330:Src/main.c    ****   {
 331:Src/main.c    ****     Error_Handler();
 332:Src/main.c    ****   }
 333:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 334:Src/main.c    **** 
 335:Src/main.c    ****   /* USER CODE END I2C1_Init 2 */
 336:Src/main.c    **** 
 337:Src/main.c    **** }
 338:Src/main.c    **** 
 339:Src/main.c    **** /**
 340:Src/main.c    ****   * @brief I2C2 Initialization Function
 341:Src/main.c    ****   * @param None
 342:Src/main.c    ****   * @retval None
 343:Src/main.c    ****   */
 344:Src/main.c    **** static void MX_I2C2_Init(void)
 345:Src/main.c    **** {
 346:Src/main.c    **** 
 347:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 0 */
 348:Src/main.c    **** 
 349:Src/main.c    ****   /* USER CODE END I2C2_Init 0 */
 350:Src/main.c    **** 
 351:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 1 */
 352:Src/main.c    **** 
 353:Src/main.c    ****   /* USER CODE END I2C2_Init 1 */
 354:Src/main.c    ****   hi2c2.Instance = I2C2;
 355:Src/main.c    ****   hi2c2.Init.Timing = 0x20000209;
 356:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 357:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 358:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 359:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 360:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 361:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 362:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 363:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 364:Src/main.c    ****   {
 365:Src/main.c    ****     Error_Handler();
 366:Src/main.c    ****   }
 367:Src/main.c    ****   /**Configure Analogue filter 
 368:Src/main.c    ****   */
 369:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 370:Src/main.c    ****   {
 371:Src/main.c    ****     Error_Handler();
 372:Src/main.c    ****   }
 373:Src/main.c    ****   /**Configure Digital filter 
 374:Src/main.c    ****   */
 375:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
ARM GAS  /tmp/cceAWXAd.s 			page 8


 376:Src/main.c    ****   {
 377:Src/main.c    ****     Error_Handler();
 378:Src/main.c    ****   }
 379:Src/main.c    ****   /**I2C Fast mode Plus enable 
 380:Src/main.c    ****   */
 381:Src/main.c    ****   __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C2);
 382:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 2 */
 383:Src/main.c    **** 
 384:Src/main.c    ****   /* USER CODE END I2C2_Init 2 */
 385:Src/main.c    **** 
 386:Src/main.c    **** }
 387:Src/main.c    **** 
 388:Src/main.c    **** /** 
 389:Src/main.c    ****   * Enable DMA controller clock
 390:Src/main.c    ****   */
 391:Src/main.c    **** static void MX_DMA_Init(void) 
 392:Src/main.c    **** {
 393:Src/main.c    ****   /* DMA controller clock enable */
 394:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* DMA interrupt init */
 397:Src/main.c    ****   /* DMA1_Channel1_IRQn interrupt configuration */
 398:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 399:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 400:Src/main.c    ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 401:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 402:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 403:Src/main.c    ****   /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
 404:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 405:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 406:Src/main.c    **** 
 407:Src/main.c    **** }
 408:Src/main.c    **** 
 409:Src/main.c    **** /**
 410:Src/main.c    ****   * @brief GPIO Initialization Function
 411:Src/main.c    ****   * @param None
 412:Src/main.c    ****   * @retval None
 413:Src/main.c    ****   */
 414:Src/main.c    **** static void MX_GPIO_Init(void)
 415:Src/main.c    **** {
  26              		.loc 1 415 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 416:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 416 3 view .LVU1
ARM GAS  /tmp/cceAWXAd.s 			page 9


  42              		.loc 1 416 20 is_stmt 0 view .LVU2
  43 0004 1422     		movs	r2, #20
  44 0006 0021     		movs	r1, #0
  45 0008 03A8     		add	r0, sp, #12
  46 000a FFF7FEFF 		bl	memset
  47              	.LVL0:
 417:Src/main.c    **** 
 418:Src/main.c    ****   /* GPIO Ports Clock Enable */
 419:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 419 3 is_stmt 1 view .LVU3
  49              	.LBB11:
  50              		.loc 1 419 3 view .LVU4
  51              		.loc 1 419 3 view .LVU5
  52 000e 234B     		ldr	r3, .L2
  53 0010 5969     		ldr	r1, [r3, #20]
  54 0012 8020     		movs	r0, #128
  55 0014 8002     		lsls	r0, r0, #10
  56 0016 0143     		orrs	r1, r0
  57 0018 5961     		str	r1, [r3, #20]
  58              		.loc 1 419 3 view .LVU6
  59 001a 5A69     		ldr	r2, [r3, #20]
  60 001c 0240     		ands	r2, r0
  61 001e 0192     		str	r2, [sp, #4]
  62              		.loc 1 419 3 view .LVU7
  63 0020 019A     		ldr	r2, [sp, #4]
  64              	.LBE11:
 420:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  65              		.loc 1 420 3 view .LVU8
  66              	.LBB12:
  67              		.loc 1 420 3 view .LVU9
  68              		.loc 1 420 3 view .LVU10
  69 0022 5A69     		ldr	r2, [r3, #20]
  70 0024 8021     		movs	r1, #128
  71 0026 C902     		lsls	r1, r1, #11
  72 0028 0A43     		orrs	r2, r1
  73 002a 5A61     		str	r2, [r3, #20]
  74              		.loc 1 420 3 view .LVU11
  75 002c 5B69     		ldr	r3, [r3, #20]
  76 002e 0B40     		ands	r3, r1
  77 0030 0293     		str	r3, [sp, #8]
  78              		.loc 1 420 3 view .LVU12
  79 0032 029B     		ldr	r3, [sp, #8]
  80              	.LBE12:
 421:Src/main.c    **** 
 422:Src/main.c    ****   /*Configure GPIO pin Output Level */
 423:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, MOSFET_Pin|OLED_PULLUP_Pin, GPIO_PIN_RESET);
  81              		.loc 1 423 3 view .LVU13
  82 0034 8427     		movs	r7, #132
  83 0036 7F00     		lsls	r7, r7, #1
  84 0038 194D     		ldr	r5, .L2+4
  85 003a 0022     		movs	r2, #0
  86 003c 3900     		movs	r1, r7
  87 003e 2800     		movs	r0, r5
  88 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
  89              	.LVL1:
 424:Src/main.c    **** 
 425:Src/main.c    ****   /*Configure GPIO pin : BUTTON_Pin */
ARM GAS  /tmp/cceAWXAd.s 			page 10


 426:Src/main.c    ****   GPIO_InitStruct.Pin = BUTTON_Pin;
  90              		.loc 1 426 3 view .LVU14
  91              		.loc 1 426 23 is_stmt 0 view .LVU15
  92 0044 0823     		movs	r3, #8
  93 0046 0393     		str	r3, [sp, #12]
 427:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  94              		.loc 1 427 3 is_stmt 1 view .LVU16
  95              		.loc 1 427 24 is_stmt 0 view .LVU17
  96 0048 0024     		movs	r4, #0
  97 004a 0494     		str	r4, [sp, #16]
 428:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  98              		.loc 1 428 3 is_stmt 1 view .LVU18
  99              		.loc 1 428 24 is_stmt 0 view .LVU19
 100 004c 063B     		subs	r3, r3, #6
 101 004e 0593     		str	r3, [sp, #20]
 429:Src/main.c    ****   HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 102              		.loc 1 429 3 is_stmt 1 view .LVU20
 103 0050 9026     		movs	r6, #144
 104 0052 F605     		lsls	r6, r6, #23
 105 0054 03A9     		add	r1, sp, #12
 106 0056 3000     		movs	r0, r6
 107 0058 FFF7FEFF 		bl	HAL_GPIO_Init
 108              	.LVL2:
 430:Src/main.c    **** 
 431:Src/main.c    ****   /*Configure GPIO pin : INT_N_Pin */
 432:Src/main.c    ****   GPIO_InitStruct.Pin = INT_N_Pin;
 109              		.loc 1 432 3 view .LVU21
 110              		.loc 1 432 23 is_stmt 0 view .LVU22
 111 005c 8023     		movs	r3, #128
 112 005e 5B01     		lsls	r3, r3, #5
 113 0060 0393     		str	r3, [sp, #12]
 433:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 114              		.loc 1 433 3 is_stmt 1 view .LVU23
 115              		.loc 1 433 24 is_stmt 0 view .LVU24
 116 0062 0494     		str	r4, [sp, #16]
 434:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 434 3 is_stmt 1 view .LVU25
 118              		.loc 1 434 24 is_stmt 0 view .LVU26
 119 0064 0594     		str	r4, [sp, #20]
 435:Src/main.c    ****   HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 120              		.loc 1 435 3 is_stmt 1 view .LVU27
 121 0066 03A9     		add	r1, sp, #12
 122 0068 2800     		movs	r0, r5
 123 006a FFF7FEFF 		bl	HAL_GPIO_Init
 124              	.LVL3:
 436:Src/main.c    **** 
 437:Src/main.c    ****   /*Configure GPIO pins : MOSFET_Pin OLED_PULLUP_Pin */
 438:Src/main.c    ****   GPIO_InitStruct.Pin = MOSFET_Pin|OLED_PULLUP_Pin;
 125              		.loc 1 438 3 view .LVU28
 126              		.loc 1 438 23 is_stmt 0 view .LVU29
 127 006e 0397     		str	r7, [sp, #12]
 439:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 128              		.loc 1 439 3 is_stmt 1 view .LVU30
 129              		.loc 1 439 24 is_stmt 0 view .LVU31
 130 0070 083F     		subs	r7, r7, #8
 131 0072 FF3F     		subs	r7, r7, #255
 132 0074 0497     		str	r7, [sp, #16]
ARM GAS  /tmp/cceAWXAd.s 			page 11


 440:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 133              		.loc 1 440 3 is_stmt 1 view .LVU32
 134              		.loc 1 440 24 is_stmt 0 view .LVU33
 135 0076 0594     		str	r4, [sp, #20]
 441:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 136              		.loc 1 441 3 is_stmt 1 view .LVU34
 137              		.loc 1 441 25 is_stmt 0 view .LVU35
 138 0078 0694     		str	r4, [sp, #24]
 442:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 139              		.loc 1 442 3 is_stmt 1 view .LVU36
 140 007a 03A9     		add	r1, sp, #12
 141 007c 2800     		movs	r0, r5
 142 007e FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL4:
 443:Src/main.c    **** 
 444:Src/main.c    ****   GPIO_InitStruct.Pin = LED_STATUS_Pin|LED_POWER_Pin;
 144              		.loc 1 444 3 view .LVU37
 145              		.loc 1 444 23 is_stmt 0 view .LVU38
 146 0082 8423     		movs	r3, #132
 147 0084 1B02     		lsls	r3, r3, #8
 148 0086 0393     		str	r3, [sp, #12]
 445:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 149              		.loc 1 445 3 is_stmt 1 view .LVU39
 150              		.loc 1 445 24 is_stmt 0 view .LVU40
 151 0088 0497     		str	r7, [sp, #16]
 446:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 446 3 is_stmt 1 view .LVU41
 153              		.loc 1 446 24 is_stmt 0 view .LVU42
 154 008a 0594     		str	r4, [sp, #20]
 447:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 155              		.loc 1 447 3 is_stmt 1 view .LVU43
 156              		.loc 1 447 25 is_stmt 0 view .LVU44
 157 008c 0694     		str	r4, [sp, #24]
 448:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 158              		.loc 1 448 3 is_stmt 1 view .LVU45
 159 008e 03A9     		add	r1, sp, #12
 160 0090 3000     		movs	r0, r6
 161 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 162              	.LVL5:
 449:Src/main.c    **** 
 450:Src/main.c    **** }
 163              		.loc 1 450 1 is_stmt 0 view .LVU46
 164 0096 09B0     		add	sp, sp, #36
 165              		@ sp needed
 166 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 167              	.L3:
 168 009a C046     		.align	2
 169              	.L2:
 170 009c 00100240 		.word	1073876992
 171 00a0 00040048 		.word	1207960576
 172              		.cfi_endproc
 173              	.LFE62:
 175              		.section	.text.MX_DMA_Init,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.code	16
 179              		.thumb_func
ARM GAS  /tmp/cceAWXAd.s 			page 12


 180              		.fpu softvfp
 182              	MX_DMA_Init:
 183              	.LFB61:
 392:Src/main.c    ****   /* DMA controller clock enable */
 184              		.loc 1 392 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 8
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188 0000 00B5     		push	{lr}
 189              	.LCFI2:
 190              		.cfi_def_cfa_offset 4
 191              		.cfi_offset 14, -4
 192 0002 83B0     		sub	sp, sp, #12
 193              	.LCFI3:
 194              		.cfi_def_cfa_offset 16
 394:Src/main.c    **** 
 195              		.loc 1 394 3 view .LVU48
 196              	.LBB13:
 394:Src/main.c    **** 
 197              		.loc 1 394 3 view .LVU49
 394:Src/main.c    **** 
 198              		.loc 1 394 3 view .LVU50
 199 0004 114A     		ldr	r2, .L5
 200 0006 5169     		ldr	r1, [r2, #20]
 201 0008 0123     		movs	r3, #1
 202 000a 1943     		orrs	r1, r3
 203 000c 5161     		str	r1, [r2, #20]
 394:Src/main.c    **** 
 204              		.loc 1 394 3 view .LVU51
 205 000e 5269     		ldr	r2, [r2, #20]
 206 0010 1340     		ands	r3, r2
 207 0012 0193     		str	r3, [sp, #4]
 394:Src/main.c    **** 
 208              		.loc 1 394 3 view .LVU52
 209 0014 019B     		ldr	r3, [sp, #4]
 210              	.LBE13:
 398:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 211              		.loc 1 398 3 view .LVU53
 212 0016 0022     		movs	r2, #0
 213 0018 0021     		movs	r1, #0
 214 001a 0920     		movs	r0, #9
 215 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 216              	.LVL6:
 399:Src/main.c    ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 217              		.loc 1 399 3 view .LVU54
 218 0020 0920     		movs	r0, #9
 219 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 220              	.LVL7:
 401:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 221              		.loc 1 401 3 view .LVU55
 222 0026 0022     		movs	r2, #0
 223 0028 0021     		movs	r1, #0
 224 002a 0A20     		movs	r0, #10
 225 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 226              	.LVL8:
 402:Src/main.c    ****   /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
 227              		.loc 1 402 3 view .LVU56
ARM GAS  /tmp/cceAWXAd.s 			page 13


 228 0030 0A20     		movs	r0, #10
 229 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 230              	.LVL9:
 404:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 231              		.loc 1 404 3 view .LVU57
 232 0036 0022     		movs	r2, #0
 233 0038 0021     		movs	r1, #0
 234 003a 0B20     		movs	r0, #11
 235 003c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 236              	.LVL10:
 405:Src/main.c    **** 
 237              		.loc 1 405 3 view .LVU58
 238 0040 0B20     		movs	r0, #11
 239 0042 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 240              	.LVL11:
 407:Src/main.c    **** 
 241              		.loc 1 407 1 is_stmt 0 view .LVU59
 242 0046 03B0     		add	sp, sp, #12
 243              		@ sp needed
 244 0048 00BD     		pop	{pc}
 245              	.L6:
 246 004a C046     		.align	2
 247              	.L5:
 248 004c 00100240 		.word	1073876992
 249              		.cfi_endproc
 250              	.LFE61:
 252              		.section	.text.MX_ADC_Init,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.code	16
 256              		.thumb_func
 257              		.fpu softvfp
 259              	MX_ADC_Init:
 260              	.LFB58:
 240:Src/main.c    **** 
 261              		.loc 1 240 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 16
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 30B5     		push	{r4, r5, lr}
 266              	.LCFI4:
 267              		.cfi_def_cfa_offset 12
 268              		.cfi_offset 4, -12
 269              		.cfi_offset 5, -8
 270              		.cfi_offset 14, -4
 271 0002 85B0     		sub	sp, sp, #20
 272              	.LCFI5:
 273              		.cfi_def_cfa_offset 32
 246:Src/main.c    **** 
 274              		.loc 1 246 3 view .LVU61
 246:Src/main.c    **** 
 275              		.loc 1 246 26 is_stmt 0 view .LVU62
 276 0004 0C22     		movs	r2, #12
 277 0006 0021     		movs	r1, #0
 278 0008 01A8     		add	r0, sp, #4
 279 000a FFF7FEFF 		bl	memset
 280              	.LVL12:
ARM GAS  /tmp/cceAWXAd.s 			page 14


 253:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 281              		.loc 1 253 3 is_stmt 1 view .LVU63
 253:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 282              		.loc 1 253 17 is_stmt 0 view .LVU64
 283 000e 154C     		ldr	r4, .L8
 284 0010 154B     		ldr	r3, .L8+4
 285 0012 2360     		str	r3, [r4]
 254:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 286              		.loc 1 254 3 is_stmt 1 view .LVU65
 254:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 287              		.loc 1 254 28 is_stmt 0 view .LVU66
 288 0014 0023     		movs	r3, #0
 289 0016 6360     		str	r3, [r4, #4]
 255:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 290              		.loc 1 255 3 is_stmt 1 view .LVU67
 255:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 291              		.loc 1 255 24 is_stmt 0 view .LVU68
 292 0018 A360     		str	r3, [r4, #8]
 256:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 293              		.loc 1 256 3 is_stmt 1 view .LVU69
 256:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 294              		.loc 1 256 23 is_stmt 0 view .LVU70
 295 001a E360     		str	r3, [r4, #12]
 257:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 296              		.loc 1 257 3 is_stmt 1 view .LVU71
 257:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 297              		.loc 1 257 26 is_stmt 0 view .LVU72
 298 001c 0125     		movs	r5, #1
 299 001e 2561     		str	r5, [r4, #16]
 258:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 300              		.loc 1 258 3 is_stmt 1 view .LVU73
 258:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 301              		.loc 1 258 26 is_stmt 0 view .LVU74
 302 0020 0822     		movs	r2, #8
 303 0022 6261     		str	r2, [r4, #20]
 259:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 304              		.loc 1 259 3 is_stmt 1 view .LVU75
 259:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 305              		.loc 1 259 30 is_stmt 0 view .LVU76
 306 0024 A361     		str	r3, [r4, #24]
 260:Src/main.c    ****   hadc.Init.ContinuousConvMode = ENABLE;
 307              		.loc 1 260 3 is_stmt 1 view .LVU77
 260:Src/main.c    ****   hadc.Init.ContinuousConvMode = ENABLE;
 308              		.loc 1 260 34 is_stmt 0 view .LVU78
 309 0026 E361     		str	r3, [r4, #28]
 261:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 310              		.loc 1 261 3 is_stmt 1 view .LVU79
 261:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 311              		.loc 1 261 32 is_stmt 0 view .LVU80
 312 0028 2562     		str	r5, [r4, #32]
 262:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 313              		.loc 1 262 3 is_stmt 1 view .LVU81
 262:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 314              		.loc 1 262 35 is_stmt 0 view .LVU82
 315 002a 6362     		str	r3, [r4, #36]
 263:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 316              		.loc 1 263 3 is_stmt 1 view .LVU83
ARM GAS  /tmp/cceAWXAd.s 			page 15


 263:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 317              		.loc 1 263 30 is_stmt 0 view .LVU84
 318 002c C222     		movs	r2, #194
 319 002e FF32     		adds	r2, r2, #255
 320 0030 A262     		str	r2, [r4, #40]
 264:Src/main.c    ****   hadc.Init.DMAContinuousRequests = DISABLE;
 321              		.loc 1 264 3 is_stmt 1 view .LVU85
 264:Src/main.c    ****   hadc.Init.DMAContinuousRequests = DISABLE;
 322              		.loc 1 264 34 is_stmt 0 view .LVU86
 323 0032 E362     		str	r3, [r4, #44]
 265:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 324              		.loc 1 265 3 is_stmt 1 view .LVU87
 265:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 325              		.loc 1 265 35 is_stmt 0 view .LVU88
 326 0034 2363     		str	r3, [r4, #48]
 266:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 327              		.loc 1 266 3 is_stmt 1 view .LVU89
 266:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 328              		.loc 1 266 21 is_stmt 0 view .LVU90
 329 0036 6563     		str	r5, [r4, #52]
 267:Src/main.c    ****   {
 330              		.loc 1 267 3 is_stmt 1 view .LVU91
 267:Src/main.c    ****   {
 331              		.loc 1 267 7 is_stmt 0 view .LVU92
 332 0038 2000     		movs	r0, r4
 333 003a FFF7FEFF 		bl	HAL_ADC_Init
 334              	.LVL13:
 273:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 335              		.loc 1 273 3 is_stmt 1 view .LVU93
 273:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 336              		.loc 1 273 19 is_stmt 0 view .LVU94
 337 003e 0195     		str	r5, [sp, #4]
 274:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 338              		.loc 1 274 3 is_stmt 1 view .LVU95
 274:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 339              		.loc 1 274 16 is_stmt 0 view .LVU96
 340 0040 8023     		movs	r3, #128
 341 0042 5B01     		lsls	r3, r3, #5
 342 0044 0293     		str	r3, [sp, #8]
 275:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 343              		.loc 1 275 3 is_stmt 1 view .LVU97
 275:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 344              		.loc 1 275 24 is_stmt 0 view .LVU98
 345 0046 0723     		movs	r3, #7
 346 0048 0393     		str	r3, [sp, #12]
 276:Src/main.c    ****   {
 347              		.loc 1 276 3 is_stmt 1 view .LVU99
 276:Src/main.c    ****   {
 348              		.loc 1 276 7 is_stmt 0 view .LVU100
 349 004a 01A9     		add	r1, sp, #4
 350 004c 2000     		movs	r0, r4
 351 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 352              	.LVL14:
 282:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 353              		.loc 1 282 3 is_stmt 1 view .LVU101
 282:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 354              		.loc 1 282 19 is_stmt 0 view .LVU102
ARM GAS  /tmp/cceAWXAd.s 			page 16


 355 0052 0223     		movs	r3, #2
 356 0054 0193     		str	r3, [sp, #4]
 283:Src/main.c    ****   {
 357              		.loc 1 283 3 is_stmt 1 view .LVU103
 283:Src/main.c    ****   {
 358              		.loc 1 283 7 is_stmt 0 view .LVU104
 359 0056 01A9     		add	r1, sp, #4
 360 0058 2000     		movs	r0, r4
 361 005a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 362              	.LVL15:
 291:Src/main.c    **** 
 363              		.loc 1 291 1 view .LVU105
 364 005e 05B0     		add	sp, sp, #20
 365              		@ sp needed
 366 0060 30BD     		pop	{r4, r5, pc}
 367              	.L9:
 368 0062 C046     		.align	2
 369              	.L8:
 370 0064 00000000 		.word	hadc
 371 0068 00240140 		.word	1073816576
 372              		.cfi_endproc
 373              	.LFE58:
 375              		.section	.text.MX_I2C1_Init,"ax",%progbits
 376              		.align	1
 377              		.syntax unified
 378              		.code	16
 379              		.thumb_func
 380              		.fpu softvfp
 382              	MX_I2C1_Init:
 383              	.LFB59:
 299:Src/main.c    **** 
 384              		.loc 1 299 1 is_stmt 1 view -0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388 0000 10B5     		push	{r4, lr}
 389              	.LCFI6:
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 4, -8
 392              		.cfi_offset 14, -4
 308:Src/main.c    ****   hi2c1.Init.Timing = 0x0000020B;
 393              		.loc 1 308 3 view .LVU107
 308:Src/main.c    ****   hi2c1.Init.Timing = 0x0000020B;
 394              		.loc 1 308 18 is_stmt 0 view .LVU108
 395 0002 0D4C     		ldr	r4, .L11
 396 0004 0D4B     		ldr	r3, .L11+4
 397 0006 2360     		str	r3, [r4]
 309:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 398              		.loc 1 309 3 is_stmt 1 view .LVU109
 309:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 399              		.loc 1 309 21 is_stmt 0 view .LVU110
 400 0008 0D4B     		ldr	r3, .L11+8
 401 000a 6360     		str	r3, [r4, #4]
 310:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 402              		.loc 1 310 3 is_stmt 1 view .LVU111
 310:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 403              		.loc 1 310 26 is_stmt 0 view .LVU112
ARM GAS  /tmp/cceAWXAd.s 			page 17


 404 000c 0023     		movs	r3, #0
 405 000e A360     		str	r3, [r4, #8]
 311:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 406              		.loc 1 311 3 is_stmt 1 view .LVU113
 311:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 407              		.loc 1 311 29 is_stmt 0 view .LVU114
 408 0010 0122     		movs	r2, #1
 409 0012 E260     		str	r2, [r4, #12]
 312:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 410              		.loc 1 312 3 is_stmt 1 view .LVU115
 312:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 411              		.loc 1 312 30 is_stmt 0 view .LVU116
 412 0014 2361     		str	r3, [r4, #16]
 313:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 413              		.loc 1 313 3 is_stmt 1 view .LVU117
 313:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 414              		.loc 1 313 26 is_stmt 0 view .LVU118
 415 0016 6361     		str	r3, [r4, #20]
 314:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 416              		.loc 1 314 3 is_stmt 1 view .LVU119
 314:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 417              		.loc 1 314 31 is_stmt 0 view .LVU120
 418 0018 A361     		str	r3, [r4, #24]
 315:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 419              		.loc 1 315 3 is_stmt 1 view .LVU121
 315:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 420              		.loc 1 315 30 is_stmt 0 view .LVU122
 421 001a E361     		str	r3, [r4, #28]
 316:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 422              		.loc 1 316 3 is_stmt 1 view .LVU123
 316:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 423              		.loc 1 316 28 is_stmt 0 view .LVU124
 424 001c 2362     		str	r3, [r4, #32]
 317:Src/main.c    ****   {
 425              		.loc 1 317 3 is_stmt 1 view .LVU125
 317:Src/main.c    ****   {
 426              		.loc 1 317 7 is_stmt 0 view .LVU126
 427 001e 2000     		movs	r0, r4
 428 0020 FFF7FEFF 		bl	HAL_I2C_Init
 429              	.LVL16:
 323:Src/main.c    ****   {
 430              		.loc 1 323 3 is_stmt 1 view .LVU127
 323:Src/main.c    ****   {
 431              		.loc 1 323 7 is_stmt 0 view .LVU128
 432 0024 0021     		movs	r1, #0
 433 0026 2000     		movs	r0, r4
 434 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 435              	.LVL17:
 329:Src/main.c    ****   {
 436              		.loc 1 329 3 is_stmt 1 view .LVU129
 329:Src/main.c    ****   {
 437              		.loc 1 329 7 is_stmt 0 view .LVU130
 438 002c 0021     		movs	r1, #0
 439 002e 2000     		movs	r0, r4
 440 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 441              	.LVL18:
 337:Src/main.c    **** 
ARM GAS  /tmp/cceAWXAd.s 			page 18


 442              		.loc 1 337 1 view .LVU131
 443              		@ sp needed
 444 0034 10BD     		pop	{r4, pc}
 445              	.L12:
 446 0036 C046     		.align	2
 447              	.L11:
 448 0038 00000000 		.word	hi2c1
 449 003c 00540040 		.word	1073763328
 450 0040 0B020000 		.word	523
 451              		.cfi_endproc
 452              	.LFE59:
 454              		.section	.text.MX_I2C2_Init,"ax",%progbits
 455              		.align	1
 456              		.syntax unified
 457              		.code	16
 458              		.thumb_func
 459              		.fpu softvfp
 461              	MX_I2C2_Init:
 462              	.LFB60:
 345:Src/main.c    **** 
 463              		.loc 1 345 1 is_stmt 1 view -0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467 0000 10B5     		push	{r4, lr}
 468              	.LCFI7:
 469              		.cfi_def_cfa_offset 8
 470              		.cfi_offset 4, -8
 471              		.cfi_offset 14, -4
 354:Src/main.c    ****   hi2c2.Init.Timing = 0x20000209;
 472              		.loc 1 354 3 view .LVU133
 354:Src/main.c    ****   hi2c2.Init.Timing = 0x20000209;
 473              		.loc 1 354 18 is_stmt 0 view .LVU134
 474 0002 104C     		ldr	r4, .L14
 475 0004 104B     		ldr	r3, .L14+4
 476 0006 2360     		str	r3, [r4]
 355:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 477              		.loc 1 355 3 is_stmt 1 view .LVU135
 355:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 478              		.loc 1 355 21 is_stmt 0 view .LVU136
 479 0008 104B     		ldr	r3, .L14+8
 480 000a 6360     		str	r3, [r4, #4]
 356:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 481              		.loc 1 356 3 is_stmt 1 view .LVU137
 356:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 482              		.loc 1 356 26 is_stmt 0 view .LVU138
 483 000c 0023     		movs	r3, #0
 484 000e A360     		str	r3, [r4, #8]
 357:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 485              		.loc 1 357 3 is_stmt 1 view .LVU139
 357:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 486              		.loc 1 357 29 is_stmt 0 view .LVU140
 487 0010 0122     		movs	r2, #1
 488 0012 E260     		str	r2, [r4, #12]
 358:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 489              		.loc 1 358 3 is_stmt 1 view .LVU141
 358:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
ARM GAS  /tmp/cceAWXAd.s 			page 19


 490              		.loc 1 358 30 is_stmt 0 view .LVU142
 491 0014 2361     		str	r3, [r4, #16]
 359:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 492              		.loc 1 359 3 is_stmt 1 view .LVU143
 359:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 493              		.loc 1 359 26 is_stmt 0 view .LVU144
 494 0016 6361     		str	r3, [r4, #20]
 360:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 495              		.loc 1 360 3 is_stmt 1 view .LVU145
 360:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 496              		.loc 1 360 31 is_stmt 0 view .LVU146
 497 0018 A361     		str	r3, [r4, #24]
 361:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 498              		.loc 1 361 3 is_stmt 1 view .LVU147
 361:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 499              		.loc 1 361 30 is_stmt 0 view .LVU148
 500 001a E361     		str	r3, [r4, #28]
 362:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 501              		.loc 1 362 3 is_stmt 1 view .LVU149
 362:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 502              		.loc 1 362 28 is_stmt 0 view .LVU150
 503 001c 2362     		str	r3, [r4, #32]
 363:Src/main.c    ****   {
 504              		.loc 1 363 3 is_stmt 1 view .LVU151
 363:Src/main.c    ****   {
 505              		.loc 1 363 7 is_stmt 0 view .LVU152
 506 001e 2000     		movs	r0, r4
 507 0020 FFF7FEFF 		bl	HAL_I2C_Init
 508              	.LVL19:
 369:Src/main.c    ****   {
 509              		.loc 1 369 3 is_stmt 1 view .LVU153
 369:Src/main.c    ****   {
 510              		.loc 1 369 7 is_stmt 0 view .LVU154
 511 0024 0021     		movs	r1, #0
 512 0026 2000     		movs	r0, r4
 513 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 514              	.LVL20:
 375:Src/main.c    ****   {
 515              		.loc 1 375 3 is_stmt 1 view .LVU155
 375:Src/main.c    ****   {
 516              		.loc 1 375 7 is_stmt 0 view .LVU156
 517 002c 0021     		movs	r1, #0
 518 002e 2000     		movs	r0, r4
 519 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 520              	.LVL21:
 381:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 2 */
 521              		.loc 1 381 3 is_stmt 1 view .LVU157
 381:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 2 */
 522              		.loc 1 381 3 view .LVU158
 381:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 2 */
 523              		.loc 1 381 3 view .LVU159
 524 0034 064A     		ldr	r2, .L14+12
 525 0036 1168     		ldr	r1, [r2]
 526 0038 8023     		movs	r3, #128
 527 003a 9B03     		lsls	r3, r3, #14
 528 003c 0B43     		orrs	r3, r1
 529 003e 1360     		str	r3, [r2]
ARM GAS  /tmp/cceAWXAd.s 			page 20


 386:Src/main.c    **** 
 530              		.loc 1 386 1 is_stmt 0 view .LVU160
 531              		@ sp needed
 532 0040 10BD     		pop	{r4, pc}
 533              	.L15:
 534 0042 C046     		.align	2
 535              	.L14:
 536 0044 00000000 		.word	hi2c2
 537 0048 00580040 		.word	1073764352
 538 004c 09020020 		.word	536871433
 539 0050 00000140 		.word	1073807360
 540              		.cfi_endproc
 541              	.LFE60:
 543              		.section	.text.dfu_otter_bootloader,"ax",%progbits
 544              		.align	1
 545              		.global	dfu_otter_bootloader
 546              		.syntax unified
 547              		.code	16
 548              		.thumb_func
 549              		.fpu softvfp
 551              	dfu_otter_bootloader:
 552              	.LFB56:
 183:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 553              		.loc 1 183 1 is_stmt 1 view -0
 554              		.cfi_startproc
 555              		@ Volatile: function does not return.
 556              		@ args = 0, pretend = 0, frame = 0
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558              		@ link register save eliminated.
 184:Src/main.c    ****   NVIC_SystemReset();
 559              		.loc 1 184 3 view .LVU162
 184:Src/main.c    ****   NVIC_SystemReset();
 560              		.loc 1 184 34 is_stmt 0 view .LVU163
 561 0000 054B     		ldr	r3, .L18
 562 0002 064A     		ldr	r2, .L18+4
 563 0004 1A60     		str	r2, [r3]
 185:Src/main.c    **** }
 564              		.loc 1 185 3 is_stmt 1 view .LVU164
 565              	.LBB22:
 566              	.LBI22:
 567              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
ARM GAS  /tmp/cceAWXAd.s 			page 21


  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
ARM GAS  /tmp/cceAWXAd.s 			page 22


  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cceAWXAd.s 			page 23


 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cceAWXAd.s 			page 24


 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/cceAWXAd.s 			page 25


 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
ARM GAS  /tmp/cceAWXAd.s 			page 26


 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cceAWXAd.s 			page 27


 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
ARM GAS  /tmp/cceAWXAd.s 			page 28


 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
ARM GAS  /tmp/cceAWXAd.s 			page 29


 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
ARM GAS  /tmp/cceAWXAd.s 			page 30


 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cceAWXAd.s 			page 31


 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /tmp/cceAWXAd.s 			page 32


 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /tmp/cceAWXAd.s 			page 33


 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 568              		.loc 2 730 22 view .LVU165
 569              	.LBB23:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 570              		.loc 2 732 3 view .LVU166
 571              	.LBB24:
 572              	.LBI24:
 573              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
ARM GAS  /tmp/cceAWXAd.s 			page 34


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
ARM GAS  /tmp/cceAWXAd.s 			page 35


  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cceAWXAd.s 			page 36


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
ARM GAS  /tmp/cceAWXAd.s 			page 37


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cceAWXAd.s 			page 38


 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
ARM GAS  /tmp/cceAWXAd.s 			page 39


 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  /tmp/cceAWXAd.s 			page 40


 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
ARM GAS  /tmp/cceAWXAd.s 			page 41


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 574              		.loc 3 427 53 view .LVU167
 575              	.LBB25:
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 576              		.loc 3 429 3 view .LVU168
 577              		.syntax divided
 578              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 579 0006 BFF34F8F 		dsb 0xF
 580              	@ 0 "" 2
 581              		.thumb
 582              		.syntax unified
 583              	.LBE25:
 584              	.LBE24:
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 585              		.loc 2 734 3 view .LVU169
 586              		.loc 2 734 15 is_stmt 0 view .LVU170
 587 000a 054B     		ldr	r3, .L18+8
 588 000c 054A     		ldr	r2, .L18+12
 589 000e DA60     		str	r2, [r3, #12]
 735:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 590              		.loc 2 736 3 is_stmt 1 view .LVU171
 591              	.LBB26:
 592              	.LBI26:
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 593              		.loc 3 427 53 view .LVU172
 594              	.LBB27:
 595              		.loc 3 429 3 view .LVU173
 596              		.syntax divided
 597              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 598 0010 BFF34F8F 		dsb 0xF
 599              	@ 0 "" 2
 600              		.thumb
 601              		.syntax unified
 602              	.L17:
 603              	.LBE27:
 604              	.LBE26:
 737:Drivers/CMSIS/Include/core_cm0.h **** 
 738:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 605              		.loc 2 738 3 view .LVU174
 739:Drivers/CMSIS/Include/core_cm0.h ****   {
 740:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 606              		.loc 2 740 5 view .LVU175
 607              	.LBB28:
 608              	.LBI28:
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 609              		.loc 3 373 53 view .LVU176
ARM GAS  /tmp/cceAWXAd.s 			page 42


 610              	.LBB29:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 611              		.loc 3 375 3 view .LVU177
 612              		.syntax divided
 613              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 614 0014 C046     		nop
 615              	@ 0 "" 2
 616              		.thumb
 617              		.syntax unified
 618 0016 FDE7     		b	.L17
 619              	.L19:
 620              		.align	2
 621              	.L18:
 622 0018 F03F0020 		.word	536887280
 623 001c EFBEADDE 		.word	-559038737
 624 0020 00ED00E0 		.word	-536810240
 625 0024 0400FA05 		.word	100270084
 626              	.LBE29:
 627              	.LBE28:
 628              	.LBE23:
 629              	.LBE22:
 630              		.cfi_endproc
 631              	.LFE56:
 633              		.section	.text.SystemClock_Config,"ax",%progbits
 634              		.align	1
 635              		.global	SystemClock_Config
 636              		.syntax unified
 637              		.code	16
 638              		.thumb_func
 639              		.fpu softvfp
 641              	SystemClock_Config:
 642              	.LFB57:
 193:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 643              		.loc 1 193 1 view -0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 96
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647 0000 10B5     		push	{r4, lr}
 648              	.LCFI8:
 649              		.cfi_def_cfa_offset 8
 650              		.cfi_offset 4, -8
 651              		.cfi_offset 14, -4
 652 0002 98B0     		sub	sp, sp, #96
 653              	.LCFI9:
 654              		.cfi_def_cfa_offset 104
 194:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 655              		.loc 1 194 3 view .LVU179
 194:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 656              		.loc 1 194 22 is_stmt 0 view .LVU180
 657 0004 3022     		movs	r2, #48
 658 0006 0021     		movs	r1, #0
 659 0008 0CA8     		add	r0, sp, #48
 660 000a FFF7FEFF 		bl	memset
 661              	.LVL22:
 195:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 662              		.loc 1 195 3 is_stmt 1 view .LVU181
 195:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
ARM GAS  /tmp/cceAWXAd.s 			page 43


 663              		.loc 1 195 22 is_stmt 0 view .LVU182
 664 000e 1024     		movs	r4, #16
 665 0010 1022     		movs	r2, #16
 666 0012 0021     		movs	r1, #0
 667 0014 07A8     		add	r0, sp, #28
 668 0016 FFF7FEFF 		bl	memset
 669              	.LVL23:
 196:Src/main.c    **** 
 670              		.loc 1 196 3 is_stmt 1 view .LVU183
 196:Src/main.c    **** 
 671              		.loc 1 196 28 is_stmt 0 view .LVU184
 672 001a 1C22     		movs	r2, #28
 673 001c 0021     		movs	r1, #0
 674 001e 6846     		mov	r0, sp
 675 0020 FFF7FEFF 		bl	memset
 676              	.LVL24:
 200:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 677              		.loc 1 200 3 is_stmt 1 view .LVU185
 200:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 678              		.loc 1 200 36 is_stmt 0 view .LVU186
 679 0024 3223     		movs	r3, #50
 680 0026 0B93     		str	r3, [sp, #44]
 202:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 681              		.loc 1 202 3 is_stmt 1 view .LVU187
 202:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 682              		.loc 1 202 30 is_stmt 0 view .LVU188
 683 0028 313B     		subs	r3, r3, #49
 684 002a 0E93     		str	r3, [sp, #56]
 203:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 685              		.loc 1 203 3 is_stmt 1 view .LVU189
 203:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 686              		.loc 1 203 32 is_stmt 0 view .LVU190
 687 002c 1393     		str	r3, [sp, #76]
 204:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 688              		.loc 1 204 3 is_stmt 1 view .LVU191
 204:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 689              		.loc 1 204 32 is_stmt 0 view .LVU192
 690 002e 1093     		str	r3, [sp, #64]
 205:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 691              		.loc 1 205 3 is_stmt 1 view .LVU193
 205:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 692              		.loc 1 205 41 is_stmt 0 view .LVU194
 693 0030 0F94     		str	r4, [sp, #60]
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 694              		.loc 1 206 3 is_stmt 1 view .LVU195
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 695              		.loc 1 206 43 is_stmt 0 view .LVU196
 696 0032 1194     		str	r4, [sp, #68]
 207:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 697              		.loc 1 207 3 is_stmt 1 view .LVU197
 208:Src/main.c    ****   {
 698              		.loc 1 208 3 view .LVU198
 208:Src/main.c    ****   {
 699              		.loc 1 208 7 is_stmt 0 view .LVU199
 700 0034 0BA8     		add	r0, sp, #44
 701 0036 FFF7FEFF 		bl	HAL_RCC_OscConfig
 702              	.LVL25:
ARM GAS  /tmp/cceAWXAd.s 			page 44


 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 703              		.loc 1 214 3 is_stmt 1 view .LVU200
 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 704              		.loc 1 214 31 is_stmt 0 view .LVU201
 705 003a 0723     		movs	r3, #7
 706 003c 0793     		str	r3, [sp, #28]
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 707              		.loc 1 216 3 is_stmt 1 view .LVU202
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 708              		.loc 1 216 34 is_stmt 0 view .LVU203
 709 003e 043B     		subs	r3, r3, #4
 710 0040 0893     		str	r3, [sp, #32]
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 711              		.loc 1 217 3 is_stmt 1 view .LVU204
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 712              		.loc 1 217 35 is_stmt 0 view .LVU205
 713 0042 0024     		movs	r4, #0
 714 0044 0994     		str	r4, [sp, #36]
 218:Src/main.c    **** 
 715              		.loc 1 218 3 is_stmt 1 view .LVU206
 218:Src/main.c    **** 
 716              		.loc 1 218 36 is_stmt 0 view .LVU207
 717 0046 0A94     		str	r4, [sp, #40]
 220:Src/main.c    ****   {
 718              		.loc 1 220 3 is_stmt 1 view .LVU208
 220:Src/main.c    ****   {
 719              		.loc 1 220 7 is_stmt 0 view .LVU209
 720 0048 0121     		movs	r1, #1
 721 004a 07A8     		add	r0, sp, #28
 722 004c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 723              	.LVL26:
 224:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 724              		.loc 1 224 3 is_stmt 1 view .LVU210
 224:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 725              		.loc 1 224 38 is_stmt 0 view .LVU211
 726 0050 044B     		ldr	r3, .L21
 727 0052 0093     		str	r3, [sp]
 225:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 728              		.loc 1 225 3 is_stmt 1 view .LVU212
 225:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 729              		.loc 1 225 36 is_stmt 0 view .LVU213
 730 0054 0494     		str	r4, [sp, #16]
 226:Src/main.c    **** 
 731              		.loc 1 226 3 is_stmt 1 view .LVU214
 226:Src/main.c    **** 
 732              		.loc 1 226 35 is_stmt 0 view .LVU215
 733 0056 0694     		str	r4, [sp, #24]
 228:Src/main.c    ****   {
 734              		.loc 1 228 3 is_stmt 1 view .LVU216
 228:Src/main.c    ****   {
 735              		.loc 1 228 7 is_stmt 0 view .LVU217
 736 0058 6846     		mov	r0, sp
 737 005a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 738              	.LVL27:
 232:Src/main.c    **** 
 739              		.loc 1 232 1 view .LVU218
 740 005e 18B0     		add	sp, sp, #96
ARM GAS  /tmp/cceAWXAd.s 			page 45


 741              		@ sp needed
 742 0060 10BD     		pop	{r4, pc}
 743              	.L22:
 744 0062 C046     		.align	2
 745              	.L21:
 746 0064 20000200 		.word	131104
 747              		.cfi_endproc
 748              	.LFE57:
 750              		.section	.text.main,"ax",%progbits
 751              		.align	1
 752              		.global	main
 753              		.syntax unified
 754              		.code	16
 755              		.thumb_func
 756              		.fpu softvfp
 758              	main:
 759              	.LFB55:
 116:Src/main.c    ****   /* USER CODE BEGIN 1 */
 760              		.loc 1 116 1 is_stmt 1 view -0
 761              		.cfi_startproc
 762              		@ Volatile: function does not return.
 763              		@ args = 0, pretend = 0, frame = 40
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765 0000 10B5     		push	{r4, lr}
 766              	.LCFI10:
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 4, -8
 769              		.cfi_offset 14, -4
 770 0002 8AB0     		sub	sp, sp, #40
 771              	.LCFI11:
 772              		.cfi_def_cfa_offset 48
 124:Src/main.c    **** 
 773              		.loc 1 124 3 view .LVU220
 774 0004 FFF7FEFF 		bl	HAL_Init
 775              	.LVL28:
 131:Src/main.c    **** 
 776              		.loc 1 131 3 view .LVU221
 777 0008 FFF7FEFF 		bl	SystemClock_Config
 778              	.LVL29:
 139:Src/main.c    ****   MX_DMA_Init();
 779              		.loc 1 139 3 view .LVU222
 780 000c FFF7FEFF 		bl	MX_GPIO_Init
 781              	.LVL30:
 140:Src/main.c    ****   MX_ADC_Init();
 782              		.loc 1 140 3 view .LVU223
 783 0010 FFF7FEFF 		bl	MX_DMA_Init
 784              	.LVL31:
 141:Src/main.c    ****   MX_I2C1_Init();
 785              		.loc 1 141 3 view .LVU224
 786 0014 FFF7FEFF 		bl	MX_ADC_Init
 787              	.LVL32:
 142:Src/main.c    ****   MX_I2C2_Init();
 788              		.loc 1 142 3 view .LVU225
 789 0018 FFF7FEFF 		bl	MX_I2C1_Init
 790              	.LVL33:
 143:Src/main.c    ****   MX_USB_DEVICE_Init();
 791              		.loc 1 143 3 view .LVU226
ARM GAS  /tmp/cceAWXAd.s 			page 46


 792 001c FFF7FEFF 		bl	MX_I2C2_Init
 793              	.LVL34:
 144:Src/main.c    ****   /* USER CODE BEGIN 2 */
 794              		.loc 1 144 3 view .LVU227
 795 0020 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 796              	.LVL35:
 148:Src/main.c    ****     dfu_otter_bootloader();
 797              		.loc 1 148 3 view .LVU228
 148:Src/main.c    ****     dfu_otter_bootloader();
 798              		.loc 1 148 6 is_stmt 0 view .LVU229
 799 0024 9020     		movs	r0, #144
 800 0026 0821     		movs	r1, #8
 801 0028 C005     		lsls	r0, r0, #23
 802 002a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 803              	.LVL36:
 148:Src/main.c    ****     dfu_otter_bootloader();
 804              		.loc 1 148 5 view .LVU230
 805 002e 0128     		cmp	r0, #1
 806 0030 1BD0     		beq	.L28
 155:Src/main.c    ****   HAL_Delay(50);
 807              		.loc 1 155 3 is_stmt 1 view .LVU231
 808              	.LVL37:
 809              	.LBB35:
 810              	.LBI35:
 811              		.file 4 "Inc/tcpm.h"
   1:Inc/tcpm.h    **** /* Copyright 2015 The Chromium OS Authors. All rights reserved.
   2:Inc/tcpm.h    ****  * Use of this source code is governed by a BSD-style license that can be
   3:Inc/tcpm.h    ****  * found in the LICENSE file.
   4:Inc/tcpm.h    ****  */
   5:Inc/tcpm.h    **** 
   6:Inc/tcpm.h    **** /* USB Power delivery port management - common header for TCPM drivers */
   7:Inc/tcpm.h    **** 
   8:Inc/tcpm.h    **** #ifndef __CROS_EC_USB_PD_TCPM_TCPM_H
   9:Inc/tcpm.h    **** #define __CROS_EC_USB_PD_TCPM_TCPM_H
  10:Inc/tcpm.h    **** 
  11:Inc/tcpm.h    **** #ifdef __cplusplus
  12:Inc/tcpm.h    **** extern "C" {
  13:Inc/tcpm.h    **** #endif
  14:Inc/tcpm.h    **** 
  15:Inc/tcpm.h    **** #include "tcpm_driver.h"
  16:Inc/tcpm.h    **** #include "usb_pd_tcpm.h"
  17:Inc/tcpm.h    **** 
  18:Inc/tcpm.h    **** #if defined(CONFIG_USB_PD_DUAL_ROLE_AUTO_TOGGLE) && \
  19:Inc/tcpm.h    **** 	!defined(CONFIG_USB_PD_DUAL_ROLE)
  20:Inc/tcpm.h    **** #error "DRP auto toggle requires board to have DRP support"
  21:Inc/tcpm.h    **** #error "Please upgrade your board configuration"
  22:Inc/tcpm.h    **** #endif
  23:Inc/tcpm.h    **** 
  24:Inc/tcpm.h    **** #ifndef CONFIG_USB_PD_TCPC
  25:Inc/tcpm.h    **** extern const struct tcpc_config_t tcpc_config[];
  26:Inc/tcpm.h    **** 
  27:Inc/tcpm.h    **** /* I2C wrapper functions - get I2C port / slave addr from config struct. */
  28:Inc/tcpm.h    **** int tcpc_write(int port, int reg, int val);
  29:Inc/tcpm.h    **** int tcpc_write16(int port, int reg, int val);
  30:Inc/tcpm.h    **** int tcpc_read(int port, int reg, int *val);
  31:Inc/tcpm.h    **** int tcpc_read16(int port, int reg, int *val);
  32:Inc/tcpm.h    **** int tcpc_xfer(int port,
ARM GAS  /tmp/cceAWXAd.s 			page 47


  33:Inc/tcpm.h    **** 		const uint8_t *out, int out_size,
  34:Inc/tcpm.h    **** 		uint8_t *in, int in_size,
  35:Inc/tcpm.h    **** 		int flags);
  36:Inc/tcpm.h    **** 
  37:Inc/tcpm.h    **** /* TCPM driver wrapper function */
  38:Inc/tcpm.h    **** static inline int tcpm_init(int port)
 812              		.loc 4 38 19 view .LVU232
 813              	.LBB36:
  39:Inc/tcpm.h    **** {
  40:Inc/tcpm.h    **** 	int rv;
 814              		.loc 4 40 2 view .LVU233
  41:Inc/tcpm.h    **** 
  42:Inc/tcpm.h    **** 	rv = tcpc_config[port].drv->init(port);
 815              		.loc 4 42 2 view .LVU234
 816              		.loc 4 42 28 is_stmt 0 view .LVU235
 817 0032 244B     		ldr	r3, .L29
 818 0034 1B68     		ldr	r3, [r3]
 819              		.loc 4 42 7 view .LVU236
 820 0036 0020     		movs	r0, #0
 821 0038 9847     		blx	r3
 822              	.LVL38:
  43:Inc/tcpm.h    **** 	if (rv)
 823              		.loc 4 43 2 is_stmt 1 view .LVU237
 824              		.loc 4 43 5 is_stmt 0 view .LVU238
 825 003a 0028     		cmp	r0, #0
 826 003c 04D1     		bne	.L25
  44:Inc/tcpm.h    **** 		return rv;
  45:Inc/tcpm.h    **** 
  46:Inc/tcpm.h    **** 	/* Board specific post TCPC init */
  47:Inc/tcpm.h    **** 	if (board_tcpc_post_init)
 827              		.loc 4 47 2 is_stmt 1 view .LVU239
 828              		.loc 4 47 5 is_stmt 0 view .LVU240
 829 003e 224B     		ldr	r3, .L29+4
 830 0040 002B     		cmp	r3, #0
 831 0042 01D0     		beq	.L25
  48:Inc/tcpm.h    **** 		rv = board_tcpc_post_init(port);
 832              		.loc 4 48 3 is_stmt 1 view .LVU241
 833              		.loc 4 48 8 is_stmt 0 view .LVU242
 834 0044 FFF7FEFF 		bl	board_tcpc_post_init
 835              	.LVL39:
 836              	.L25:
 837              		.loc 4 48 8 view .LVU243
 838              	.LBE36:
 839              	.LBE35:
 156:Src/main.c    ****   pd_init(0);
 840              		.loc 1 156 3 is_stmt 1 view .LVU244
 841 0048 3220     		movs	r0, #50
 842 004a FFF7FEFF 		bl	HAL_Delay
 843              	.LVL40:
 157:Src/main.c    ****   HAL_Delay(50);
 844              		.loc 1 157 3 view .LVU245
 845 004e 0020     		movs	r0, #0
 846 0050 FFF7FEFF 		bl	pd_init
 847              	.LVL41:
 158:Src/main.c    **** 
 848              		.loc 1 158 3 view .LVU246
 849 0054 3220     		movs	r0, #50
ARM GAS  /tmp/cceAWXAd.s 			page 48


 850 0056 FFF7FEFF 		bl	HAL_Delay
 851              	.LVL42:
 160:Src/main.c    ****   char str[40];
 852              		.loc 1 160 5 view .LVU247
 853 005a 8021     		movs	r1, #128
 854 005c 9020     		movs	r0, #144
 855 005e 0122     		movs	r2, #1
 856 0060 C900     		lsls	r1, r1, #3
 857 0062 C005     		lsls	r0, r0, #23
 858 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 859              	.LVL43:
 860 0068 04E0     		b	.L27
 861              	.L28:
 149:Src/main.c    ****   }  
 862              		.loc 1 149 5 view .LVU248
 863 006a FFF7FEFF 		bl	dfu_otter_bootloader
 864              	.LVL44:
 865              	.L26:
 866              	.LBB37:
 178:Src/main.c    ****   }
 867              		.loc 1 178 5 view .LVU249
 868 006e 0020     		movs	r0, #0
 869 0070 FFF7FEFF 		bl	pd_run_state_machine
 870              	.LVL45:
 871              	.L27:
 872              	.LBE37:
 161:Src/main.c    **** 
 873              		.loc 1 161 3 view .LVU250
 164:Src/main.c    ****   {
 874              		.loc 1 164 3 view .LVU251
 875              	.LBB40:
 166:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA,LED_STATUS_Pin,HAL_GPIO_ReadPin(GPIOA,BUTTON_Pin));
 876              		.loc 1 166 5 view .LVU252
 877 0074 0220     		movs	r0, #2
 878 0076 FFF7FEFF 		bl	HAL_Delay
 879              	.LVL46:
 167:Src/main.c    ****         
 880              		.loc 1 167 5 view .LVU253
 881 007a 9024     		movs	r4, #144
 882 007c E405     		lsls	r4, r4, #23
 883 007e 0821     		movs	r1, #8
 884 0080 2000     		movs	r0, r4
 885 0082 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 886              	.LVL47:
 887 0086 0200     		movs	r2, r0
 888 0088 8021     		movs	r1, #128
 889 008a 0902     		lsls	r1, r1, #8
 890 008c 2000     		movs	r0, r4
 891 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 892              	.LVL48:
 169:Src/main.c    ****     sprintf(&str[0],"Otter! %d\n\r",1);//pd_is_connected(0),pd_is_port_enabled(0));
 893              		.loc 1 169 5 view .LVU254
 894 0092 2822     		movs	r2, #40
 895 0094 2021     		movs	r1, #32
 896 0096 6846     		mov	r0, sp
 897 0098 FFF7FEFF 		bl	memset
 898              	.LVL49:
ARM GAS  /tmp/cceAWXAd.s 			page 49


 170:Src/main.c    ****     //pd_request_source_voltage(0,20000);
 899              		.loc 1 170 5 view .LVU255
 900 009c 0122     		movs	r2, #1
 901 009e 0B49     		ldr	r1, .L29+8
 902 00a0 6846     		mov	r0, sp
 903 00a2 FFF7FEFF 		bl	sprintf
 904              	.LVL50:
 172:Src/main.c    ****     
 905              		.loc 1 172 5 view .LVU256
 906 00a6 2821     		movs	r1, #40
 907 00a8 6846     		mov	r0, sp
 908 00aa FFF7FEFF 		bl	CDC_Transmit_FS
 909              	.LVL51:
 174:Src/main.c    ****       tcpc_alert(0);
 910              		.loc 1 174 5 view .LVU257
 174:Src/main.c    ****       tcpc_alert(0);
 911              		.loc 1 174 9 is_stmt 0 view .LVU258
 912 00ae 8021     		movs	r1, #128
 913 00b0 4901     		lsls	r1, r1, #5
 914 00b2 2000     		movs	r0, r4
 915 00b4 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 916              	.LVL52:
 174:Src/main.c    ****       tcpc_alert(0);
 917              		.loc 1 174 8 view .LVU259
 918 00b8 0028     		cmp	r0, #0
 919 00ba D8D1     		bne	.L26
 175:Src/main.c    ****     }
 920              		.loc 1 175 7 is_stmt 1 view .LVU260
 921              	.LVL53:
 922              	.LBB38:
 923              	.LBI38:
  49:Inc/tcpm.h    **** 
  50:Inc/tcpm.h    **** 	return rv;
  51:Inc/tcpm.h    **** }
  52:Inc/tcpm.h    **** 
  53:Inc/tcpm.h    **** static inline int tcpm_release(int port)
  54:Inc/tcpm.h    **** {
  55:Inc/tcpm.h    **** 	return tcpc_config[port].drv->release(port);
  56:Inc/tcpm.h    **** }
  57:Inc/tcpm.h    **** 
  58:Inc/tcpm.h    **** static inline int tcpm_get_cc(int port, int *cc1, int *cc2)
  59:Inc/tcpm.h    **** {
  60:Inc/tcpm.h    **** 	return tcpc_config[port].drv->get_cc(port, cc1, cc2);
  61:Inc/tcpm.h    **** }
  62:Inc/tcpm.h    **** 
  63:Inc/tcpm.h    **** static inline int tcpm_get_vbus_level(int port)
  64:Inc/tcpm.h    **** {
  65:Inc/tcpm.h    **** 	return tcpc_config[port].drv->get_vbus_level(port);
  66:Inc/tcpm.h    **** }
  67:Inc/tcpm.h    **** 
  68:Inc/tcpm.h    **** static inline int tcpm_select_rp_value(int port, int rp)
  69:Inc/tcpm.h    **** {
  70:Inc/tcpm.h    **** 	return tcpc_config[port].drv->select_rp_value(port, rp);
  71:Inc/tcpm.h    **** }
  72:Inc/tcpm.h    **** 
  73:Inc/tcpm.h    **** static inline int tcpm_set_cc(int port, int pull)
  74:Inc/tcpm.h    **** {
ARM GAS  /tmp/cceAWXAd.s 			page 50


  75:Inc/tcpm.h    **** 	return tcpc_config[port].drv->set_cc(port, pull);
  76:Inc/tcpm.h    **** }
  77:Inc/tcpm.h    **** 
  78:Inc/tcpm.h    **** static inline int tcpm_set_polarity(int port, int polarity)
  79:Inc/tcpm.h    **** {
  80:Inc/tcpm.h    **** 	return tcpc_config[port].drv->set_polarity(port, polarity);
  81:Inc/tcpm.h    **** }
  82:Inc/tcpm.h    **** 
  83:Inc/tcpm.h    **** static inline int tcpm_set_vconn(int port, int enable)
  84:Inc/tcpm.h    **** {
  85:Inc/tcpm.h    **** 	return tcpc_config[port].drv->set_vconn(port, enable);
  86:Inc/tcpm.h    **** }
  87:Inc/tcpm.h    **** 
  88:Inc/tcpm.h    **** static inline int tcpm_set_msg_header(int port, int power_role, int data_role)
  89:Inc/tcpm.h    **** {
  90:Inc/tcpm.h    **** 	return tcpc_config[port].drv->set_msg_header(port, power_role,
  91:Inc/tcpm.h    **** 						     data_role);
  92:Inc/tcpm.h    **** }
  93:Inc/tcpm.h    **** 
  94:Inc/tcpm.h    **** static inline int tcpm_set_rx_enable(int port, int enable)
  95:Inc/tcpm.h    **** {
  96:Inc/tcpm.h    **** 	return tcpc_config[port].drv->set_rx_enable(port, enable);
  97:Inc/tcpm.h    **** }
  98:Inc/tcpm.h    **** 
  99:Inc/tcpm.h    **** static inline int tcpm_get_message(int port, uint32_t *payload, int *head)
 100:Inc/tcpm.h    **** {
 101:Inc/tcpm.h    **** 	return tcpc_config[port].drv->get_message(port, payload, head);
 102:Inc/tcpm.h    **** }
 103:Inc/tcpm.h    **** 
 104:Inc/tcpm.h    **** static inline int tcpm_transmit(int port, enum tcpm_transmit_type type,
 105:Inc/tcpm.h    **** 		  uint16_t header, const uint32_t *data)
 106:Inc/tcpm.h    **** {
 107:Inc/tcpm.h    **** 	return tcpc_config[port].drv->transmit(port, type, header, data);
 108:Inc/tcpm.h    **** }
 109:Inc/tcpm.h    **** 
 110:Inc/tcpm.h    **** static inline void tcpc_alert(int port)
 924              		.loc 4 110 20 view .LVU261
 925              	.LBB39:
 111:Inc/tcpm.h    **** {
 112:Inc/tcpm.h    **** 	tcpc_config[port].drv->tcpc_alert(port);
 926              		.loc 4 112 2 view .LVU262
 927              		.loc 4 112 23 is_stmt 0 view .LVU263
 928 00bc 014B     		ldr	r3, .L29
 929 00be 1B6B     		ldr	r3, [r3, #48]
 930              		.loc 4 112 2 view .LVU264
 931 00c0 9847     		blx	r3
 932              	.LVL54:
 933 00c2 D4E7     		b	.L26
 934              	.L30:
 935              		.align	2
 936              	.L29:
 937 00c4 00000000 		.word	fusb302_tcpm_drv
 938 00c8 00000000 		.word	board_tcpc_post_init
 939 00cc 00000000 		.word	.LC5
 940              	.LBE39:
 941              	.LBE38:
 942              	.LBE40:
ARM GAS  /tmp/cceAWXAd.s 			page 51


 943              		.cfi_endproc
 944              	.LFE55:
 946              		.section	.text.Error_Handler,"ax",%progbits
 947              		.align	1
 948              		.global	Error_Handler
 949              		.syntax unified
 950              		.code	16
 951              		.thumb_func
 952              		.fpu softvfp
 954              	Error_Handler:
 955              	.LFB63:
 451:Src/main.c    **** 
 452:Src/main.c    **** /* USER CODE BEGIN 4 */
 453:Src/main.c    **** 
 454:Src/main.c    **** /* USER CODE END 4 */
 455:Src/main.c    **** 
 456:Src/main.c    **** /**
 457:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 458:Src/main.c    ****   * @retval None
 459:Src/main.c    ****   */
 460:Src/main.c    **** void Error_Handler(void)
 461:Src/main.c    **** {
 956              		.loc 1 461 1 is_stmt 1 view -0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              		@ link register save eliminated.
 462:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 463:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 464:Src/main.c    **** 
 465:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 466:Src/main.c    **** }
 961              		.loc 1 466 1 view .LVU266
 962              		@ sp needed
 963 0000 7047     		bx	lr
 964              		.cfi_endproc
 965              	.LFE63:
 967              		.global	tcpc_config
 968              		.comm	hdma_i2c2_tx,68,4
 969              		.comm	hdma_i2c2_rx,68,4
 970              		.comm	hdma_i2c1_tx,68,4
 971              		.comm	hdma_i2c1_rx,68,4
 972              		.comm	hi2c2,76,4
 973              		.comm	hi2c1,76,4
 974              		.comm	hdma_adc,68,4
 975              		.comm	hadc,76,4
 976              		.comm	ticks,4,4
 977              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 978              		.align	2
 979              	.LC5:
 980 0000 4F747465 		.ascii	"Otter! %d\012\015\000"
 980      72212025 
 980      640A0D00 
 981              		.section	.rodata.tcpc_config,"a"
 982              		.align	2
 985              	tcpc_config:
 986 0000 00000000 		.word	0
ARM GAS  /tmp/cceAWXAd.s 			page 52


 987 0004 22000000 		.word	34
 988 0008 00000000 		.word	fusb302_tcpm_drv
 989 000c 00000000 		.space	4
 990              		.weak	board_tcpc_post_init
 991              		.text
 992              	.Letext0:
 993              		.file 5 "/usr/arm-none-eabi/include/machine/_default_types.h"
 994              		.file 6 "/usr/arm-none-eabi/include/sys/_stdint.h"
 995              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 996              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 997              		.file 9 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 998              		.file 10 "/usr/arm-none-eabi/include/sys/lock.h"
 999              		.file 11 "/usr/arm-none-eabi/include/sys/_types.h"
 1000              		.file 12 "/usr/lib/gcc/arm-none-eabi/8.2.0/include/stddef.h"
 1001              		.file 13 "/usr/arm-none-eabi/include/sys/reent.h"
 1002              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1003              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1004              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 1005              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1006              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1007              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 1008              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 1009              		.file 21 "Inc/main.h"
 1010              		.file 22 "/usr/arm-none-eabi/include/stdlib.h"
 1011              		.file 23 "Inc/usb_pd_tcpm.h"
 1012              		.file 24 "Inc/usb_pd.h"
 1013              		.file 25 "Inc/FUSB302.h"
 1014              		.file 26 "Inc/tcpm_driver.h"
 1015              		.file 27 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1016              		.file 28 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 1017              		.file 29 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1018              		.file 30 "/usr/arm-none-eabi/include/string.h"
 1019              		.file 31 "/usr/arm-none-eabi/include/stdio.h"
 1020              		.file 32 "Inc/usb_device.h"
 1021              		.file 33 "<built-in>"
ARM GAS  /tmp/cceAWXAd.s 			page 53


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cceAWXAd.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cceAWXAd.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cceAWXAd.s:170    .text.MX_GPIO_Init:000000000000009c $d
     /tmp/cceAWXAd.s:176    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cceAWXAd.s:182    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cceAWXAd.s:248    .text.MX_DMA_Init:000000000000004c $d
     /tmp/cceAWXAd.s:253    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/cceAWXAd.s:259    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/cceAWXAd.s:370    .text.MX_ADC_Init:0000000000000064 $d
                            *COM*:000000000000004c hadc
     /tmp/cceAWXAd.s:376    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cceAWXAd.s:382    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cceAWXAd.s:448    .text.MX_I2C1_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c1
     /tmp/cceAWXAd.s:455    .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/cceAWXAd.s:461    .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/cceAWXAd.s:536    .text.MX_I2C2_Init:0000000000000044 $d
                            *COM*:000000000000004c hi2c2
     /tmp/cceAWXAd.s:544    .text.dfu_otter_bootloader:0000000000000000 $t
     /tmp/cceAWXAd.s:551    .text.dfu_otter_bootloader:0000000000000000 dfu_otter_bootloader
     /tmp/cceAWXAd.s:622    .text.dfu_otter_bootloader:0000000000000018 $d
     /tmp/cceAWXAd.s:634    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cceAWXAd.s:641    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cceAWXAd.s:746    .text.SystemClock_Config:0000000000000064 $d
     /tmp/cceAWXAd.s:751    .text.main:0000000000000000 $t
     /tmp/cceAWXAd.s:758    .text.main:0000000000000000 main
     /tmp/cceAWXAd.s:937    .text.main:00000000000000c4 $d
     /tmp/cceAWXAd.s:947    .text.Error_Handler:0000000000000000 $t
     /tmp/cceAWXAd.s:954    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cceAWXAd.s:985    .rodata.tcpc_config:0000000000000000 tcpc_config
                            *COM*:0000000000000044 hdma_i2c2_tx
                            *COM*:0000000000000044 hdma_i2c2_rx
                            *COM*:0000000000000044 hdma_i2c1_tx
                            *COM*:0000000000000044 hdma_i2c1_rx
                            *COM*:0000000000000044 hdma_adc
                            *COM*:0000000000000004 ticks
     /tmp/cceAWXAd.s:978    .rodata.main.str1.4:0000000000000000 $d
     /tmp/cceAWXAd.s:982    .rodata.tcpc_config:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
ARM GAS  /tmp/cceAWXAd.s 			page 54


HAL_GPIO_ReadPin
board_tcpc_post_init
HAL_Delay
pd_init
pd_run_state_machine
sprintf
CDC_Transmit_FS
fusb302_tcpm_drv
