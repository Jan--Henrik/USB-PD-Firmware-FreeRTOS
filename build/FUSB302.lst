ARM GAS  /tmp/ccUYTGX7.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"FUSB302.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.convert_bc_lvl,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	convert_bc_lvl:
  23              	.LFB22:
  24              		.file 1 "Src/FUSB302.c"
   1:Src/FUSB302.c **** /*
   2:Src/FUSB302.c ****   FUSB302.c - Library for interacting with the FUSB302B chip.
   3:Src/FUSB302.c ****   Copyright 2015 The Chromium OS Authors
   4:Src/FUSB302.c ****   Copyright 2017 Jason Cerundolo
   5:Src/FUSB302.c ****   Released under an MIT license. See LICENSE file. 
   6:Src/FUSB302.c **** */
   7:Src/FUSB302.c **** 
   8:Src/FUSB302.c **** #include "FUSB302.h"
   9:Src/FUSB302.c **** #include "usb_pd_tcpm.h"
  10:Src/FUSB302.c **** #include "tcpm.h"
  11:Src/FUSB302.c **** #include "usb_pd.h"
  12:Src/FUSB302.c **** 
  13:Src/FUSB302.c **** #define PACKET_IS_GOOD_CRC(head) (PD_HEADER_TYPE(head) == PD_CTRL_GOOD_CRC && \
  14:Src/FUSB302.c **** 				 PD_HEADER_CNT(head) == 0)
  15:Src/FUSB302.c **** 
  16:Src/FUSB302.c **** static struct fusb302_chip_state {
  17:Src/FUSB302.c **** 	int cc_polarity;
  18:Src/FUSB302.c **** 	int vconn_enabled;
  19:Src/FUSB302.c **** 	/* 1 = pulling up (DFP) 0 = pulling down (UFP) */
  20:Src/FUSB302.c **** 	int pulling_up;
  21:Src/FUSB302.c **** 	int rx_enable;
  22:Src/FUSB302.c **** 	uint8_t mdac_vnc;
  23:Src/FUSB302.c **** 	uint8_t mdac_rd;
  24:Src/FUSB302.c **** } state[CONFIG_USB_PD_PORT_COUNT];
  25:Src/FUSB302.c **** 
  26:Src/FUSB302.c **** /*
  27:Src/FUSB302.c ****  * Bring the FUSB302 out of reset after Hard Reset signaling. This will
  28:Src/FUSB302.c ****  * automatically flush both the Rx and Tx FIFOs.
  29:Src/FUSB302.c ****  */
  30:Src/FUSB302.c **** static void fusb302_pd_reset(int port)
  31:Src/FUSB302.c **** {
  32:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
  33:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_RESET, TCPC_REG_RESET_PD_RESET);
  34:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
ARM GAS  /tmp/ccUYTGX7.s 			page 2


  35:Src/FUSB302.c **** }
  36:Src/FUSB302.c **** 
  37:Src/FUSB302.c **** /*
  38:Src/FUSB302.c ****  * Flush our Rx FIFO. To prevent packet framing issues, this function should
  39:Src/FUSB302.c ****  * only be called when Rx is disabled.
  40:Src/FUSB302.c ****  */
  41:Src/FUSB302.c **** static void fusb302_flush_rx_fifo(int port)
  42:Src/FUSB302.c **** {
  43:Src/FUSB302.c **** 	/*
  44:Src/FUSB302.c **** 	 * other bits in the register _should_ be 0
  45:Src/FUSB302.c **** 	 * until the day we support other SOP* types...
  46:Src/FUSB302.c **** 	 * then we'll have to keep a shadow of what this register
  47:Src/FUSB302.c **** 	 * value should be so we don't clobber it here!
  48:Src/FUSB302.c **** 	 */
  49:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
  50:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_CONTROL1, TCPC_REG_CONTROL1_RX_FLUSH);
  51:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
  52:Src/FUSB302.c **** }
  53:Src/FUSB302.c **** 
  54:Src/FUSB302.c **** static void fusb302_flush_tx_fifo(int port)
  55:Src/FUSB302.c **** {
  56:Src/FUSB302.c **** 	int reg;
  57:Src/FUSB302.c **** 
  58:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
  59:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_CONTROL0, &reg);
  60:Src/FUSB302.c **** 	reg |= TCPC_REG_CONTROL0_TX_FLUSH;
  61:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_CONTROL0, reg);
  62:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
  63:Src/FUSB302.c **** }
  64:Src/FUSB302.c **** 
  65:Src/FUSB302.c **** static void fusb302_auto_goodcrc_enable(int port, int enable)
  66:Src/FUSB302.c **** {
  67:Src/FUSB302.c **** 	int reg;
  68:Src/FUSB302.c **** 
  69:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
  70:Src/FUSB302.c **** 	tcpc_read(port,	TCPC_REG_SWITCHES1, &reg);
  71:Src/FUSB302.c **** 
  72:Src/FUSB302.c **** 	if (enable)
  73:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_AUTO_GCRC;
  74:Src/FUSB302.c **** 	else
  75:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES1_AUTO_GCRC;
  76:Src/FUSB302.c **** 
  77:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES1, reg);
  78:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
  79:Src/FUSB302.c **** }
  80:Src/FUSB302.c **** 
  81:Src/FUSB302.c **** /* Convert BC LVL values (in FUSB302) to Type-C CC Voltage Status */
  82:Src/FUSB302.c **** static int convert_bc_lvl(int port, int bc_lvl)
  83:Src/FUSB302.c **** {
  25              		.loc 1 83 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  84:Src/FUSB302.c **** 	/* assume OPEN unless one of the following conditions is true... */
  85:Src/FUSB302.c **** 	int ret = TYPEC_CC_VOLT_OPEN;
ARM GAS  /tmp/ccUYTGX7.s 			page 3


  86:Src/FUSB302.c **** 
  87:Src/FUSB302.c **** 	if (state[port].pulling_up) {
  31              		.loc 1 87 0
  32 0000 8300     		lsls	r3, r0, #2
  33 0002 1818     		adds	r0, r3, r0
  34              	.LVL1:
  35 0004 8200     		lsls	r2, r0, #2
  36 0006 0E4B     		ldr	r3, .L10
  37 0008 9B18     		adds	r3, r3, r2
  38 000a 9868     		ldr	r0, [r3, #8]
  39 000c 0028     		cmp	r0, #0
  40 000e 05D0     		beq	.L2
  88:Src/FUSB302.c **** 		if (bc_lvl == 0x00)
  41              		.loc 1 88 0
  42 0010 0029     		cmp	r1, #0
  43 0012 0AD0     		beq	.L4
  89:Src/FUSB302.c **** 			ret = TYPEC_CC_VOLT_RA;
  90:Src/FUSB302.c **** 		else if (bc_lvl < 0x3)
  44              		.loc 1 90 0
  45 0014 0229     		cmp	r1, #2
  46 0016 0ADD     		ble	.L5
  85:Src/FUSB302.c **** 
  47              		.loc 1 85 0
  48 0018 0020     		movs	r0, #0
  49 001a 05E0     		b	.L1
  50              	.L2:
  91:Src/FUSB302.c **** 			ret = TYPEC_CC_VOLT_RD;
  92:Src/FUSB302.c **** 	} else {
  93:Src/FUSB302.c **** 		if (bc_lvl == 0x1)
  51              		.loc 1 93 0
  52 001c 0129     		cmp	r1, #1
  53 001e 08D0     		beq	.L6
  94:Src/FUSB302.c **** 			ret = TYPEC_CC_VOLT_SNK_DEF;
  95:Src/FUSB302.c **** 		else if (bc_lvl == 0x2)
  54              		.loc 1 95 0
  55 0020 0229     		cmp	r1, #2
  56 0022 08D0     		beq	.L7
  96:Src/FUSB302.c **** 			ret = TYPEC_CC_VOLT_SNK_1_5;
  97:Src/FUSB302.c **** 		else if (bc_lvl == 0x3)
  57              		.loc 1 97 0
  58 0024 0329     		cmp	r1, #3
  59 0026 08D0     		beq	.L9
  60              	.LVL2:
  61              	.L1:
  98:Src/FUSB302.c **** 			ret = TYPEC_CC_VOLT_SNK_3_0;
  99:Src/FUSB302.c **** 	}
 100:Src/FUSB302.c **** 
 101:Src/FUSB302.c **** 	return ret;
 102:Src/FUSB302.c **** }
  62              		.loc 1 102 0
  63              		@ sp needed
  64 0028 7047     		bx	lr
  65              	.LVL3:
  66              	.L4:
  89:Src/FUSB302.c **** 		else if (bc_lvl < 0x3)
  67              		.loc 1 89 0
  68 002a 0120     		movs	r0, #1
ARM GAS  /tmp/ccUYTGX7.s 			page 4


  69 002c FCE7     		b	.L1
  70              	.L5:
  91:Src/FUSB302.c **** 	} else {
  71              		.loc 1 91 0
  72 002e 0220     		movs	r0, #2
  73 0030 FAE7     		b	.L1
  74              	.L6:
  94:Src/FUSB302.c **** 		else if (bc_lvl == 0x2)
  75              		.loc 1 94 0
  76 0032 0520     		movs	r0, #5
  77 0034 F8E7     		b	.L1
  78              	.L7:
  96:Src/FUSB302.c **** 		else if (bc_lvl == 0x3)
  79              		.loc 1 96 0
  80 0036 0620     		movs	r0, #6
  81 0038 F6E7     		b	.L1
  82              	.L9:
  98:Src/FUSB302.c **** 	}
  83              		.loc 1 98 0
  84 003a 0720     		movs	r0, #7
  85              	.LVL4:
 101:Src/FUSB302.c **** }
  86              		.loc 1 101 0
  87 003c F4E7     		b	.L1
  88              	.L11:
  89 003e C046     		.align	2
  90              	.L10:
  91 0040 00000000 		.word	.LANCHOR0
  92              		.cfi_endproc
  93              	.LFE22:
  95              		.section	.text.get_num_bytes,"ax",%progbits
  96              		.align	1
  97              		.syntax unified
  98              		.code	16
  99              		.thumb_func
 100              		.fpu softvfp
 102              	get_num_bytes:
 103              	.LFB26:
 103:Src/FUSB302.c **** 
 104:Src/FUSB302.c **** static int measure_cc_pin_source(int port, int cc_measure)
 105:Src/FUSB302.c **** {
 106:Src/FUSB302.c **** 	int switches0_reg;
 107:Src/FUSB302.c **** 	int reg;
 108:Src/FUSB302.c **** 	int cc_lvl;
 109:Src/FUSB302.c **** 
 110:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 111:Src/FUSB302.c **** 	
 112:Src/FUSB302.c **** 	/* Read status register */
 113:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 114:Src/FUSB302.c **** 	/* Save current value */
 115:Src/FUSB302.c **** 	switches0_reg = reg;
 116:Src/FUSB302.c **** 	/* Clear pull-up register settings and measure bits */
 117:Src/FUSB302.c **** 	reg &= ~(TCPC_REG_SWITCHES0_MEAS_CC1 | TCPC_REG_SWITCHES0_MEAS_CC2);
 118:Src/FUSB302.c **** 	/* Set desired pullup register bit */
 119:Src/FUSB302.c **** 	if (cc_measure == TCPC_REG_SWITCHES0_MEAS_CC1)
 120:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_CC1_PU_EN;
 121:Src/FUSB302.c **** 	else
ARM GAS  /tmp/ccUYTGX7.s 			page 5


 122:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_CC2_PU_EN;
 123:Src/FUSB302.c **** 	/* Set CC measure bit */
 124:Src/FUSB302.c **** 	reg |= cc_measure;
 125:Src/FUSB302.c **** 
 126:Src/FUSB302.c **** 	/* Set measurement switch */
 127:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 128:Src/FUSB302.c **** 
 129:Src/FUSB302.c **** 	/* Set MDAC for Open vs Rd/Ra comparison */
 130:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_MEASURE, state[port].mdac_vnc);
 131:Src/FUSB302.c **** 
 132:Src/FUSB302.c **** 	/* Wait on measurement */
 133:Src/FUSB302.c **** 	osDelay(1);
 134:Src/FUSB302.c **** 
 135:Src/FUSB302.c **** 	/* Read status register */
 136:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_STATUS0, &reg);
 137:Src/FUSB302.c **** 
 138:Src/FUSB302.c **** 	/* Assume open */
 139:Src/FUSB302.c **** 	cc_lvl = TYPEC_CC_VOLT_OPEN;
 140:Src/FUSB302.c **** 
 141:Src/FUSB302.c **** 	/* CC level is below the 'no connect' threshold (vOpen) */
 142:Src/FUSB302.c **** 	if ((reg & TCPC_REG_STATUS0_COMP) == 0) {
 143:Src/FUSB302.c **** 		/* Set MDAC for Rd vs Ra comparison */
 144:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_MEASURE, state[port].mdac_rd);
 145:Src/FUSB302.c **** 
 146:Src/FUSB302.c **** 		/* Wait on measurement */
 147:Src/FUSB302.c **** 		osDelay(1);
 148:Src/FUSB302.c **** 
 149:Src/FUSB302.c **** 		/* Read status register */
 150:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_STATUS0, &reg);
 151:Src/FUSB302.c **** 
 152:Src/FUSB302.c **** 		cc_lvl = (reg & TCPC_REG_STATUS0_COMP) ? TYPEC_CC_VOLT_RD
 153:Src/FUSB302.c **** 						       : TYPEC_CC_VOLT_RA;
 154:Src/FUSB302.c **** 	}
 155:Src/FUSB302.c **** 
 156:Src/FUSB302.c **** 	/* Restore SWITCHES0 register to its value prior */
 157:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES0, switches0_reg);
 158:Src/FUSB302.c **** 	
 159:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 160:Src/FUSB302.c **** 
 161:Src/FUSB302.c **** 	return cc_lvl;
 162:Src/FUSB302.c **** }
 163:Src/FUSB302.c **** 
 164:Src/FUSB302.c **** /* Determine cc pin state for source when in manual detect mode */
 165:Src/FUSB302.c **** static void detect_cc_pin_source_manual(int port, int *cc1_lvl, int *cc2_lvl)
 166:Src/FUSB302.c **** {
 167:Src/FUSB302.c **** 	int cc1_measure = TCPC_REG_SWITCHES0_MEAS_CC1;
 168:Src/FUSB302.c **** 	int cc2_measure = TCPC_REG_SWITCHES0_MEAS_CC2;
 169:Src/FUSB302.c **** 
 170:Src/FUSB302.c **** 	if (state[port].vconn_enabled) {
 171:Src/FUSB302.c **** 		/* If VCONN enabled, measure cc_pin that matches polarity */
 172:Src/FUSB302.c **** 		if (state[port].cc_polarity)
 173:Src/FUSB302.c **** 			*cc2_lvl = measure_cc_pin_source(port, cc2_measure);
 174:Src/FUSB302.c **** 		else
 175:Src/FUSB302.c **** 			*cc1_lvl = measure_cc_pin_source(port, cc1_measure);
 176:Src/FUSB302.c **** 	} else {
 177:Src/FUSB302.c **** 		/* If VCONN not enabled, measure both cc1 and cc2 */
 178:Src/FUSB302.c **** 		*cc1_lvl = measure_cc_pin_source(port, cc1_measure);
ARM GAS  /tmp/ccUYTGX7.s 			page 6


 179:Src/FUSB302.c **** 		*cc2_lvl = measure_cc_pin_source(port, cc2_measure);
 180:Src/FUSB302.c **** 	}
 181:Src/FUSB302.c **** 
 182:Src/FUSB302.c **** }
 183:Src/FUSB302.c **** 
 184:Src/FUSB302.c **** /* Determine cc pin state for sink */
 185:Src/FUSB302.c **** static void detect_cc_pin_sink(int port, int *cc1, int *cc2)
 186:Src/FUSB302.c **** {
 187:Src/FUSB302.c **** 	int reg;
 188:Src/FUSB302.c **** 	int orig_meas_cc1;
 189:Src/FUSB302.c **** 	int orig_meas_cc2;
 190:Src/FUSB302.c **** 	int bc_lvl_cc1;
 191:Src/FUSB302.c **** 	int bc_lvl_cc2;
 192:Src/FUSB302.c **** 	
 193:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 194:Src/FUSB302.c **** 
 195:Src/FUSB302.c **** 	/*
 196:Src/FUSB302.c **** 	 * Measure CC1 first.
 197:Src/FUSB302.c **** 	 */
 198:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 199:Src/FUSB302.c **** 
 200:Src/FUSB302.c **** 	/* save original state to be returned to later... */
 201:Src/FUSB302.c **** 	if (reg & TCPC_REG_SWITCHES0_MEAS_CC1)
 202:Src/FUSB302.c **** 		orig_meas_cc1 = 1;
 203:Src/FUSB302.c **** 	else
 204:Src/FUSB302.c **** 		orig_meas_cc1 = 0;
 205:Src/FUSB302.c **** 
 206:Src/FUSB302.c **** 	if (reg & TCPC_REG_SWITCHES0_MEAS_CC2)
 207:Src/FUSB302.c **** 		orig_meas_cc2 = 1;
 208:Src/FUSB302.c **** 	else
 209:Src/FUSB302.c **** 		orig_meas_cc2 = 0;
 210:Src/FUSB302.c **** 
 211:Src/FUSB302.c **** 
 212:Src/FUSB302.c **** 	/* Disable CC2 measurement switch, enable CC1 measurement switch */
 213:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_MEAS_CC2;
 214:Src/FUSB302.c **** 	reg |= TCPC_REG_SWITCHES0_MEAS_CC1;
 215:Src/FUSB302.c **** 
 216:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 217:Src/FUSB302.c **** 
 218:Src/FUSB302.c **** 	/* CC1 is now being measured by FUSB302. */
 219:Src/FUSB302.c **** 
 220:Src/FUSB302.c **** 	/* Wait on measurement */
 221:Src/FUSB302.c **** 	osDelay(1);
 222:Src/FUSB302.c **** 
 223:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_STATUS0, &bc_lvl_cc1);
 224:Src/FUSB302.c **** 
 225:Src/FUSB302.c **** 	/* mask away unwanted bits */
 226:Src/FUSB302.c **** 	bc_lvl_cc1 &= (TCPC_REG_STATUS0_BC_LVL0 | TCPC_REG_STATUS0_BC_LVL1);
 227:Src/FUSB302.c **** 
 228:Src/FUSB302.c **** 	/*
 229:Src/FUSB302.c **** 	 * Measure CC2 next.
 230:Src/FUSB302.c **** 	 */
 231:Src/FUSB302.c **** 
 232:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 233:Src/FUSB302.c **** 
 234:Src/FUSB302.c **** 	/* Disable CC1 measurement switch, enable CC2 measurement switch */
 235:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_MEAS_CC1;
ARM GAS  /tmp/ccUYTGX7.s 			page 7


 236:Src/FUSB302.c **** 	reg |= TCPC_REG_SWITCHES0_MEAS_CC2;
 237:Src/FUSB302.c **** 
 238:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 239:Src/FUSB302.c **** 
 240:Src/FUSB302.c **** 	/* CC2 is now being measured by FUSB302. */
 241:Src/FUSB302.c **** 
 242:Src/FUSB302.c **** 	/* Wait on measurement */
 243:Src/FUSB302.c **** 	osDelay(1);
 244:Src/FUSB302.c **** 
 245:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_STATUS0, &bc_lvl_cc2);
 246:Src/FUSB302.c **** 
 247:Src/FUSB302.c **** 	/* mask away unwanted bits */
 248:Src/FUSB302.c **** 	bc_lvl_cc2 &= (TCPC_REG_STATUS0_BC_LVL0 | TCPC_REG_STATUS0_BC_LVL1);
 249:Src/FUSB302.c **** 
 250:Src/FUSB302.c **** 	*cc1 = convert_bc_lvl(port, bc_lvl_cc1);
 251:Src/FUSB302.c **** 	*cc2 = convert_bc_lvl(port, bc_lvl_cc2);
 252:Src/FUSB302.c **** 
 253:Src/FUSB302.c **** 	/* return MEAS_CC1/2 switches to original state */
 254:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 255:Src/FUSB302.c **** 	if (orig_meas_cc1)
 256:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_MEAS_CC1;
 257:Src/FUSB302.c **** 	else
 258:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_MEAS_CC1;
 259:Src/FUSB302.c **** 	if (orig_meas_cc2)
 260:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_MEAS_CC2;
 261:Src/FUSB302.c **** 	else
 262:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_MEAS_CC2;
 263:Src/FUSB302.c **** 
 264:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 265:Src/FUSB302.c **** 	
 266:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 267:Src/FUSB302.c **** }
 268:Src/FUSB302.c **** 
 269:Src/FUSB302.c **** /* Parse header bytes for the size of packet */
 270:Src/FUSB302.c **** static int get_num_bytes(uint16_t header)
 271:Src/FUSB302.c **** {
 104              		.loc 1 271 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 109              	.LVL5:
 272:Src/FUSB302.c **** 	int rv;
 273:Src/FUSB302.c **** 
 274:Src/FUSB302.c **** 	/* Grab the Number of Data Objects field.*/
 275:Src/FUSB302.c **** 	rv = PD_HEADER_CNT(header);
 110              		.loc 1 275 0
 111 0000 030B     		lsrs	r3, r0, #12
 112 0002 0720     		movs	r0, #7
 113              	.LVL6:
 114 0004 1840     		ands	r0, r3
 115              	.LVL7:
 276:Src/FUSB302.c **** 
 277:Src/FUSB302.c **** 	/* Multiply by four to go from 32-bit words -> bytes */
 278:Src/FUSB302.c **** 	rv *= 4;
 116              		.loc 1 278 0
 117 0006 8000     		lsls	r0, r0, #2
ARM GAS  /tmp/ccUYTGX7.s 			page 8


 118              	.LVL8:
 279:Src/FUSB302.c **** 
 280:Src/FUSB302.c **** 	/* Plus 2 for header */
 281:Src/FUSB302.c **** 	rv += 2;
 119              		.loc 1 281 0
 120 0008 0230     		adds	r0, r0, #2
 121              	.LVL9:
 282:Src/FUSB302.c **** 
 283:Src/FUSB302.c **** 	return rv;
 284:Src/FUSB302.c **** }
 122              		.loc 1 284 0
 123              		@ sp needed
 124 000a 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE26:
 128              		.section	.text.fusb302_tcpm_release,"ax",%progbits
 129              		.align	1
 130              		.syntax unified
 131              		.code	16
 132              		.thumb_func
 133              		.fpu softvfp
 135              	fusb302_tcpm_release:
 136              	.LFB30:
 285:Src/FUSB302.c **** 
 286:Src/FUSB302.c **** static int fusb302_send_message(int port, uint16_t header, const uint32_t *data,
 287:Src/FUSB302.c **** 				 uint8_t *buf, int buf_pos)
 288:Src/FUSB302.c **** {
 289:Src/FUSB302.c **** 	int rv;
 290:Src/FUSB302.c **** 	int reg;
 291:Src/FUSB302.c **** 	int len;
 292:Src/FUSB302.c **** 
 293:Src/FUSB302.c **** 	len = get_num_bytes(header);
 294:Src/FUSB302.c **** 
 295:Src/FUSB302.c **** 	/*
 296:Src/FUSB302.c **** 	 * packsym tells the TXFIFO that the next X bytes are payload,
 297:Src/FUSB302.c **** 	 * and should not be interpreted as special tokens.
 298:Src/FUSB302.c **** 	 * The 5 LSBs represent X, the number of bytes.
 299:Src/FUSB302.c **** 	 */
 300:Src/FUSB302.c **** 	reg = fusb302_TKN_PACKSYM;
 301:Src/FUSB302.c **** 	reg |= (len & 0x1F);
 302:Src/FUSB302.c **** 
 303:Src/FUSB302.c **** 	buf[buf_pos++] = reg;
 304:Src/FUSB302.c **** 
 305:Src/FUSB302.c **** 	/* write in the header */
 306:Src/FUSB302.c **** 	reg = header;
 307:Src/FUSB302.c **** 	buf[buf_pos++] = reg & 0xFF;
 308:Src/FUSB302.c **** 
 309:Src/FUSB302.c **** 	reg >>= 8;
 310:Src/FUSB302.c **** 	buf[buf_pos++] = reg & 0xFF;
 311:Src/FUSB302.c **** 
 312:Src/FUSB302.c **** 	/* header is done, subtract from length to make this for-loop simpler */
 313:Src/FUSB302.c **** 	len -= 2;
 314:Src/FUSB302.c **** 
 315:Src/FUSB302.c **** 	/* write data objects, if present */
 316:Src/FUSB302.c **** 	memcpy(&buf[buf_pos], data, len);
 317:Src/FUSB302.c **** 	buf_pos += len;
 318:Src/FUSB302.c **** 
ARM GAS  /tmp/ccUYTGX7.s 			page 9


 319:Src/FUSB302.c **** 	/* put in the CRC */
 320:Src/FUSB302.c **** 	buf[buf_pos++] = fusb302_TKN_JAMCRC;
 321:Src/FUSB302.c **** 
 322:Src/FUSB302.c **** 	/* put in EOP */
 323:Src/FUSB302.c **** 	buf[buf_pos++] = fusb302_TKN_EOP;
 324:Src/FUSB302.c **** 
 325:Src/FUSB302.c **** 	/* Turn transmitter off after sending message */
 326:Src/FUSB302.c **** 	buf[buf_pos++] = fusb302_TKN_TXOFF;
 327:Src/FUSB302.c **** 
 328:Src/FUSB302.c **** 	/* Start transmission */
 329:Src/FUSB302.c **** 	reg = fusb302_TKN_TXON;
 330:Src/FUSB302.c **** 	buf[buf_pos++] = fusb302_TKN_TXON;
 331:Src/FUSB302.c **** 
 332:Src/FUSB302.c **** 	/* burst write for speed! */
 333:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 334:Src/FUSB302.c **** 	rv = tcpc_xfer(port, buf, buf_pos, 0, 0, I2C_XFER_SINGLE);
 335:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 336:Src/FUSB302.c **** 
 337:Src/FUSB302.c **** 	return rv;
 338:Src/FUSB302.c **** }
 339:Src/FUSB302.c **** 
 340:Src/FUSB302.c **** static int fusb302_tcpm_select_rp_value(int port, int rp)
 341:Src/FUSB302.c **** {
 342:Src/FUSB302.c **** 	int reg;
 343:Src/FUSB302.c **** 	int rv;
 344:Src/FUSB302.c **** 	uint8_t vnc, rd;
 345:Src/FUSB302.c **** 	
 346:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 347:Src/FUSB302.c **** 
 348:Src/FUSB302.c **** 	rv = tcpc_read(port, TCPC_REG_CONTROL0, &reg);
 349:Src/FUSB302.c **** 	if (rv)
 350:Src/FUSB302.c **** 		return rv;
 351:Src/FUSB302.c **** 
 352:Src/FUSB302.c **** 	/* Set the current source for Rp value */
 353:Src/FUSB302.c **** 	reg &= ~TCPC_REG_CONTROL0_HOST_CUR_MASK;
 354:Src/FUSB302.c **** 	switch (rp) {
 355:Src/FUSB302.c **** 	case TYPEC_RP_1A5:
 356:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL0_HOST_CUR_1A5;
 357:Src/FUSB302.c **** 		vnc = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_1_5_VNC_MV);
 358:Src/FUSB302.c **** 		rd = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_1_5_RD_THRESH_MV);
 359:Src/FUSB302.c **** 		break;
 360:Src/FUSB302.c **** 	case TYPEC_RP_3A0:
 361:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL0_HOST_CUR_3A0;
 362:Src/FUSB302.c **** 		vnc = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_3_0_VNC_MV);
 363:Src/FUSB302.c **** 		rd = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_3_0_RD_THRESH_MV);
 364:Src/FUSB302.c **** 		break;
 365:Src/FUSB302.c **** 	case TYPEC_RP_USB:
 366:Src/FUSB302.c **** 	default:
 367:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL0_HOST_CUR_USB;
 368:Src/FUSB302.c **** 		vnc = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_DEF_VNC_MV);
 369:Src/FUSB302.c **** 		rd = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_DEF_RD_THRESH_MV);
 370:Src/FUSB302.c **** 	}
 371:Src/FUSB302.c **** 	state[port].mdac_vnc = vnc;
 372:Src/FUSB302.c **** 	state[port].mdac_rd = rd;
 373:Src/FUSB302.c **** 	rv = tcpc_write(port, TCPC_REG_CONTROL0, reg);
 374:Src/FUSB302.c **** 	
 375:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
ARM GAS  /tmp/ccUYTGX7.s 			page 10


 376:Src/FUSB302.c **** 	
 377:Src/FUSB302.c **** 	return rv;
 378:Src/FUSB302.c **** }
 379:Src/FUSB302.c **** 
 380:Src/FUSB302.c **** static int fusb302_tcpm_init(int port)
 381:Src/FUSB302.c **** {
 382:Src/FUSB302.c **** 	int reg;
 383:Src/FUSB302.c **** 
 384:Src/FUSB302.c **** 	/* set default */
 385:Src/FUSB302.c **** 	state[port].cc_polarity = -1;
 386:Src/FUSB302.c **** 
 387:Src/FUSB302.c **** 	/* set the voltage threshold for no connect detection (vOpen) */
 388:Src/FUSB302.c **** 	state[port].mdac_vnc = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_DEF_VNC_MV);
 389:Src/FUSB302.c **** 	/* set the voltage threshold for Rd vs Ra detection */
 390:Src/FUSB302.c **** 	state[port].mdac_rd = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_DEF_RD_THRESH_MV);
 391:Src/FUSB302.c **** 
 392:Src/FUSB302.c **** 	/* all other variables assumed to default to 0 */
 393:Src/FUSB302.c **** 	
 394:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 395:Src/FUSB302.c **** 
 396:Src/FUSB302.c **** 	/* Restore default settings */
 397:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_RESET, TCPC_REG_RESET_SW_RESET);
 398:Src/FUSB302.c **** 
 399:Src/FUSB302.c **** 	/* Turn on retries and set number of retries */
 400:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_CONTROL3, &reg);
 401:Src/FUSB302.c **** 	reg |= TCPC_REG_CONTROL3_AUTO_RETRY;
 402:Src/FUSB302.c **** 	reg |= (PD_RETRY_COUNT & 0x3) <<
 403:Src/FUSB302.c **** 		TCPC_REG_CONTROL3_N_RETRIES_POS;
 404:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_CONTROL3, reg);
 405:Src/FUSB302.c **** 
 406:Src/FUSB302.c **** 	/* Create interrupt masks */
 407:Src/FUSB302.c **** 	reg = 0xFF;
 408:Src/FUSB302.c **** 	/* CC level changes */
 409:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASK_BC_LVL;
 410:Src/FUSB302.c **** 	/* collisions */
 411:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASK_COLLISION;
 412:Src/FUSB302.c **** 	/* misc alert */
 413:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASK_ALERT;
 414:Src/FUSB302.c **** 	/* packet received with correct CRC */
 415:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASK_CRC_CHK;
 416:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_MASK, reg);
 417:Src/FUSB302.c **** 
 418:Src/FUSB302.c **** 	reg = 0xFF;
 419:Src/FUSB302.c **** 	/* when all pd message retries fail... */
 420:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASKA_RETRYFAIL;
 421:Src/FUSB302.c **** 	/* when fusb302 send a hard reset. */
 422:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASKA_HARDSENT;
 423:Src/FUSB302.c **** 	/* when fusb302 receives GoodCRC ack for a pd message */
 424:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASKA_TX_SUCCESS;
 425:Src/FUSB302.c **** 	/* when fusb302 receives a hard reset */
 426:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASKA_HARDRESET;
 427:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_MASKA, reg);
 428:Src/FUSB302.c **** 
 429:Src/FUSB302.c **** 	reg = 0xFF;
 430:Src/FUSB302.c **** 	/* when fusb302 sends GoodCRC to ack a pd message */
 431:Src/FUSB302.c **** 	reg &= ~TCPC_REG_MASKB_GCRCSENT;
 432:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_MASKB, reg);
ARM GAS  /tmp/ccUYTGX7.s 			page 11


 433:Src/FUSB302.c **** 
 434:Src/FUSB302.c **** 	/* Interrupt Enable */
 435:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_CONTROL0, &reg);
 436:Src/FUSB302.c **** 	reg &= ~TCPC_REG_CONTROL0_INT_MASK;
 437:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_CONTROL0, reg);
 438:Src/FUSB302.c **** 
 439:Src/FUSB302.c **** 	/* Set VCONN switch defaults */
 440:Src/FUSB302.c **** 	tcpm_set_polarity(port, 0);
 441:Src/FUSB302.c **** 	tcpm_set_vconn(port, 0);
 442:Src/FUSB302.c **** 
 443:Src/FUSB302.c **** 	/* Turn on the power! */
 444:Src/FUSB302.c **** 	/* TODO: Reduce power consumption */
 445:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_POWER, TCPC_REG_POWER_PWR_ALL);
 446:Src/FUSB302.c **** 	
 447:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 448:Src/FUSB302.c **** 
 449:Src/FUSB302.c **** 	return 0;
 450:Src/FUSB302.c **** }
 451:Src/FUSB302.c **** 
 452:Src/FUSB302.c **** static int fusb302_tcpm_release(int port)
 453:Src/FUSB302.c **** {
 137              		.loc 1 453 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142              	.LVL10:
 454:Src/FUSB302.c **** 	return EC_ERROR_UNIMPLEMENTED;
 455:Src/FUSB302.c **** }
 143              		.loc 1 455 0
 144 0000 0220     		movs	r0, #2
 145              	.LVL11:
 146              		@ sp needed
 147 0002 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE30:
 151              		.section	.text.fusb302_rx_fifo_is_empty,"ax",%progbits
 152              		.align	1
 153              		.syntax unified
 154              		.code	16
 155              		.thumb_func
 156              		.fpu softvfp
 158              	fusb302_rx_fifo_is_empty:
 159              	.LFB37:
 456:Src/FUSB302.c **** 
 457:Src/FUSB302.c **** static int fusb302_tcpm_get_cc(int port, int *cc1, int *cc2)
 458:Src/FUSB302.c **** {
 459:Src/FUSB302.c **** 	if (state[port].pulling_up) {
 460:Src/FUSB302.c **** 		/* Source mode? */
 461:Src/FUSB302.c **** 		detect_cc_pin_source_manual(port, cc1, cc2);
 462:Src/FUSB302.c **** 	} else {
 463:Src/FUSB302.c **** 		/* Sink mode? */
 464:Src/FUSB302.c **** 		detect_cc_pin_sink(port, cc1, cc2);
 465:Src/FUSB302.c **** 	}
 466:Src/FUSB302.c **** 
 467:Src/FUSB302.c **** 	return 0;
 468:Src/FUSB302.c **** }
ARM GAS  /tmp/ccUYTGX7.s 			page 12


 469:Src/FUSB302.c **** 
 470:Src/FUSB302.c **** static int fusb302_tcpm_set_cc(int port, int pull)
 471:Src/FUSB302.c **** {
 472:Src/FUSB302.c **** 	int reg;
 473:Src/FUSB302.c **** 	
 474:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 475:Src/FUSB302.c **** 
 476:Src/FUSB302.c **** 	/* NOTE: FUSB302 toggles a single pull-up between CC1 and CC2 */
 477:Src/FUSB302.c **** 	/* NOTE: FUSB302 Does not support Ra. */
 478:Src/FUSB302.c **** 	switch (pull) {
 479:Src/FUSB302.c **** 	case TYPEC_CC_RP:
 480:Src/FUSB302.c **** 		/* enable the pull-up we know to be necessary */
 481:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 482:Src/FUSB302.c **** 
 483:Src/FUSB302.c **** 		reg &= ~(TCPC_REG_SWITCHES0_CC2_PU_EN |
 484:Src/FUSB302.c **** 			 TCPC_REG_SWITCHES0_CC1_PU_EN |
 485:Src/FUSB302.c **** 			 TCPC_REG_SWITCHES0_CC1_PD_EN |
 486:Src/FUSB302.c **** 			 TCPC_REG_SWITCHES0_CC2_PD_EN |
 487:Src/FUSB302.c **** 			 TCPC_REG_SWITCHES0_VCONN_CC1 |
 488:Src/FUSB302.c **** 			 TCPC_REG_SWITCHES0_VCONN_CC2);
 489:Src/FUSB302.c **** 
 490:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_CC1_PU_EN |
 491:Src/FUSB302.c **** 			TCPC_REG_SWITCHES0_CC2_PU_EN;
 492:Src/FUSB302.c **** 
 493:Src/FUSB302.c **** 		if (state[port].vconn_enabled)
 494:Src/FUSB302.c **** 			reg |= state[port].cc_polarity ?
 495:Src/FUSB302.c **** 			       TCPC_REG_SWITCHES0_VCONN_CC1 :
 496:Src/FUSB302.c **** 			       TCPC_REG_SWITCHES0_VCONN_CC2;
 497:Src/FUSB302.c **** 
 498:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 499:Src/FUSB302.c **** 
 500:Src/FUSB302.c **** 		state[port].pulling_up = 1;
 501:Src/FUSB302.c **** 		break;
 502:Src/FUSB302.c **** 	case TYPEC_CC_RD:
 503:Src/FUSB302.c **** 		/* Enable UFP Mode */
 504:Src/FUSB302.c **** 
 505:Src/FUSB302.c **** 		/* turn off toggle */
 506:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_CONTROL2, &reg);
 507:Src/FUSB302.c **** 		reg &= ~TCPC_REG_CONTROL2_TOGGLE;
 508:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL2, reg);
 509:Src/FUSB302.c **** 
 510:Src/FUSB302.c **** 		/* enable pull-downs, disable pullups */
 511:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 512:Src/FUSB302.c **** 
 513:Src/FUSB302.c **** 		reg &= ~(TCPC_REG_SWITCHES0_CC2_PU_EN);
 514:Src/FUSB302.c **** 		reg &= ~(TCPC_REG_SWITCHES0_CC1_PU_EN);
 515:Src/FUSB302.c **** 		reg |= (TCPC_REG_SWITCHES0_CC1_PD_EN);
 516:Src/FUSB302.c **** 		reg |= (TCPC_REG_SWITCHES0_CC2_PD_EN);
 517:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 518:Src/FUSB302.c **** 
 519:Src/FUSB302.c **** 		state[port].pulling_up = 0;
 520:Src/FUSB302.c **** 		break;
 521:Src/FUSB302.c **** 	case TYPEC_CC_OPEN:
 522:Src/FUSB302.c **** 		/* Disable toggling */
 523:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_CONTROL2, &reg);
 524:Src/FUSB302.c **** 		reg &= ~TCPC_REG_CONTROL2_TOGGLE;
 525:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL2, reg);
ARM GAS  /tmp/ccUYTGX7.s 			page 13


 526:Src/FUSB302.c **** 
 527:Src/FUSB302.c **** 		/* Ensure manual switches are opened */
 528:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 529:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_CC1_PU_EN;
 530:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_CC2_PU_EN;
 531:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_CC1_PD_EN;
 532:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_CC2_PD_EN;
 533:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 534:Src/FUSB302.c **** 
 535:Src/FUSB302.c **** 		state[port].pulling_up = 0;
 536:Src/FUSB302.c **** 		break;
 537:Src/FUSB302.c **** 	default:
 538:Src/FUSB302.c **** 		/* Unsupported... */
 539:Src/FUSB302.c **** 		return EC_ERROR_UNIMPLEMENTED;
 540:Src/FUSB302.c **** 	}
 541:Src/FUSB302.c **** 	
 542:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 543:Src/FUSB302.c **** 	
 544:Src/FUSB302.c **** 	return 0;
 545:Src/FUSB302.c **** }
 546:Src/FUSB302.c **** 
 547:Src/FUSB302.c **** static int fusb302_tcpm_set_polarity(int port, int polarity)
 548:Src/FUSB302.c **** {
 549:Src/FUSB302.c **** 	/* Port polarity : 0 => CC1 is CC line, 1 => CC2 is CC line */
 550:Src/FUSB302.c **** 	int reg;
 551:Src/FUSB302.c **** 	
 552:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 553:Src/FUSB302.c **** 
 554:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 555:Src/FUSB302.c **** 
 556:Src/FUSB302.c **** 	/* clear VCONN switch bits */
 557:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_VCONN_CC1;
 558:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_VCONN_CC2;
 559:Src/FUSB302.c **** 
 560:Src/FUSB302.c **** 	if (state[port].vconn_enabled) {
 561:Src/FUSB302.c **** 		/* set VCONN switch to be non-CC line */
 562:Src/FUSB302.c **** 		if (polarity)
 563:Src/FUSB302.c **** 			reg |= TCPC_REG_SWITCHES0_VCONN_CC1;
 564:Src/FUSB302.c **** 		else
 565:Src/FUSB302.c **** 			reg |= TCPC_REG_SWITCHES0_VCONN_CC2;
 566:Src/FUSB302.c **** 	}
 567:Src/FUSB302.c **** 
 568:Src/FUSB302.c **** 	/* clear meas_cc bits (RX line select) */
 569:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_MEAS_CC1;
 570:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_MEAS_CC2;
 571:Src/FUSB302.c **** 
 572:Src/FUSB302.c **** 	/* set rx polarity */
 573:Src/FUSB302.c **** 	if (polarity)
 574:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_MEAS_CC2;
 575:Src/FUSB302.c **** 	else
 576:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_MEAS_CC1;
 577:Src/FUSB302.c **** 
 578:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 579:Src/FUSB302.c **** 
 580:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_SWITCHES1, &reg);
 581:Src/FUSB302.c **** 
 582:Src/FUSB302.c **** 	/* clear tx_cc bits */
ARM GAS  /tmp/ccUYTGX7.s 			page 14


 583:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES1_TXCC1_EN;
 584:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES1_TXCC2_EN;
 585:Src/FUSB302.c **** 
 586:Src/FUSB302.c **** 	/* set tx polarity */
 587:Src/FUSB302.c **** 	if (polarity)
 588:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_TXCC2_EN;
 589:Src/FUSB302.c **** 	else
 590:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_TXCC1_EN;
 591:Src/FUSB302.c **** 
 592:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES1, reg);
 593:Src/FUSB302.c **** 
 594:Src/FUSB302.c **** 	/* Save the polarity for later */
 595:Src/FUSB302.c **** 	state[port].cc_polarity = polarity;
 596:Src/FUSB302.c **** 	
 597:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 598:Src/FUSB302.c **** 
 599:Src/FUSB302.c **** 	return 0;
 600:Src/FUSB302.c **** }
 601:Src/FUSB302.c **** 
 602:Src/FUSB302.c **** static int fusb302_tcpm_set_vconn(int port, int enable)
 603:Src/FUSB302.c **** {
 604:Src/FUSB302.c **** 	/*
 605:Src/FUSB302.c **** 	 * FUSB302 does not have dedicated VCONN Enable switch.
 606:Src/FUSB302.c **** 	 * We'll get through this by disabling both of the
 607:Src/FUSB302.c **** 	 * VCONN - CC* switches to disable, and enabling the
 608:Src/FUSB302.c **** 	 * saved polarity when enabling.
 609:Src/FUSB302.c **** 	 * Therefore at startup, tcpm_set_polarity should be called first,
 610:Src/FUSB302.c **** 	 * or else live with the default put into tcpm_init.
 611:Src/FUSB302.c **** 	 */
 612:Src/FUSB302.c **** 	int reg;
 613:Src/FUSB302.c **** 
 614:Src/FUSB302.c **** 	/* save enable state for later use */
 615:Src/FUSB302.c **** 	state[port].vconn_enabled = enable;
 616:Src/FUSB302.c **** 
 617:Src/FUSB302.c **** 	if (enable) {
 618:Src/FUSB302.c **** 		/* set to saved polarity */
 619:Src/FUSB302.c **** 		tcpm_set_polarity(port, state[port].cc_polarity);
 620:Src/FUSB302.c **** 	} else {
 621:Src/FUSB302.c **** 
 622:Src/FUSB302.c **** 		//i2c_master_lock(tcpc_config[port].i2c_host_port);
 623:Src/FUSB302.c **** 		
 624:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 625:Src/FUSB302.c **** 
 626:Src/FUSB302.c **** 		/* clear VCONN switch bits */
 627:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_VCONN_CC1;
 628:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_VCONN_CC2;
 629:Src/FUSB302.c **** 
 630:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 631:Src/FUSB302.c **** 		
 632:Src/FUSB302.c **** 		//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 633:Src/FUSB302.c **** 	}
 634:Src/FUSB302.c **** 
 635:Src/FUSB302.c **** 	return 0;
 636:Src/FUSB302.c **** }
 637:Src/FUSB302.c **** 
 638:Src/FUSB302.c **** static int fusb302_tcpm_set_msg_header(int port, int power_role, int data_role)
 639:Src/FUSB302.c **** {
ARM GAS  /tmp/ccUYTGX7.s 			page 15


 640:Src/FUSB302.c **** 	int reg;
 641:Src/FUSB302.c **** 
 642:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_SWITCHES1, &reg);
 643:Src/FUSB302.c **** 
 644:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES1_POWERROLE;
 645:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES1_DATAROLE;
 646:Src/FUSB302.c **** 
 647:Src/FUSB302.c **** 	if (power_role)
 648:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_POWERROLE;
 649:Src/FUSB302.c **** 	if (data_role)
 650:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_DATAROLE;
 651:Src/FUSB302.c **** 
 652:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_SWITCHES1, reg);
 653:Src/FUSB302.c **** 	
 654:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 655:Src/FUSB302.c **** 
 656:Src/FUSB302.c **** 	return 0;
 657:Src/FUSB302.c **** }
 658:Src/FUSB302.c **** 
 659:Src/FUSB302.c **** static int fusb302_tcpm_set_rx_enable(int port, int enable)
 660:Src/FUSB302.c **** {
 661:Src/FUSB302.c **** 	int reg;
 662:Src/FUSB302.c **** 
 663:Src/FUSB302.c **** 	state[port].rx_enable = enable;
 664:Src/FUSB302.c **** 	
 665:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 666:Src/FUSB302.c **** 
 667:Src/FUSB302.c **** 	/* Get current switch state */
 668:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_SWITCHES0, &reg);
 669:Src/FUSB302.c **** 
 670:Src/FUSB302.c **** 	/* Clear CC1/CC2 measure bits */
 671:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_MEAS_CC1;
 672:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_MEAS_CC2;
 673:Src/FUSB302.c **** 
 674:Src/FUSB302.c **** 	if (enable) {
 675:Src/FUSB302.c **** 		switch (state[port].cc_polarity) {
 676:Src/FUSB302.c **** 		/* if CC polarity hasnt been determined, can't enable */
 677:Src/FUSB302.c **** 		case -1:
 678:Src/FUSB302.c **** 			return EC_ERROR_UNKNOWN;
 679:Src/FUSB302.c **** 		case 0:
 680:Src/FUSB302.c **** 			reg |= TCPC_REG_SWITCHES0_MEAS_CC1;
 681:Src/FUSB302.c **** 			break;
 682:Src/FUSB302.c **** 		case 1:
 683:Src/FUSB302.c **** 			reg |= TCPC_REG_SWITCHES0_MEAS_CC2;
 684:Src/FUSB302.c **** 			break;
 685:Src/FUSB302.c **** 		default:
 686:Src/FUSB302.c **** 			/* "shouldn't get here" */
 687:Src/FUSB302.c **** 			return EC_ERROR_UNKNOWN;
 688:Src/FUSB302.c **** 		}
 689:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 690:Src/FUSB302.c **** 
 691:Src/FUSB302.c **** 		/* Disable BC_LVL interrupt when enabling PD comm */
 692:Src/FUSB302.c **** 		if (!tcpc_read(port, TCPC_REG_MASK, &reg))
 693:Src/FUSB302.c **** 			tcpc_write(port, TCPC_REG_MASK,
 694:Src/FUSB302.c **** 				   reg | TCPC_REG_MASK_BC_LVL);
 695:Src/FUSB302.c **** 
 696:Src/FUSB302.c **** 		/* flush rx fifo in case messages have been coming our way */
ARM GAS  /tmp/ccUYTGX7.s 			page 16


 697:Src/FUSB302.c **** 		fusb302_flush_rx_fifo(port);
 698:Src/FUSB302.c **** 
 699:Src/FUSB302.c **** 
 700:Src/FUSB302.c **** 	} else {
 701:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 702:Src/FUSB302.c **** 
 703:Src/FUSB302.c **** 		/* Enable BC_LVL interrupt when disabling PD comm */
 704:Src/FUSB302.c **** 		if (!tcpc_read(port, TCPC_REG_MASK, &reg))
 705:Src/FUSB302.c **** 			tcpc_write(port, TCPC_REG_MASK,
 706:Src/FUSB302.c **** 				   reg & ~TCPC_REG_MASK_BC_LVL);
 707:Src/FUSB302.c **** 	}
 708:Src/FUSB302.c **** 
 709:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 710:Src/FUSB302.c **** 
 711:Src/FUSB302.c **** 	fusb302_auto_goodcrc_enable(port, enable);
 712:Src/FUSB302.c **** 
 713:Src/FUSB302.c **** 	return 0;
 714:Src/FUSB302.c **** }
 715:Src/FUSB302.c **** 
 716:Src/FUSB302.c **** /* Return true if our Rx FIFO is empty */
 717:Src/FUSB302.c **** static int fusb302_rx_fifo_is_empty(int port)
 718:Src/FUSB302.c **** {
 160              		.loc 1 718 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 8
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              	.LVL12:
 165 0000 00B5     		push	{lr}
 166              	.LCFI0:
 167              		.cfi_def_cfa_offset 4
 168              		.cfi_offset 14, -4
 169 0002 83B0     		sub	sp, sp, #12
 170              	.LCFI1:
 171              		.cfi_def_cfa_offset 16
 719:Src/FUSB302.c **** 	int reg, ret;
 720:Src/FUSB302.c **** 
 721:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 722:Src/FUSB302.c **** 
 723:Src/FUSB302.c **** 	ret = (!tcpc_read(port, TCPC_REG_STATUS1, &reg)) &&
 172              		.loc 1 723 0
 173 0004 01AA     		add	r2, sp, #4
 174 0006 4121     		movs	r1, #65
 175 0008 FFF7FEFF 		bl	tcpc_read
 176              	.LVL13:
 177 000c 0028     		cmp	r0, #0
 178 000e 04D1     		bne	.L16
 179              		.loc 1 723 0 is_stmt 0 discriminator 1
 180 0010 019B     		ldr	r3, [sp, #4]
 181 0012 9B06     		lsls	r3, r3, #26
 182 0014 02D5     		bpl	.L14
 183              		.loc 1 723 0
 184 0016 0120     		movs	r0, #1
 185              	.LVL14:
 724:Src/FUSB302.c **** 	       (reg & TCPC_REG_STATUS1_RX_EMPTY);
 725:Src/FUSB302.c **** 		   
 726:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 727:Src/FUSB302.c **** 		   
ARM GAS  /tmp/ccUYTGX7.s 			page 17


 728:Src/FUSB302.c **** 	return ret;
 186              		.loc 1 728 0 is_stmt 1
 187 0018 00E0     		b	.L14
 188              	.LVL15:
 189              	.L16:
 723:Src/FUSB302.c **** 	       (reg & TCPC_REG_STATUS1_RX_EMPTY);
 190              		.loc 1 723 0
 191 001a 0020     		movs	r0, #0
 192              	.L14:
 729:Src/FUSB302.c **** }
 193              		.loc 1 729 0
 194 001c 03B0     		add	sp, sp, #12
 195              		@ sp needed
 196 001e 00BD     		pop	{pc}
 197              		.cfi_endproc
 198              	.LFE37:
 200              		.section	.text.fusb302_pd_reset,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.code	16
 204              		.thumb_func
 205              		.fpu softvfp
 207              	fusb302_pd_reset:
 208              	.LFB18:
  31:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 209              		.loc 1 31 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL16:
 214 0000 10B5     		push	{r4, lr}
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
  33:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 219              		.loc 1 33 0
 220 0002 0222     		movs	r2, #2
 221 0004 0C21     		movs	r1, #12
 222 0006 FFF7FEFF 		bl	tcpc_write
 223              	.LVL17:
  35:Src/FUSB302.c **** 
 224              		.loc 1 35 0
 225              		@ sp needed
 226 000a 10BD     		pop	{r4, pc}
 227              		.cfi_endproc
 228              	.LFE18:
 230              		.section	.text.fusb302_flush_rx_fifo,"ax",%progbits
 231              		.align	1
 232              		.syntax unified
 233              		.code	16
 234              		.thumb_func
 235              		.fpu softvfp
 237              	fusb302_flush_rx_fifo:
 238              	.LFB19:
  42:Src/FUSB302.c **** 	/*
 239              		.loc 1 42 0
ARM GAS  /tmp/ccUYTGX7.s 			page 18


 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              	.LVL18:
 244 0000 10B5     		push	{r4, lr}
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 4, -8
 248              		.cfi_offset 14, -4
  50:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 249              		.loc 1 50 0
 250 0002 0422     		movs	r2, #4
 251 0004 0721     		movs	r1, #7
 252 0006 FFF7FEFF 		bl	tcpc_write
 253              	.LVL19:
  52:Src/FUSB302.c **** 
 254              		.loc 1 52 0
 255              		@ sp needed
 256 000a 10BD     		pop	{r4, pc}
 257              		.cfi_endproc
 258              	.LFE19:
 260              		.section	.text.fusb302_tcpc_alert,"ax",%progbits
 261              		.align	1
 262              		.global	fusb302_tcpc_alert
 263              		.syntax unified
 264              		.code	16
 265              		.thumb_func
 266              		.fpu softvfp
 268              	fusb302_tcpc_alert:
 269              	.LFB40:
 730:Src/FUSB302.c **** 
 731:Src/FUSB302.c **** static int fusb302_tcpm_get_message(int port, uint32_t *payload, int *head)
 732:Src/FUSB302.c **** {
 733:Src/FUSB302.c **** 	/*
 734:Src/FUSB302.c **** 	 * This is the buffer that will get the burst-read data
 735:Src/FUSB302.c **** 	 * from the fusb302.
 736:Src/FUSB302.c **** 	 *
 737:Src/FUSB302.c **** 	 * It's re-used in a couple different spots, the worst of which
 738:Src/FUSB302.c **** 	 * is the PD packet (not header) and CRC.
 739:Src/FUSB302.c **** 	 * maximum size necessary = 28 + 4 = 32
 740:Src/FUSB302.c **** 	 */
 741:Src/FUSB302.c **** 	uint8_t buf[32];
 742:Src/FUSB302.c **** 	int rv, len;
 743:Src/FUSB302.c **** 
 744:Src/FUSB302.c **** 	/* If our FIFO is empty then we have no packet */
 745:Src/FUSB302.c **** 	if (fusb302_rx_fifo_is_empty(port))
 746:Src/FUSB302.c **** 		return EC_ERROR_UNKNOWN;
 747:Src/FUSB302.c **** 
 748:Src/FUSB302.c **** 	/* Read until we have a non-GoodCRC packet or an empty FIFO */
 749:Src/FUSB302.c **** 	do {
 750:Src/FUSB302.c **** 		buf[0] = TCPC_REG_FIFOS;
 751:Src/FUSB302.c **** 		//i2c_master_lock(tcpc_config[port].i2c_host_port);
 752:Src/FUSB302.c **** 
 753:Src/FUSB302.c **** 		/*
 754:Src/FUSB302.c **** 		 * PART 1 OF BURST READ: Write in register address.
 755:Src/FUSB302.c **** 		 * Issue a START, no STOP.
 756:Src/FUSB302.c **** 		 */
ARM GAS  /tmp/ccUYTGX7.s 			page 19


 757:Src/FUSB302.c **** 		rv = tcpc_xfer(port, buf, 1, 0, 0, I2C_XFER_START);
 758:Src/FUSB302.c **** 
 759:Src/FUSB302.c **** 		/*
 760:Src/FUSB302.c **** 		 * PART 2 OF BURST READ: Read up to the header.
 761:Src/FUSB302.c **** 		 * Issue a repeated START, no STOP.
 762:Src/FUSB302.c **** 		 * only grab three bytes so we can get the header
 763:Src/FUSB302.c **** 		 * and determine how many more bytes we need to read.
 764:Src/FUSB302.c **** 		 * TODO: Check token to ensure valid packet.
 765:Src/FUSB302.c **** 		 */
 766:Src/FUSB302.c **** 		rv |= tcpc_xfer(port, 0, 0, buf, 3, I2C_XFER_START);
 767:Src/FUSB302.c **** 
 768:Src/FUSB302.c **** 		/* Grab the header */
 769:Src/FUSB302.c **** 		*head = (buf[1] & 0xFF);
 770:Src/FUSB302.c **** 		*head |= ((buf[2] << 8) & 0xFF00);
 771:Src/FUSB302.c **** 
 772:Src/FUSB302.c **** 		/* figure out packet length, subtract header bytes */
 773:Src/FUSB302.c **** 		len = get_num_bytes(*head) - 2;
 774:Src/FUSB302.c **** 
 775:Src/FUSB302.c **** 		/*
 776:Src/FUSB302.c **** 		 * PART 3 OF BURST READ: Read everything else.
 777:Src/FUSB302.c **** 		 * No START, but do issue a STOP at the end.
 778:Src/FUSB302.c **** 		 * add 4 to len to read CRC out
 779:Src/FUSB302.c **** 		 */
 780:Src/FUSB302.c **** 		rv |= tcpc_xfer(port, 0, 0, buf, len+4, I2C_XFER_STOP);
 781:Src/FUSB302.c **** 
 782:Src/FUSB302.c **** 		//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 783:Src/FUSB302.c **** 	} while (!rv && PACKET_IS_GOOD_CRC(*head) &&
 784:Src/FUSB302.c **** 		 !fusb302_rx_fifo_is_empty(port));
 785:Src/FUSB302.c **** 
 786:Src/FUSB302.c **** 	if (!rv) {
 787:Src/FUSB302.c **** 		/* Discard GoodCRC packets */
 788:Src/FUSB302.c **** 		if (PACKET_IS_GOOD_CRC(*head))
 789:Src/FUSB302.c **** 			rv = EC_ERROR_UNKNOWN;
 790:Src/FUSB302.c **** 		else
 791:Src/FUSB302.c **** 			memcpy(payload, buf, len);
 792:Src/FUSB302.c **** 	}
 793:Src/FUSB302.c **** 
 794:Src/FUSB302.c **** 	/*
 795:Src/FUSB302.c **** 	 * If our FIFO is non-empty then we may have a packet, we may get
 796:Src/FUSB302.c **** 	 * fewer interrupts than packets due to interrupt latency.
 797:Src/FUSB302.c **** 	 */
 798:Src/FUSB302.c **** 	//if (!fusb302_rx_fifo_is_empty(port))
 799:Src/FUSB302.c **** 	//	task_set_event(PD_PORT_TO_TASK_ID(port), PD_EVENT_RX, 0);
 800:Src/FUSB302.c **** 
 801:Src/FUSB302.c **** 	return rv;
 802:Src/FUSB302.c **** }
 803:Src/FUSB302.c **** 
 804:Src/FUSB302.c **** static int fusb302_tcpm_transmit(int port, enum tcpm_transmit_type type,
 805:Src/FUSB302.c **** 				 uint16_t header, const uint32_t *data)
 806:Src/FUSB302.c **** {
 807:Src/FUSB302.c **** 	/*
 808:Src/FUSB302.c **** 	 * this is the buffer that will be burst-written into the fusb302
 809:Src/FUSB302.c **** 	 * maximum size necessary =
 810:Src/FUSB302.c **** 	 * 1: FIFO register address
 811:Src/FUSB302.c **** 	 * 4: SOP* tokens
 812:Src/FUSB302.c **** 	 * 1: Token that signifies "next X bytes are not tokens"
 813:Src/FUSB302.c **** 	 * 30: 2 for header and up to 7*4 = 28 for rest of message
ARM GAS  /tmp/ccUYTGX7.s 			page 20


 814:Src/FUSB302.c **** 	 * 1: "Insert CRC" Token
 815:Src/FUSB302.c **** 	 * 1: EOP Token
 816:Src/FUSB302.c **** 	 * 1: "Turn transmitter off" token
 817:Src/FUSB302.c **** 	 * 1: "Star Transmission" Command
 818:Src/FUSB302.c **** 	 * -
 819:Src/FUSB302.c **** 	 * 40: 40 bytes worst-case
 820:Src/FUSB302.c **** 	 */
 821:Src/FUSB302.c **** 	uint8_t buf[40];
 822:Src/FUSB302.c **** 	int buf_pos = 0;
 823:Src/FUSB302.c **** 
 824:Src/FUSB302.c **** 	int reg;
 825:Src/FUSB302.c **** 
 826:Src/FUSB302.c **** 	/* Flush the TXFIFO */
 827:Src/FUSB302.c **** 	fusb302_flush_tx_fifo(port);
 828:Src/FUSB302.c **** 
 829:Src/FUSB302.c **** 	switch (type) {
 830:Src/FUSB302.c **** 	case TCPC_TX_SOP:
 831:Src/FUSB302.c **** 
 832:Src/FUSB302.c **** 		/* put register address first for of burst tcpc write */
 833:Src/FUSB302.c **** 		buf[buf_pos++] = TCPC_REG_FIFOS;
 834:Src/FUSB302.c **** 
 835:Src/FUSB302.c **** 		/* Write the SOP Ordered Set into TX FIFO */
 836:Src/FUSB302.c **** 		buf[buf_pos++] = fusb302_TKN_SYNC1;
 837:Src/FUSB302.c **** 		buf[buf_pos++] = fusb302_TKN_SYNC1;
 838:Src/FUSB302.c **** 		buf[buf_pos++] = fusb302_TKN_SYNC1;
 839:Src/FUSB302.c **** 		buf[buf_pos++] = fusb302_TKN_SYNC2;
 840:Src/FUSB302.c **** 
 841:Src/FUSB302.c **** 		return fusb302_send_message(port, header, data, buf, buf_pos);
 842:Src/FUSB302.c **** 	case TCPC_TX_HARD_RESET:
 843:Src/FUSB302.c **** 		//i2c_master_lock(tcpc_config[port].i2c_host_port);
 844:Src/FUSB302.c **** 		/* Simply hit the SEND_HARD_RESET bit */
 845:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_CONTROL3, &reg);
 846:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL3_SEND_HARDRESET;
 847:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL3, reg);
 848:Src/FUSB302.c **** 		//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 849:Src/FUSB302.c **** 
 850:Src/FUSB302.c **** 		break;
 851:Src/FUSB302.c **** 	case TCPC_TX_BIST_MODE_2:
 852:Src/FUSB302.c **** 		//i2c_master_lock(tcpc_config[port].i2c_host_port);
 853:Src/FUSB302.c **** 		/* Hit the BIST_MODE2 bit and start TX */
 854:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_CONTROL1, &reg);
 855:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL1_BIST_MODE2;
 856:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL1, reg);
 857:Src/FUSB302.c **** 
 858:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_CONTROL0, &reg);
 859:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL0_TX_START;
 860:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL0, reg);
 861:Src/FUSB302.c **** 
 862:Src/FUSB302.c **** 		//task_wait_event(PD_T_BIST_TRANSMIT);
 863:Src/FUSB302.c **** 
 864:Src/FUSB302.c **** 		/* Clear BIST mode bit, TX_START is self-clearing */
 865:Src/FUSB302.c **** 		tcpc_read(port, TCPC_REG_CONTROL1, &reg);
 866:Src/FUSB302.c **** 		reg &= ~TCPC_REG_CONTROL1_BIST_MODE2;
 867:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL1, reg);
 868:Src/FUSB302.c **** 		
 869:Src/FUSB302.c **** 		//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 870:Src/FUSB302.c **** 
ARM GAS  /tmp/ccUYTGX7.s 			page 21


 871:Src/FUSB302.c **** 		break;
 872:Src/FUSB302.c **** 	default:
 873:Src/FUSB302.c **** 		return EC_ERROR_UNIMPLEMENTED;
 874:Src/FUSB302.c **** 	}
 875:Src/FUSB302.c **** 
 876:Src/FUSB302.c **** 	return 0;
 877:Src/FUSB302.c **** }
 878:Src/FUSB302.c **** 
 879:Src/FUSB302.c **** #ifdef CONFIG_USB_PD_VBUS_DETECT_TCPC
 880:Src/FUSB302.c **** static int fusb302_tcpm_get_vbus_level(int port)
 881:Src/FUSB302.c **** {
 882:Src/FUSB302.c **** 	int reg;
 883:Src/FUSB302.c **** 
 884:Src/FUSB302.c **** 	/* Read status register */
 885:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 886:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_STATUS0, &reg);
 887:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 888:Src/FUSB302.c **** 
 889:Src/FUSB302.c **** 	return (reg & TCPC_REG_STATUS0_VBUSOK) ? 1 : 0;
 890:Src/FUSB302.c **** }
 891:Src/FUSB302.c **** #endif
 892:Src/FUSB302.c **** 
 893:Src/FUSB302.c **** void fusb302_tcpc_alert(int port)
 894:Src/FUSB302.c **** {
 270              		.loc 1 894 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 16
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              	.LVL20:
 275 0000 10B5     		push	{r4, lr}
 276              	.LCFI4:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 4, -8
 279              		.cfi_offset 14, -4
 280 0002 84B0     		sub	sp, sp, #16
 281              	.LCFI5:
 282              		.cfi_def_cfa_offset 24
 283 0004 0400     		movs	r4, r0
 895:Src/FUSB302.c **** 	/* interrupt has been received */
 896:Src/FUSB302.c **** 	int interrupt;
 897:Src/FUSB302.c **** 	int interrupta;
 898:Src/FUSB302.c **** 	int interruptb;
 899:Src/FUSB302.c **** 
 900:Src/FUSB302.c **** 	/* reading interrupt registers clears them */
 901:Src/FUSB302.c **** 
 902:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 903:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_INTERRUPT, &interrupt);
 284              		.loc 1 903 0
 285 0006 03AA     		add	r2, sp, #12
 286 0008 4221     		movs	r1, #66
 287 000a FFF7FEFF 		bl	tcpc_read
 288              	.LVL21:
 904:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_INTERRUPTA, &interrupta);
 289              		.loc 1 904 0
 290 000e 02AA     		add	r2, sp, #8
 291 0010 3E21     		movs	r1, #62
 292 0012 2000     		movs	r0, r4
ARM GAS  /tmp/ccUYTGX7.s 			page 22


 293 0014 FFF7FEFF 		bl	tcpc_read
 294              	.LVL22:
 905:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_INTERRUPTB, &interruptb);
 295              		.loc 1 905 0
 296 0018 01AA     		add	r2, sp, #4
 297 001a 3F21     		movs	r1, #63
 298 001c 2000     		movs	r0, r4
 299 001e FFF7FEFF 		bl	tcpc_read
 300              	.LVL23:
 906:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 907:Src/FUSB302.c **** 
 908:Src/FUSB302.c **** 	/*
 909:Src/FUSB302.c **** 		* Ignore BC_LVL changes when transmitting / receiving PD,
 910:Src/FUSB302.c **** 		* since CC level will constantly change.
 911:Src/FUSB302.c **** 		*/
 912:Src/FUSB302.c **** 	if (state[port].rx_enable)
 301              		.loc 1 912 0
 302 0022 A300     		lsls	r3, r4, #2
 303 0024 1B19     		adds	r3, r3, r4
 304 0026 9A00     		lsls	r2, r3, #2
 305 0028 234B     		ldr	r3, .L34
 306 002a 9B18     		adds	r3, r3, r2
 307 002c DB68     		ldr	r3, [r3, #12]
 308 002e 002B     		cmp	r3, #0
 309 0030 03D0     		beq	.L21
 913:Src/FUSB302.c **** 		interrupt &= ~TCPC_REG_INTERRUPT_BC_LVL;
 310              		.loc 1 913 0
 311 0032 0123     		movs	r3, #1
 312 0034 039A     		ldr	r2, [sp, #12]
 313 0036 9A43     		bics	r2, r3
 314 0038 0392     		str	r2, [sp, #12]
 315              	.L21:
 914:Src/FUSB302.c **** 
 915:Src/FUSB302.c **** 	if (interrupt & TCPC_REG_INTERRUPT_BC_LVL) {
 916:Src/FUSB302.c **** 		/* CC Status change */
 917:Src/FUSB302.c **** 		//task_set_event(PD_PORT_TO_TASK_ID(port), PD_EVENT_CC, 0);
 918:Src/FUSB302.c **** 	}
 919:Src/FUSB302.c **** 
 920:Src/FUSB302.c **** 	if (interrupt & TCPC_REG_INTERRUPT_COLLISION) {
 316              		.loc 1 920 0
 317 003a 039B     		ldr	r3, [sp, #12]
 318 003c 9B07     		lsls	r3, r3, #30
 319 003e 18D4     		bmi	.L28
 320              	.L22:
 921:Src/FUSB302.c **** 		/* packet sending collided */
 922:Src/FUSB302.c **** 		pd_transmit_complete(port, TCPC_TX_COMPLETE_FAILED);
 923:Src/FUSB302.c **** 	}
 924:Src/FUSB302.c **** 
 925:Src/FUSB302.c **** 	/* GoodCRC was received, our FIFO is now non-empty */
 926:Src/FUSB302.c **** 	if (interrupta & TCPC_REG_INTERRUPTA_TX_SUCCESS) {
 321              		.loc 1 926 0
 322 0040 029B     		ldr	r3, [sp, #8]
 323 0042 5B07     		lsls	r3, r3, #29
 324 0044 1AD4     		bmi	.L29
 325              	.L23:
 927:Src/FUSB302.c **** 		//task_set_event(PD_PORT_TO_TASK_ID(port),
 928:Src/FUSB302.c **** 		//		PD_EVENT_RX, 0);
ARM GAS  /tmp/ccUYTGX7.s 			page 23


 929:Src/FUSB302.c **** 
 930:Src/FUSB302.c **** 		pd_transmit_complete(port, TCPC_TX_COMPLETE_SUCCESS);
 931:Src/FUSB302.c **** 	}
 932:Src/FUSB302.c **** 
 933:Src/FUSB302.c **** 	if (interrupta & TCPC_REG_INTERRUPTA_RETRYFAIL) {
 326              		.loc 1 933 0
 327 0046 029B     		ldr	r3, [sp, #8]
 328 0048 DB06     		lsls	r3, r3, #27
 329 004a 1CD4     		bmi	.L30
 330              	.L24:
 934:Src/FUSB302.c **** 		/* all retries have failed to get a GoodCRC */
 935:Src/FUSB302.c **** 		pd_transmit_complete(port, TCPC_TX_COMPLETE_FAILED);
 936:Src/FUSB302.c **** 	}
 937:Src/FUSB302.c **** 
 938:Src/FUSB302.c **** 	if (interrupta & TCPC_REG_INTERRUPTA_HARDSENT) {
 331              		.loc 1 938 0
 332 004c 029B     		ldr	r3, [sp, #8]
 333 004e 1B07     		lsls	r3, r3, #28
 334 0050 1ED4     		bmi	.L31
 335              	.L25:
 939:Src/FUSB302.c **** 		/* hard reset has been sent */
 940:Src/FUSB302.c **** 
 941:Src/FUSB302.c **** 		/* bring FUSB302 out of reset */
 942:Src/FUSB302.c **** 		fusb302_pd_reset(port);
 943:Src/FUSB302.c **** 
 944:Src/FUSB302.c **** 		pd_transmit_complete(port, TCPC_TX_COMPLETE_SUCCESS);
 945:Src/FUSB302.c **** 	}
 946:Src/FUSB302.c **** 
 947:Src/FUSB302.c **** 	if (interrupta & TCPC_REG_INTERRUPTA_HARDRESET) {
 336              		.loc 1 947 0
 337 0052 029B     		ldr	r3, [sp, #8]
 338 0054 DB07     		lsls	r3, r3, #31
 339 0056 23D4     		bmi	.L32
 340              	.L26:
 948:Src/FUSB302.c **** 		/* hard reset has been received */
 949:Src/FUSB302.c **** 
 950:Src/FUSB302.c **** 		/* bring FUSB302 out of reset */
 951:Src/FUSB302.c **** 		fusb302_pd_reset(port);
 952:Src/FUSB302.c **** 
 953:Src/FUSB302.c **** 		pd_execute_hard_reset(port);
 954:Src/FUSB302.c **** 
 955:Src/FUSB302.c **** 		//task_wake(PD_PORT_TO_TASK_ID(port));
 956:Src/FUSB302.c **** 	}
 957:Src/FUSB302.c **** 
 958:Src/FUSB302.c **** 	if (interruptb & TCPC_REG_INTERRUPTB_GCRCSENT) {
 341              		.loc 1 958 0
 342 0058 019B     		ldr	r3, [sp, #4]
 343 005a DB07     		lsls	r3, r3, #31
 344 005c 07D5     		bpl	.L20
 959:Src/FUSB302.c **** 		/* Packet received and GoodCRC sent */
 960:Src/FUSB302.c **** 		/* (this interrupt fires after the GoodCRC finishes) */
 961:Src/FUSB302.c **** 		if (state[port].rx_enable) {
 345              		.loc 1 961 0
 346 005e A300     		lsls	r3, r4, #2
 347 0060 1B19     		adds	r3, r3, r4
 348 0062 9A00     		lsls	r2, r3, #2
 349 0064 144B     		ldr	r3, .L34
ARM GAS  /tmp/ccUYTGX7.s 			page 24


 350 0066 9B18     		adds	r3, r3, r2
 351 0068 DB68     		ldr	r3, [r3, #12]
 352 006a 002B     		cmp	r3, #0
 353 006c 1FD0     		beq	.L33
 354              	.L20:
 962:Src/FUSB302.c **** 			//task_set_event(PD_PORT_TO_TASK_ID(port),
 963:Src/FUSB302.c **** 			//		PD_EVENT_RX, 0);
 964:Src/FUSB302.c **** 		} else {
 965:Src/FUSB302.c **** 			/* flush rx fifo if rx isn't enabled */
 966:Src/FUSB302.c **** 			fusb302_flush_rx_fifo(port);
 967:Src/FUSB302.c **** 		}
 968:Src/FUSB302.c **** 	}
 969:Src/FUSB302.c **** }
 355              		.loc 1 969 0
 356 006e 04B0     		add	sp, sp, #16
 357              		@ sp needed
 358              	.LVL24:
 359 0070 10BD     		pop	{r4, pc}
 360              	.LVL25:
 361              	.L28:
 922:Src/FUSB302.c **** 	}
 362              		.loc 1 922 0
 363 0072 0221     		movs	r1, #2
 364 0074 2000     		movs	r0, r4
 365 0076 FFF7FEFF 		bl	pd_transmit_complete
 366              	.LVL26:
 367 007a E1E7     		b	.L22
 368              	.L29:
 930:Src/FUSB302.c **** 	}
 369              		.loc 1 930 0
 370 007c 0021     		movs	r1, #0
 371 007e 2000     		movs	r0, r4
 372 0080 FFF7FEFF 		bl	pd_transmit_complete
 373              	.LVL27:
 374 0084 DFE7     		b	.L23
 375              	.L30:
 935:Src/FUSB302.c **** 	}
 376              		.loc 1 935 0
 377 0086 0221     		movs	r1, #2
 378 0088 2000     		movs	r0, r4
 379 008a FFF7FEFF 		bl	pd_transmit_complete
 380              	.LVL28:
 381 008e DDE7     		b	.L24
 382              	.L31:
 942:Src/FUSB302.c **** 
 383              		.loc 1 942 0
 384 0090 2000     		movs	r0, r4
 385 0092 FFF7FEFF 		bl	fusb302_pd_reset
 386              	.LVL29:
 944:Src/FUSB302.c **** 	}
 387              		.loc 1 944 0
 388 0096 0021     		movs	r1, #0
 389 0098 2000     		movs	r0, r4
 390 009a FFF7FEFF 		bl	pd_transmit_complete
 391              	.LVL30:
 392 009e D8E7     		b	.L25
 393              	.L32:
ARM GAS  /tmp/ccUYTGX7.s 			page 25


 951:Src/FUSB302.c **** 
 394              		.loc 1 951 0
 395 00a0 2000     		movs	r0, r4
 396 00a2 FFF7FEFF 		bl	fusb302_pd_reset
 397              	.LVL31:
 953:Src/FUSB302.c **** 
 398              		.loc 1 953 0
 399 00a6 2000     		movs	r0, r4
 400 00a8 FFF7FEFF 		bl	pd_execute_hard_reset
 401              	.LVL32:
 402 00ac D4E7     		b	.L26
 403              	.L33:
 966:Src/FUSB302.c **** 		}
 404              		.loc 1 966 0
 405 00ae 2000     		movs	r0, r4
 406 00b0 FFF7FEFF 		bl	fusb302_flush_rx_fifo
 407              	.LVL33:
 408              		.loc 1 969 0
 409 00b4 DBE7     		b	.L20
 410              	.L35:
 411 00b6 C046     		.align	2
 412              	.L34:
 413 00b8 00000000 		.word	.LANCHOR0
 414              		.cfi_endproc
 415              	.LFE40:
 417              		.section	.text.fusb302_flush_tx_fifo,"ax",%progbits
 418              		.align	1
 419              		.syntax unified
 420              		.code	16
 421              		.thumb_func
 422              		.fpu softvfp
 424              	fusb302_flush_tx_fifo:
 425              	.LFB20:
  55:Src/FUSB302.c **** 	int reg;
 426              		.loc 1 55 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 8
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              	.LVL34:
 431 0000 10B5     		push	{r4, lr}
 432              	.LCFI6:
 433              		.cfi_def_cfa_offset 8
 434              		.cfi_offset 4, -8
 435              		.cfi_offset 14, -4
 436 0002 82B0     		sub	sp, sp, #8
 437              	.LCFI7:
 438              		.cfi_def_cfa_offset 16
 439 0004 0400     		movs	r4, r0
  59:Src/FUSB302.c **** 	reg |= TCPC_REG_CONTROL0_TX_FLUSH;
 440              		.loc 1 59 0
 441 0006 01AA     		add	r2, sp, #4
 442 0008 0621     		movs	r1, #6
 443 000a FFF7FEFF 		bl	tcpc_read
 444              	.LVL35:
  60:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_CONTROL0, reg);
 445              		.loc 1 60 0
 446 000e 4022     		movs	r2, #64
ARM GAS  /tmp/ccUYTGX7.s 			page 26


 447 0010 019B     		ldr	r3, [sp, #4]
 448 0012 1A43     		orrs	r2, r3
 449 0014 0192     		str	r2, [sp, #4]
  61:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 450              		.loc 1 61 0
 451 0016 0621     		movs	r1, #6
 452 0018 2000     		movs	r0, r4
 453 001a FFF7FEFF 		bl	tcpc_write
 454              	.LVL36:
  63:Src/FUSB302.c **** 
 455              		.loc 1 63 0
 456 001e 02B0     		add	sp, sp, #8
 457              		@ sp needed
 458              	.LVL37:
 459 0020 10BD     		pop	{r4, pc}
 460              		.cfi_endproc
 461              	.LFE20:
 463              		.section	.text.fusb302_auto_goodcrc_enable,"ax",%progbits
 464              		.align	1
 465              		.syntax unified
 466              		.code	16
 467              		.thumb_func
 468              		.fpu softvfp
 470              	fusb302_auto_goodcrc_enable:
 471              	.LFB21:
  66:Src/FUSB302.c **** 	int reg;
 472              		.loc 1 66 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 8
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              	.LVL38:
 477 0000 30B5     		push	{r4, r5, lr}
 478              	.LCFI8:
 479              		.cfi_def_cfa_offset 12
 480              		.cfi_offset 4, -12
 481              		.cfi_offset 5, -8
 482              		.cfi_offset 14, -4
 483 0002 83B0     		sub	sp, sp, #12
 484              	.LCFI9:
 485              		.cfi_def_cfa_offset 24
 486 0004 0400     		movs	r4, r0
 487 0006 0D00     		movs	r5, r1
  70:Src/FUSB302.c **** 
 488              		.loc 1 70 0
 489 0008 01AA     		add	r2, sp, #4
 490 000a 0321     		movs	r1, #3
 491              	.LVL39:
 492 000c FFF7FEFF 		bl	tcpc_read
 493              	.LVL40:
  72:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_AUTO_GCRC;
 494              		.loc 1 72 0
 495 0010 002D     		cmp	r5, #0
 496 0012 0AD1     		bne	.L40
  75:Src/FUSB302.c **** 
 497              		.loc 1 75 0
 498 0014 0423     		movs	r3, #4
 499 0016 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/ccUYTGX7.s 			page 27


 500 0018 9A43     		bics	r2, r3
 501 001a 0192     		str	r2, [sp, #4]
 502              	.L39:
  77:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 503              		.loc 1 77 0
 504 001c 019A     		ldr	r2, [sp, #4]
 505 001e 0321     		movs	r1, #3
 506 0020 2000     		movs	r0, r4
 507 0022 FFF7FEFF 		bl	tcpc_write
 508              	.LVL41:
  79:Src/FUSB302.c **** 
 509              		.loc 1 79 0
 510 0026 03B0     		add	sp, sp, #12
 511              		@ sp needed
 512              	.LVL42:
 513              	.LVL43:
 514 0028 30BD     		pop	{r4, r5, pc}
 515              	.LVL44:
 516              	.L40:
  73:Src/FUSB302.c **** 	else
 517              		.loc 1 73 0
 518 002a 0423     		movs	r3, #4
 519 002c 019A     		ldr	r2, [sp, #4]
 520 002e 1343     		orrs	r3, r2
 521 0030 0193     		str	r3, [sp, #4]
 522 0032 F3E7     		b	.L39
 523              		.cfi_endproc
 524              	.LFE21:
 526              		.section	.text.fusb302_tcpm_set_rx_enable,"ax",%progbits
 527              		.align	1
 528              		.syntax unified
 529              		.code	16
 530              		.thumb_func
 531              		.fpu softvfp
 533              	fusb302_tcpm_set_rx_enable:
 534              	.LFB36:
 660:Src/FUSB302.c **** 	int reg;
 535              		.loc 1 660 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 8
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539              	.LVL45:
 540 0000 30B5     		push	{r4, r5, lr}
 541              	.LCFI10:
 542              		.cfi_def_cfa_offset 12
 543              		.cfi_offset 4, -12
 544              		.cfi_offset 5, -8
 545              		.cfi_offset 14, -4
 546 0002 83B0     		sub	sp, sp, #12
 547              	.LCFI11:
 548              		.cfi_def_cfa_offset 24
 549 0004 0400     		movs	r4, r0
 550 0006 0D00     		movs	r5, r1
 663:Src/FUSB302.c **** 	
 551              		.loc 1 663 0
 552 0008 8300     		lsls	r3, r0, #2
 553 000a 1B18     		adds	r3, r3, r0
ARM GAS  /tmp/ccUYTGX7.s 			page 28


 554 000c 9A00     		lsls	r2, r3, #2
 555 000e 294B     		ldr	r3, .L52
 556 0010 9B18     		adds	r3, r3, r2
 557 0012 D960     		str	r1, [r3, #12]
 668:Src/FUSB302.c **** 
 558              		.loc 1 668 0
 559 0014 01AA     		add	r2, sp, #4
 560 0016 0221     		movs	r1, #2
 561              	.LVL46:
 562 0018 FFF7FEFF 		bl	tcpc_read
 563              	.LVL47:
 671:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_MEAS_CC2;
 564              		.loc 1 671 0
 565 001c 0423     		movs	r3, #4
 566 001e 019A     		ldr	r2, [sp, #4]
 567 0020 9A43     		bics	r2, r3
 672:Src/FUSB302.c **** 
 568              		.loc 1 672 0
 569 0022 0433     		adds	r3, r3, #4
 570 0024 9A43     		bics	r2, r3
 571 0026 0192     		str	r2, [sp, #4]
 674:Src/FUSB302.c **** 		switch (state[port].cc_polarity) {
 572              		.loc 1 674 0
 573 0028 002D     		cmp	r5, #0
 574 002a 2FD0     		beq	.L42
 675:Src/FUSB302.c **** 		/* if CC polarity hasnt been determined, can't enable */
 575              		.loc 1 675 0
 576 002c A300     		lsls	r3, r4, #2
 577 002e 1B19     		adds	r3, r3, r4
 578 0030 9900     		lsls	r1, r3, #2
 579 0032 204B     		ldr	r3, .L52
 580 0034 CB58     		ldr	r3, [r1, r3]
 581 0036 002B     		cmp	r3, #0
 582 0038 03D0     		beq	.L44
 583 003a 012B     		cmp	r3, #1
 584 003c 1AD0     		beq	.L45
 678:Src/FUSB302.c **** 		case 0:
 585              		.loc 1 678 0
 586 003e 0120     		movs	r0, #1
 587 0040 16E0     		b	.L41
 588              	.L44:
 680:Src/FUSB302.c **** 			break;
 589              		.loc 1 680 0
 590 0042 0423     		movs	r3, #4
 591 0044 1A43     		orrs	r2, r3
 592 0046 0192     		str	r2, [sp, #4]
 593              	.L46:
 689:Src/FUSB302.c **** 
 594              		.loc 1 689 0
 595 0048 019A     		ldr	r2, [sp, #4]
 596 004a 0221     		movs	r1, #2
 597 004c 2000     		movs	r0, r4
 598 004e FFF7FEFF 		bl	tcpc_write
 599              	.LVL48:
 692:Src/FUSB302.c **** 			tcpc_write(port, TCPC_REG_MASK,
 600              		.loc 1 692 0
 601 0052 01AA     		add	r2, sp, #4
ARM GAS  /tmp/ccUYTGX7.s 			page 29


 602 0054 0A21     		movs	r1, #10
 603 0056 2000     		movs	r0, r4
 604 0058 FFF7FEFF 		bl	tcpc_read
 605              	.LVL49:
 606 005c 0028     		cmp	r0, #0
 607 005e 0DD0     		beq	.L51
 608              	.L47:
 697:Src/FUSB302.c **** 
 609              		.loc 1 697 0
 610 0060 2000     		movs	r0, r4
 611 0062 FFF7FEFF 		bl	fusb302_flush_rx_fifo
 612              	.LVL50:
 613              	.L48:
 711:Src/FUSB302.c **** 
 614              		.loc 1 711 0
 615 0066 2900     		movs	r1, r5
 616 0068 2000     		movs	r0, r4
 617 006a FFF7FEFF 		bl	fusb302_auto_goodcrc_enable
 618              	.LVL51:
 713:Src/FUSB302.c **** }
 619              		.loc 1 713 0
 620 006e 0020     		movs	r0, #0
 621              	.L41:
 714:Src/FUSB302.c **** 
 622              		.loc 1 714 0
 623 0070 03B0     		add	sp, sp, #12
 624              		@ sp needed
 625              	.LVL52:
 626              	.LVL53:
 627 0072 30BD     		pop	{r4, r5, pc}
 628              	.LVL54:
 629              	.L45:
 683:Src/FUSB302.c **** 			break;
 630              		.loc 1 683 0
 631 0074 0823     		movs	r3, #8
 632 0076 1A43     		orrs	r2, r3
 633 0078 0192     		str	r2, [sp, #4]
 684:Src/FUSB302.c **** 		default:
 634              		.loc 1 684 0
 635 007a E5E7     		b	.L46
 636              	.L51:
 693:Src/FUSB302.c **** 				   reg | TCPC_REG_MASK_BC_LVL);
 637              		.loc 1 693 0
 638 007c 0122     		movs	r2, #1
 639 007e 019B     		ldr	r3, [sp, #4]
 640 0080 1A43     		orrs	r2, r3
 641 0082 0A21     		movs	r1, #10
 642 0084 2000     		movs	r0, r4
 643 0086 FFF7FEFF 		bl	tcpc_write
 644              	.LVL55:
 645 008a E9E7     		b	.L47
 646              	.L42:
 701:Src/FUSB302.c **** 
 647              		.loc 1 701 0
 648 008c 0221     		movs	r1, #2
 649 008e 2000     		movs	r0, r4
 650 0090 FFF7FEFF 		bl	tcpc_write
ARM GAS  /tmp/ccUYTGX7.s 			page 30


 651              	.LVL56:
 704:Src/FUSB302.c **** 			tcpc_write(port, TCPC_REG_MASK,
 652              		.loc 1 704 0
 653 0094 01AA     		add	r2, sp, #4
 654 0096 0A21     		movs	r1, #10
 655 0098 2000     		movs	r0, r4
 656 009a FFF7FEFF 		bl	tcpc_read
 657              	.LVL57:
 658 009e 0028     		cmp	r0, #0
 659 00a0 E1D1     		bne	.L48
 705:Src/FUSB302.c **** 				   reg & ~TCPC_REG_MASK_BC_LVL);
 660              		.loc 1 705 0
 661 00a2 0123     		movs	r3, #1
 662 00a4 019A     		ldr	r2, [sp, #4]
 663 00a6 9A43     		bics	r2, r3
 664 00a8 0A21     		movs	r1, #10
 665 00aa 2000     		movs	r0, r4
 666 00ac FFF7FEFF 		bl	tcpc_write
 667              	.LVL58:
 668 00b0 D9E7     		b	.L48
 669              	.L53:
 670 00b2 C046     		.align	2
 671              	.L52:
 672 00b4 00000000 		.word	.LANCHOR0
 673              		.cfi_endproc
 674              	.LFE36:
 676              		.section	.text.fusb302_tcpm_set_msg_header,"ax",%progbits
 677              		.align	1
 678              		.syntax unified
 679              		.code	16
 680              		.thumb_func
 681              		.fpu softvfp
 683              	fusb302_tcpm_set_msg_header:
 684              	.LFB35:
 639:Src/FUSB302.c **** 	int reg;
 685              		.loc 1 639 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 8
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              	.LVL59:
 690 0000 70B5     		push	{r4, r5, r6, lr}
 691              	.LCFI12:
 692              		.cfi_def_cfa_offset 16
 693              		.cfi_offset 4, -16
 694              		.cfi_offset 5, -12
 695              		.cfi_offset 6, -8
 696              		.cfi_offset 14, -4
 697 0002 82B0     		sub	sp, sp, #8
 698              	.LCFI13:
 699              		.cfi_def_cfa_offset 24
 700 0004 0400     		movs	r4, r0
 701 0006 0E00     		movs	r6, r1
 702 0008 1500     		movs	r5, r2
 642:Src/FUSB302.c **** 
 703              		.loc 1 642 0
 704 000a 01AA     		add	r2, sp, #4
 705              	.LVL60:
ARM GAS  /tmp/ccUYTGX7.s 			page 31


 706 000c 0321     		movs	r1, #3
 707              	.LVL61:
 708 000e FFF7FEFF 		bl	tcpc_read
 709              	.LVL62:
 644:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES1_DATAROLE;
 710              		.loc 1 644 0
 711 0012 8023     		movs	r3, #128
 712 0014 019A     		ldr	r2, [sp, #4]
 713 0016 9A43     		bics	r2, r3
 714 0018 1300     		movs	r3, r2
 645:Src/FUSB302.c **** 
 715              		.loc 1 645 0
 716 001a 1022     		movs	r2, #16
 717 001c 9343     		bics	r3, r2
 718 001e 0193     		str	r3, [sp, #4]
 647:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_POWERROLE;
 719              		.loc 1 647 0
 720 0020 002E     		cmp	r6, #0
 721 0022 02D0     		beq	.L55
 648:Src/FUSB302.c **** 	if (data_role)
 722              		.loc 1 648 0
 723 0024 7032     		adds	r2, r2, #112
 724 0026 1343     		orrs	r3, r2
 725 0028 0193     		str	r3, [sp, #4]
 726              	.L55:
 649:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_DATAROLE;
 727              		.loc 1 649 0
 728 002a 002D     		cmp	r5, #0
 729 002c 03D0     		beq	.L56
 650:Src/FUSB302.c **** 
 730              		.loc 1 650 0
 731 002e 1023     		movs	r3, #16
 732 0030 019A     		ldr	r2, [sp, #4]
 733 0032 1343     		orrs	r3, r2
 734 0034 0193     		str	r3, [sp, #4]
 735              	.L56:
 652:Src/FUSB302.c **** 	
 736              		.loc 1 652 0
 737 0036 019A     		ldr	r2, [sp, #4]
 738 0038 0321     		movs	r1, #3
 739 003a 2000     		movs	r0, r4
 740 003c FFF7FEFF 		bl	tcpc_write
 741              	.LVL63:
 657:Src/FUSB302.c **** 
 742              		.loc 1 657 0
 743 0040 0020     		movs	r0, #0
 744 0042 02B0     		add	sp, sp, #8
 745              		@ sp needed
 746              	.LVL64:
 747              	.LVL65:
 748              	.LVL66:
 749 0044 70BD     		pop	{r4, r5, r6, pc}
 750              		.cfi_endproc
 751              	.LFE35:
 753              		.section	.text.fusb302_tcpm_set_vconn,"ax",%progbits
 754              		.align	1
 755              		.syntax unified
ARM GAS  /tmp/ccUYTGX7.s 			page 32


 756              		.code	16
 757              		.thumb_func
 758              		.fpu softvfp
 760              	fusb302_tcpm_set_vconn:
 761              	.LFB34:
 603:Src/FUSB302.c **** 	/*
 762              		.loc 1 603 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 8
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              	.LVL67:
 767 0000 10B5     		push	{r4, lr}
 768              	.LCFI14:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 4, -8
 771              		.cfi_offset 14, -4
 772 0002 82B0     		sub	sp, sp, #8
 773              	.LCFI15:
 774              		.cfi_def_cfa_offset 16
 775 0004 0400     		movs	r4, r0
 615:Src/FUSB302.c **** 
 776              		.loc 1 615 0
 777 0006 8300     		lsls	r3, r0, #2
 778 0008 1B18     		adds	r3, r3, r0
 779 000a 9A00     		lsls	r2, r3, #2
 780 000c 0F4B     		ldr	r3, .L60
 781 000e 9B18     		adds	r3, r3, r2
 782 0010 5960     		str	r1, [r3, #4]
 617:Src/FUSB302.c **** 		/* set to saved polarity */
 783              		.loc 1 617 0
 784 0012 0029     		cmp	r1, #0
 785 0014 0AD0     		beq	.L58
 619:Src/FUSB302.c **** 	} else {
 786              		.loc 1 619 0
 787 0016 0D4B     		ldr	r3, .L60
 788 0018 D158     		ldr	r1, [r2, r3]
 789              	.LVL68:
 790              	.LBB8:
 791              	.LBB9:
 792              		.file 2 "Inc/tcpm.h"
   1:Inc/tcpm.h    **** /* Copyright 2015 The Chromium OS Authors. All rights reserved.
   2:Inc/tcpm.h    ****  * Use of this source code is governed by a BSD-style license that can be
   3:Inc/tcpm.h    ****  * found in the LICENSE file.
   4:Inc/tcpm.h    ****  */
   5:Inc/tcpm.h    **** 
   6:Inc/tcpm.h    **** /* USB Power delivery port management - common header for TCPM drivers */
   7:Inc/tcpm.h    **** 
   8:Inc/tcpm.h    **** #ifndef __CROS_EC_USB_PD_TCPM_TCPM_H
   9:Inc/tcpm.h    **** #define __CROS_EC_USB_PD_TCPM_TCPM_H
  10:Inc/tcpm.h    **** 
  11:Inc/tcpm.h    **** #include "tcpm_driver.h"
  12:Inc/tcpm.h    **** #include "usb_pd_tcpm.h"
  13:Inc/tcpm.h    **** 
  14:Inc/tcpm.h    **** #if defined(CONFIG_USB_PD_DUAL_ROLE_AUTO_TOGGLE) && \
  15:Inc/tcpm.h    **** 	!defined(CONFIG_USB_PD_DUAL_ROLE)
  16:Inc/tcpm.h    **** #error "DRP auto toggle requires board to have DRP support"
  17:Inc/tcpm.h    **** #error "Please upgrade your board configuration"
ARM GAS  /tmp/ccUYTGX7.s 			page 33


  18:Inc/tcpm.h    **** #endif
  19:Inc/tcpm.h    **** 
  20:Inc/tcpm.h    **** #ifndef CONFIG_USB_PD_TCPC
  21:Inc/tcpm.h    **** extern const struct tcpc_config_t tcpc_config[];
  22:Inc/tcpm.h    **** 
  23:Inc/tcpm.h    **** /* I2C wrapper functions - get I2C port / slave addr from config struct. */
  24:Inc/tcpm.h    **** int tcpc_write(int port, int reg, int val);
  25:Inc/tcpm.h    **** int tcpc_write16(int port, int reg, int val);
  26:Inc/tcpm.h    **** int tcpc_read(int port, int reg, int *val);
  27:Inc/tcpm.h    **** int tcpc_read16(int port, int reg, int *val);
  28:Inc/tcpm.h    **** int tcpc_xfer(int port,
  29:Inc/tcpm.h    **** 		uint8_t *out, int out_size,
  30:Inc/tcpm.h    **** 		uint8_t *in, int in_size,
  31:Inc/tcpm.h    **** 		int flags);
  32:Inc/tcpm.h    **** 
  33:Inc/tcpm.h    **** /* TCPM driver wrapper function */
  34:Inc/tcpm.h    **** static inline int tcpm_init(int port)
  35:Inc/tcpm.h    **** {
  36:Inc/tcpm.h    **** 	int rv;
  37:Inc/tcpm.h    **** 
  38:Inc/tcpm.h    **** 	rv = tcpc_config[port].drv->init(port);
  39:Inc/tcpm.h    **** 	if (rv)
  40:Inc/tcpm.h    **** 		return rv;
  41:Inc/tcpm.h    **** 
  42:Inc/tcpm.h    **** 	/* Board specific post TCPC init */
  43:Inc/tcpm.h    **** 	if (board_tcpc_post_init)
  44:Inc/tcpm.h    **** 		rv = board_tcpc_post_init(port);
  45:Inc/tcpm.h    **** 
  46:Inc/tcpm.h    **** 	return rv;
  47:Inc/tcpm.h    **** }
  48:Inc/tcpm.h    **** 
  49:Inc/tcpm.h    **** static inline int tcpm_release(int port)
  50:Inc/tcpm.h    **** {
  51:Inc/tcpm.h    **** 	return tcpc_config[port].drv->release(port);
  52:Inc/tcpm.h    **** }
  53:Inc/tcpm.h    **** 
  54:Inc/tcpm.h    **** static inline int tcpm_get_cc(int port, int *cc1, int *cc2)
  55:Inc/tcpm.h    **** {
  56:Inc/tcpm.h    **** 	return tcpc_config[port].drv->get_cc(port, cc1, cc2);
  57:Inc/tcpm.h    **** }
  58:Inc/tcpm.h    **** 
  59:Inc/tcpm.h    **** static inline int tcpm_get_vbus_level(int port)
  60:Inc/tcpm.h    **** {
  61:Inc/tcpm.h    **** 	return tcpc_config[port].drv->get_vbus_level(port);
  62:Inc/tcpm.h    **** }
  63:Inc/tcpm.h    **** 
  64:Inc/tcpm.h    **** static inline int tcpm_select_rp_value(int port, int rp)
  65:Inc/tcpm.h    **** {
  66:Inc/tcpm.h    **** 	return tcpc_config[port].drv->select_rp_value(port, rp);
  67:Inc/tcpm.h    **** }
  68:Inc/tcpm.h    **** 
  69:Inc/tcpm.h    **** static inline int tcpm_set_cc(int port, int pull)
  70:Inc/tcpm.h    **** {
  71:Inc/tcpm.h    **** 	return tcpc_config[port].drv->set_cc(port, pull);
  72:Inc/tcpm.h    **** }
  73:Inc/tcpm.h    **** 
  74:Inc/tcpm.h    **** static inline int tcpm_set_polarity(int port, int polarity)
ARM GAS  /tmp/ccUYTGX7.s 			page 34


  75:Inc/tcpm.h    **** {
  76:Inc/tcpm.h    **** 	return tcpc_config[port].drv->set_polarity(port, polarity);
 793              		.loc 2 76 0
 794 001a 0201     		lsls	r2, r0, #4
 795              	.LVL69:
 796 001c 0C4B     		ldr	r3, .L60+4
 797              	.LVL70:
 798 001e 9B18     		adds	r3, r3, r2
 799 0020 9B68     		ldr	r3, [r3, #8]
 800 0022 9B69     		ldr	r3, [r3, #24]
 801 0024 9847     		blx	r3
 802              	.LVL71:
 803              	.L59:
 804              	.LBE9:
 805              	.LBE8:
 636:Src/FUSB302.c **** 
 806              		.loc 1 636 0
 807 0026 0020     		movs	r0, #0
 808 0028 02B0     		add	sp, sp, #8
 809              		@ sp needed
 810              	.LVL72:
 811 002a 10BD     		pop	{r4, pc}
 812              	.LVL73:
 813              	.L58:
 624:Src/FUSB302.c **** 
 814              		.loc 1 624 0
 815 002c 01AA     		add	r2, sp, #4
 816 002e 0221     		movs	r1, #2
 817              	.LVL74:
 818 0030 FFF7FEFF 		bl	tcpc_read
 819              	.LVL75:
 627:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_VCONN_CC2;
 820              		.loc 1 627 0
 821 0034 1023     		movs	r3, #16
 822 0036 019A     		ldr	r2, [sp, #4]
 823 0038 9A43     		bics	r2, r3
 628:Src/FUSB302.c **** 
 824              		.loc 1 628 0
 825 003a 1033     		adds	r3, r3, #16
 826 003c 9A43     		bics	r2, r3
 827 003e 0192     		str	r2, [sp, #4]
 630:Src/FUSB302.c **** 		
 828              		.loc 1 630 0
 829 0040 0221     		movs	r1, #2
 830 0042 2000     		movs	r0, r4
 831 0044 FFF7FEFF 		bl	tcpc_write
 832              	.LVL76:
 833 0048 EDE7     		b	.L59
 834              	.L61:
 835 004a C046     		.align	2
 836              	.L60:
 837 004c 00000000 		.word	.LANCHOR0
 838 0050 00000000 		.word	tcpc_config
 839              		.cfi_endproc
 840              	.LFE34:
 842              		.section	.text.fusb302_tcpm_set_polarity,"ax",%progbits
 843              		.align	1
ARM GAS  /tmp/ccUYTGX7.s 			page 35


 844              		.syntax unified
 845              		.code	16
 846              		.thumb_func
 847              		.fpu softvfp
 849              	fusb302_tcpm_set_polarity:
 850              	.LFB33:
 548:Src/FUSB302.c **** 	/* Port polarity : 0 => CC1 is CC line, 1 => CC2 is CC line */
 851              		.loc 1 548 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 8
 854              		@ frame_needed = 0, uses_anonymous_args = 0
 855              	.LVL77:
 856 0000 30B5     		push	{r4, r5, lr}
 857              	.LCFI16:
 858              		.cfi_def_cfa_offset 12
 859              		.cfi_offset 4, -12
 860              		.cfi_offset 5, -8
 861              		.cfi_offset 14, -4
 862 0002 83B0     		sub	sp, sp, #12
 863              	.LCFI17:
 864              		.cfi_def_cfa_offset 24
 865 0004 0400     		movs	r4, r0
 866 0006 0D00     		movs	r5, r1
 554:Src/FUSB302.c **** 
 867              		.loc 1 554 0
 868 0008 01AA     		add	r2, sp, #4
 869 000a 0221     		movs	r1, #2
 870              	.LVL78:
 871 000c FFF7FEFF 		bl	tcpc_read
 872              	.LVL79:
 557:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_VCONN_CC2;
 873              		.loc 1 557 0
 874 0010 1023     		movs	r3, #16
 875 0012 019A     		ldr	r2, [sp, #4]
 876 0014 9A43     		bics	r2, r3
 877 0016 1300     		movs	r3, r2
 558:Src/FUSB302.c **** 
 878              		.loc 1 558 0
 879 0018 2022     		movs	r2, #32
 880 001a 9343     		bics	r3, r2
 881 001c 0193     		str	r3, [sp, #4]
 560:Src/FUSB302.c **** 		/* set VCONN switch to be non-CC line */
 882              		.loc 1 560 0
 883 001e A200     		lsls	r2, r4, #2
 884 0020 1219     		adds	r2, r2, r4
 885 0022 9100     		lsls	r1, r2, #2
 886 0024 204A     		ldr	r2, .L70
 887 0026 5218     		adds	r2, r2, r1
 888 0028 5268     		ldr	r2, [r2, #4]
 889 002a 002A     		cmp	r2, #0
 890 002c 04D0     		beq	.L63
 562:Src/FUSB302.c **** 			reg |= TCPC_REG_SWITCHES0_VCONN_CC1;
 891              		.loc 1 562 0
 892 002e 002D     		cmp	r5, #0
 893 0030 2ED0     		beq	.L64
 563:Src/FUSB302.c **** 		else
 894              		.loc 1 563 0
ARM GAS  /tmp/ccUYTGX7.s 			page 36


 895 0032 1022     		movs	r2, #16
 896 0034 1343     		orrs	r3, r2
 897 0036 0193     		str	r3, [sp, #4]
 898              	.L63:
 569:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES0_MEAS_CC2;
 899              		.loc 1 569 0
 900 0038 0423     		movs	r3, #4
 901 003a 019A     		ldr	r2, [sp, #4]
 902 003c 9A43     		bics	r2, r3
 903 003e 1300     		movs	r3, r2
 570:Src/FUSB302.c **** 
 904              		.loc 1 570 0
 905 0040 0822     		movs	r2, #8
 906 0042 9343     		bics	r3, r2
 573:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_MEAS_CC2;
 907              		.loc 1 573 0
 908 0044 002D     		cmp	r5, #0
 909 0046 27D0     		beq	.L65
 574:Src/FUSB302.c **** 	else
 910              		.loc 1 574 0
 911 0048 1343     		orrs	r3, r2
 912 004a 0193     		str	r3, [sp, #4]
 913              	.L66:
 578:Src/FUSB302.c **** 
 914              		.loc 1 578 0
 915 004c 019A     		ldr	r2, [sp, #4]
 916 004e 0221     		movs	r1, #2
 917 0050 2000     		movs	r0, r4
 918 0052 FFF7FEFF 		bl	tcpc_write
 919              	.LVL80:
 580:Src/FUSB302.c **** 
 920              		.loc 1 580 0
 921 0056 01AA     		add	r2, sp, #4
 922 0058 0321     		movs	r1, #3
 923 005a 2000     		movs	r0, r4
 924 005c FFF7FEFF 		bl	tcpc_read
 925              	.LVL81:
 583:Src/FUSB302.c **** 	reg &= ~TCPC_REG_SWITCHES1_TXCC2_EN;
 926              		.loc 1 583 0
 927 0060 0123     		movs	r3, #1
 928 0062 019A     		ldr	r2, [sp, #4]
 929 0064 9A43     		bics	r2, r3
 930 0066 1300     		movs	r3, r2
 584:Src/FUSB302.c **** 
 931              		.loc 1 584 0
 932 0068 0222     		movs	r2, #2
 933 006a 9343     		bics	r3, r2
 587:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES1_TXCC2_EN;
 934              		.loc 1 587 0
 935 006c 002D     		cmp	r5, #0
 936 006e 17D1     		bne	.L69
 590:Src/FUSB302.c **** 
 937              		.loc 1 590 0
 938 0070 0122     		movs	r2, #1
 939 0072 1343     		orrs	r3, r2
 940 0074 0193     		str	r3, [sp, #4]
 941              	.L68:
ARM GAS  /tmp/ccUYTGX7.s 			page 37


 592:Src/FUSB302.c **** 
 942              		.loc 1 592 0
 943 0076 019A     		ldr	r2, [sp, #4]
 944 0078 0321     		movs	r1, #3
 945 007a 2000     		movs	r0, r4
 946 007c FFF7FEFF 		bl	tcpc_write
 947              	.LVL82:
 595:Src/FUSB302.c **** 	
 948              		.loc 1 595 0
 949 0080 A300     		lsls	r3, r4, #2
 950 0082 1C19     		adds	r4, r3, r4
 951              	.LVL83:
 952 0084 A300     		lsls	r3, r4, #2
 953 0086 084A     		ldr	r2, .L70
 954 0088 9D50     		str	r5, [r3, r2]
 600:Src/FUSB302.c **** 
 955              		.loc 1 600 0
 956 008a 0020     		movs	r0, #0
 957 008c 03B0     		add	sp, sp, #12
 958              		@ sp needed
 959              	.LVL84:
 960 008e 30BD     		pop	{r4, r5, pc}
 961              	.LVL85:
 962              	.L64:
 565:Src/FUSB302.c **** 	}
 963              		.loc 1 565 0
 964 0090 2022     		movs	r2, #32
 965 0092 1343     		orrs	r3, r2
 966 0094 0193     		str	r3, [sp, #4]
 967 0096 CFE7     		b	.L63
 968              	.L65:
 576:Src/FUSB302.c **** 
 969              		.loc 1 576 0
 970 0098 0422     		movs	r2, #4
 971 009a 1343     		orrs	r3, r2
 972 009c 0193     		str	r3, [sp, #4]
 973 009e D5E7     		b	.L66
 974              	.L69:
 588:Src/FUSB302.c **** 	else
 975              		.loc 1 588 0
 976 00a0 1343     		orrs	r3, r2
 977 00a2 0193     		str	r3, [sp, #4]
 978 00a4 E7E7     		b	.L68
 979              	.L71:
 980 00a6 C046     		.align	2
 981              	.L70:
 982 00a8 00000000 		.word	.LANCHOR0
 983              		.cfi_endproc
 984              	.LFE33:
 986              		.section	.text.fusb302_tcpm_set_cc,"ax",%progbits
 987              		.align	1
 988              		.syntax unified
 989              		.code	16
 990              		.thumb_func
 991              		.fpu softvfp
 993              	fusb302_tcpm_set_cc:
 994              	.LFB32:
ARM GAS  /tmp/ccUYTGX7.s 			page 38


 471:Src/FUSB302.c **** 	int reg;
 995              		.loc 1 471 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 8
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              	.LVL86:
 1000 0000 30B5     		push	{r4, r5, lr}
 1001              	.LCFI18:
 1002              		.cfi_def_cfa_offset 12
 1003              		.cfi_offset 4, -12
 1004              		.cfi_offset 5, -8
 1005              		.cfi_offset 14, -4
 1006 0002 83B0     		sub	sp, sp, #12
 1007              	.LCFI19:
 1008              		.cfi_def_cfa_offset 24
 1009 0004 0400     		movs	r4, r0
 478:Src/FUSB302.c **** 	case TYPEC_CC_RP:
 1010              		.loc 1 478 0
 1011 0006 0229     		cmp	r1, #2
 1012 0008 30D0     		beq	.L74
 1013 000a 0329     		cmp	r1, #3
 1014 000c 55D0     		beq	.L75
 1015 000e 0129     		cmp	r1, #1
 1016 0010 01D0     		beq	.L82
 539:Src/FUSB302.c **** 	}
 1017              		.loc 1 539 0
 1018 0012 0220     		movs	r0, #2
 1019              	.LVL87:
 1020 0014 26E0     		b	.L72
 1021              	.LVL88:
 1022              	.L82:
 481:Src/FUSB302.c **** 
 1023              		.loc 1 481 0
 1024 0016 01AA     		add	r2, sp, #4
 1025 0018 0131     		adds	r1, r1, #1
 1026              	.LVL89:
 1027 001a FFF7FEFF 		bl	tcpc_read
 1028              	.LVL90:
 483:Src/FUSB302.c **** 			 TCPC_REG_SWITCHES0_CC1_PU_EN |
 1029              		.loc 1 483 0
 1030 001e F323     		movs	r3, #243
 1031 0020 019A     		ldr	r2, [sp, #4]
 1032 0022 9A43     		bics	r2, r3
 1033 0024 1300     		movs	r3, r2
 490:Src/FUSB302.c **** 			TCPC_REG_SWITCHES0_CC2_PU_EN;
 1034              		.loc 1 490 0
 1035 0026 C022     		movs	r2, #192
 1036 0028 1343     		orrs	r3, r2
 1037 002a 0193     		str	r3, [sp, #4]
 493:Src/FUSB302.c **** 			reg |= state[port].cc_polarity ?
 1038              		.loc 1 493 0
 1039 002c A200     		lsls	r2, r4, #2
 1040 002e 1219     		adds	r2, r2, r4
 1041 0030 9100     		lsls	r1, r2, #2
 1042 0032 354A     		ldr	r2, .L83
 1043 0034 5218     		adds	r2, r2, r1
 1044 0036 5268     		ldr	r2, [r2, #4]
ARM GAS  /tmp/ccUYTGX7.s 			page 39


 1045 0038 002A     		cmp	r2, #0
 1046 003a 06D0     		beq	.L77
 494:Src/FUSB302.c **** 			       TCPC_REG_SWITCHES0_VCONN_CC1 :
 1047              		.loc 1 494 0
 1048 003c 324A     		ldr	r2, .L83
 1049 003e 8A58     		ldr	r2, [r1, r2]
 495:Src/FUSB302.c **** 			       TCPC_REG_SWITCHES0_VCONN_CC2;
 1050              		.loc 1 495 0
 1051 0040 002A     		cmp	r2, #0
 1052 0042 11D0     		beq	.L80
 1053 0044 1022     		movs	r2, #16
 1054              	.L78:
 494:Src/FUSB302.c **** 			       TCPC_REG_SWITCHES0_VCONN_CC1 :
 1055              		.loc 1 494 0
 1056 0046 1343     		orrs	r3, r2
 1057 0048 0193     		str	r3, [sp, #4]
 1058              	.L77:
 498:Src/FUSB302.c **** 
 1059              		.loc 1 498 0
 1060 004a 019A     		ldr	r2, [sp, #4]
 1061 004c 0221     		movs	r1, #2
 1062 004e 2000     		movs	r0, r4
 1063 0050 FFF7FEFF 		bl	tcpc_write
 1064              	.LVL91:
 500:Src/FUSB302.c **** 		break;
 1065              		.loc 1 500 0
 1066 0054 A300     		lsls	r3, r4, #2
 1067 0056 1C19     		adds	r4, r3, r4
 1068              	.LVL92:
 1069 0058 A200     		lsls	r2, r4, #2
 1070 005a 2B4B     		ldr	r3, .L83
 1071 005c 9B18     		adds	r3, r3, r2
 1072 005e 0122     		movs	r2, #1
 1073 0060 9A60     		str	r2, [r3, #8]
 544:Src/FUSB302.c **** }
 1074              		.loc 1 544 0
 1075 0062 0020     		movs	r0, #0
 1076              	.L72:
 545:Src/FUSB302.c **** 
 1077              		.loc 1 545 0
 1078 0064 03B0     		add	sp, sp, #12
 1079              		@ sp needed
 1080 0066 30BD     		pop	{r4, r5, pc}
 1081              	.LVL93:
 1082              	.L80:
 495:Src/FUSB302.c **** 			       TCPC_REG_SWITCHES0_VCONN_CC2;
 1083              		.loc 1 495 0
 1084 0068 2022     		movs	r2, #32
 1085 006a ECE7     		b	.L78
 1086              	.LVL94:
 1087              	.L74:
 506:Src/FUSB302.c **** 		reg &= ~TCPC_REG_CONTROL2_TOGGLE;
 1088              		.loc 1 506 0
 1089 006c 01AA     		add	r2, sp, #4
 1090 006e 0821     		movs	r1, #8
 1091              	.LVL95:
 1092 0070 FFF7FEFF 		bl	tcpc_read
ARM GAS  /tmp/ccUYTGX7.s 			page 40


 1093              	.LVL96:
 507:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL2, reg);
 1094              		.loc 1 507 0
 1095 0074 0125     		movs	r5, #1
 1096 0076 019A     		ldr	r2, [sp, #4]
 1097 0078 AA43     		bics	r2, r5
 1098 007a 0192     		str	r2, [sp, #4]
 508:Src/FUSB302.c **** 
 1099              		.loc 1 508 0
 1100 007c 0821     		movs	r1, #8
 1101 007e 2000     		movs	r0, r4
 1102 0080 FFF7FEFF 		bl	tcpc_write
 1103              	.LVL97:
 511:Src/FUSB302.c **** 
 1104              		.loc 1 511 0
 1105 0084 01AA     		add	r2, sp, #4
 1106 0086 0221     		movs	r1, #2
 1107 0088 2000     		movs	r0, r4
 1108 008a FFF7FEFF 		bl	tcpc_read
 1109              	.LVL98:
 513:Src/FUSB302.c **** 		reg &= ~(TCPC_REG_SWITCHES0_CC1_PU_EN);
 1110              		.loc 1 513 0
 1111 008e 8023     		movs	r3, #128
 1112 0090 019A     		ldr	r2, [sp, #4]
 1113 0092 9A43     		bics	r2, r3
 514:Src/FUSB302.c **** 		reg |= (TCPC_REG_SWITCHES0_CC1_PD_EN);
 1114              		.loc 1 514 0
 1115 0094 403B     		subs	r3, r3, #64
 1116 0096 9A43     		bics	r2, r3
 515:Src/FUSB302.c **** 		reg |= (TCPC_REG_SWITCHES0_CC2_PD_EN);
 1117              		.loc 1 515 0
 1118 0098 2A43     		orrs	r2, r5
 516:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 1119              		.loc 1 516 0
 1120 009a 3E3B     		subs	r3, r3, #62
 1121 009c 1A43     		orrs	r2, r3
 1122 009e 0192     		str	r2, [sp, #4]
 517:Src/FUSB302.c **** 
 1123              		.loc 1 517 0
 1124 00a0 0221     		movs	r1, #2
 1125 00a2 2000     		movs	r0, r4
 1126 00a4 FFF7FEFF 		bl	tcpc_write
 1127              	.LVL99:
 519:Src/FUSB302.c **** 		break;
 1128              		.loc 1 519 0
 1129 00a8 A300     		lsls	r3, r4, #2
 1130 00aa 1C19     		adds	r4, r3, r4
 1131              	.LVL100:
 1132 00ac A200     		lsls	r2, r4, #2
 1133 00ae 164B     		ldr	r3, .L83
 1134 00b0 9B18     		adds	r3, r3, r2
 1135 00b2 0022     		movs	r2, #0
 1136 00b4 9A60     		str	r2, [r3, #8]
 544:Src/FUSB302.c **** }
 1137              		.loc 1 544 0
 1138 00b6 0020     		movs	r0, #0
 520:Src/FUSB302.c **** 	case TYPEC_CC_OPEN:
ARM GAS  /tmp/ccUYTGX7.s 			page 41


 1139              		.loc 1 520 0
 1140 00b8 D4E7     		b	.L72
 1141              	.LVL101:
 1142              	.L75:
 523:Src/FUSB302.c **** 		reg &= ~TCPC_REG_CONTROL2_TOGGLE;
 1143              		.loc 1 523 0
 1144 00ba 01AA     		add	r2, sp, #4
 1145 00bc 0821     		movs	r1, #8
 1146              	.LVL102:
 1147 00be FFF7FEFF 		bl	tcpc_read
 1148              	.LVL103:
 524:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL2, reg);
 1149              		.loc 1 524 0
 1150 00c2 0125     		movs	r5, #1
 1151 00c4 019A     		ldr	r2, [sp, #4]
 1152 00c6 AA43     		bics	r2, r5
 1153 00c8 0192     		str	r2, [sp, #4]
 525:Src/FUSB302.c **** 
 1154              		.loc 1 525 0
 1155 00ca 0821     		movs	r1, #8
 1156 00cc 2000     		movs	r0, r4
 1157 00ce FFF7FEFF 		bl	tcpc_write
 1158              	.LVL104:
 528:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_CC1_PU_EN;
 1159              		.loc 1 528 0
 1160 00d2 01AA     		add	r2, sp, #4
 1161 00d4 0221     		movs	r1, #2
 1162 00d6 2000     		movs	r0, r4
 1163 00d8 FFF7FEFF 		bl	tcpc_read
 1164              	.LVL105:
 529:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_CC2_PU_EN;
 1165              		.loc 1 529 0
 1166 00dc 4023     		movs	r3, #64
 1167 00de 019A     		ldr	r2, [sp, #4]
 1168 00e0 9A43     		bics	r2, r3
 530:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_CC1_PD_EN;
 1169              		.loc 1 530 0
 1170 00e2 4033     		adds	r3, r3, #64
 1171 00e4 9A43     		bics	r2, r3
 531:Src/FUSB302.c **** 		reg &= ~TCPC_REG_SWITCHES0_CC2_PD_EN;
 1172              		.loc 1 531 0
 1173 00e6 AA43     		bics	r2, r5
 532:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_SWITCHES0, reg);
 1174              		.loc 1 532 0
 1175 00e8 7E3B     		subs	r3, r3, #126
 1176 00ea 9A43     		bics	r2, r3
 1177 00ec 0192     		str	r2, [sp, #4]
 533:Src/FUSB302.c **** 
 1178              		.loc 1 533 0
 1179 00ee 0221     		movs	r1, #2
 1180 00f0 2000     		movs	r0, r4
 1181 00f2 FFF7FEFF 		bl	tcpc_write
 1182              	.LVL106:
 535:Src/FUSB302.c **** 		break;
 1183              		.loc 1 535 0
 1184 00f6 A300     		lsls	r3, r4, #2
 1185 00f8 1C19     		adds	r4, r3, r4
ARM GAS  /tmp/ccUYTGX7.s 			page 42


 1186              	.LVL107:
 1187 00fa A200     		lsls	r2, r4, #2
 1188 00fc 024B     		ldr	r3, .L83
 1189 00fe 9B18     		adds	r3, r3, r2
 1190 0100 0022     		movs	r2, #0
 1191 0102 9A60     		str	r2, [r3, #8]
 544:Src/FUSB302.c **** }
 1192              		.loc 1 544 0
 1193 0104 0020     		movs	r0, #0
 536:Src/FUSB302.c **** 	default:
 1194              		.loc 1 536 0
 1195 0106 ADE7     		b	.L72
 1196              	.L84:
 1197              		.align	2
 1198              	.L83:
 1199 0108 00000000 		.word	.LANCHOR0
 1200              		.cfi_endproc
 1201              	.LFE32:
 1203              		.section	.text.fusb302_tcpm_select_rp_value,"ax",%progbits
 1204              		.align	1
 1205              		.syntax unified
 1206              		.code	16
 1207              		.thumb_func
 1208              		.fpu softvfp
 1210              	fusb302_tcpm_select_rp_value:
 1211              	.LFB28:
 341:Src/FUSB302.c **** 	int reg;
 1212              		.loc 1 341 0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 8
 1215              		@ frame_needed = 0, uses_anonymous_args = 0
 1216              	.LVL108:
 1217 0000 30B5     		push	{r4, r5, lr}
 1218              	.LCFI20:
 1219              		.cfi_def_cfa_offset 12
 1220              		.cfi_offset 4, -12
 1221              		.cfi_offset 5, -8
 1222              		.cfi_offset 14, -4
 1223 0002 83B0     		sub	sp, sp, #12
 1224              	.LCFI21:
 1225              		.cfi_def_cfa_offset 24
 1226 0004 0400     		movs	r4, r0
 1227 0006 0D00     		movs	r5, r1
 348:Src/FUSB302.c **** 	if (rv)
 1228              		.loc 1 348 0
 1229 0008 01AA     		add	r2, sp, #4
 1230 000a 0621     		movs	r1, #6
 1231              	.LVL109:
 1232 000c FFF7FEFF 		bl	tcpc_read
 1233              	.LVL110:
 349:Src/FUSB302.c **** 		return rv;
 1234              		.loc 1 349 0
 1235 0010 0028     		cmp	r0, #0
 1236 0012 1ED1     		bne	.L85
 353:Src/FUSB302.c **** 	switch (rp) {
 1237              		.loc 1 353 0
 1238 0014 0C23     		movs	r3, #12
ARM GAS  /tmp/ccUYTGX7.s 			page 43


 1239 0016 019A     		ldr	r2, [sp, #4]
 1240 0018 9A43     		bics	r2, r3
 1241 001a 1300     		movs	r3, r2
 354:Src/FUSB302.c **** 	case TYPEC_RP_1A5:
 1242              		.loc 1 354 0
 1243 001c 012D     		cmp	r5, #1
 1244 001e 07D0     		beq	.L88
 1245 0020 022D     		cmp	r5, #2
 1246 0022 18D0     		beq	.L89
 367:Src/FUSB302.c **** 		vnc = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_DEF_VNC_MV);
 1247              		.loc 1 367 0
 1248 0024 0422     		movs	r2, #4
 1249 0026 1343     		orrs	r3, r2
 1250 0028 0193     		str	r3, [sp, #4]
 1251              	.LVL111:
 369:Src/FUSB302.c **** 	}
 1252              		.loc 1 369 0
 1253 002a 0420     		movs	r0, #4
 1254              	.LVL112:
 368:Src/FUSB302.c **** 		rd = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_DEF_RD_THRESH_MV);
 1255              		.loc 1 368 0
 1256 002c 2625     		movs	r5, #38
 1257              	.LVL113:
 1258 002e 04E0     		b	.L90
 1259              	.LVL114:
 1260              	.L88:
 356:Src/FUSB302.c **** 		vnc = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_1_5_VNC_MV);
 1261              		.loc 1 356 0
 1262 0030 0822     		movs	r2, #8
 1263 0032 1343     		orrs	r3, r2
 1264 0034 0193     		str	r3, [sp, #4]
 1265              	.LVL115:
 358:Src/FUSB302.c **** 		break;
 1266              		.loc 1 358 0
 1267 0036 0920     		movs	r0, #9
 1268              	.LVL116:
 357:Src/FUSB302.c **** 		rd = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_1_5_RD_THRESH_MV);
 1269              		.loc 1 357 0
 1270 0038 2625     		movs	r5, #38
 1271              	.LVL117:
 1272              	.L90:
 371:Src/FUSB302.c **** 	state[port].mdac_rd = rd;
 1273              		.loc 1 371 0
 1274 003a A200     		lsls	r2, r4, #2
 1275 003c 1219     		adds	r2, r2, r4
 1276 003e 9100     		lsls	r1, r2, #2
 1277 0040 084B     		ldr	r3, .L92
 1278 0042 5B18     		adds	r3, r3, r1
 1279 0044 1D74     		strb	r5, [r3, #16]
 372:Src/FUSB302.c **** 	rv = tcpc_write(port, TCPC_REG_CONTROL0, reg);
 1280              		.loc 1 372 0
 1281 0046 5874     		strb	r0, [r3, #17]
 373:Src/FUSB302.c **** 	
 1282              		.loc 1 373 0
 1283 0048 019A     		ldr	r2, [sp, #4]
 1284 004a 0621     		movs	r1, #6
 1285 004c 2000     		movs	r0, r4
ARM GAS  /tmp/ccUYTGX7.s 			page 44


 1286              	.LVL118:
 1287 004e FFF7FEFF 		bl	tcpc_write
 1288              	.LVL119:
 1289              	.L85:
 378:Src/FUSB302.c **** 
 1290              		.loc 1 378 0
 1291 0052 03B0     		add	sp, sp, #12
 1292              		@ sp needed
 1293              	.LVL120:
 1294 0054 30BD     		pop	{r4, r5, pc}
 1295              	.LVL121:
 1296              	.L89:
 361:Src/FUSB302.c **** 		vnc = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_3_0_VNC_MV);
 1297              		.loc 1 361 0
 1298 0056 0C22     		movs	r2, #12
 1299 0058 1343     		orrs	r3, r2
 1300 005a 0193     		str	r3, [sp, #4]
 1301              	.LVL122:
 363:Src/FUSB302.c **** 		break;
 1302              		.loc 1 363 0
 1303 005c 1320     		movs	r0, #19
 1304              	.LVL123:
 362:Src/FUSB302.c **** 		rd = TCPC_REG_MEASURE_MDAC_MV(PD_SRC_3_0_RD_THRESH_MV);
 1305              		.loc 1 362 0
 1306 005e 3D25     		movs	r5, #61
 1307              	.LVL124:
 364:Src/FUSB302.c **** 	case TYPEC_RP_USB:
 1308              		.loc 1 364 0
 1309 0060 EBE7     		b	.L90
 1310              	.L93:
 1311 0062 C046     		.align	2
 1312              	.L92:
 1313 0064 00000000 		.word	.LANCHOR0
 1314              		.cfi_endproc
 1315              	.LFE28:
 1317              		.section	.text.fusb302_tcpm_init,"ax",%progbits
 1318              		.align	1
 1319              		.syntax unified
 1320              		.code	16
 1321              		.thumb_func
 1322              		.fpu softvfp
 1324              	fusb302_tcpm_init:
 1325              	.LFB29:
 381:Src/FUSB302.c **** 	int reg;
 1326              		.loc 1 381 0
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 8
 1329              		@ frame_needed = 0, uses_anonymous_args = 0
 1330              	.LVL125:
 1331 0000 30B5     		push	{r4, r5, lr}
 1332              	.LCFI22:
 1333              		.cfi_def_cfa_offset 12
 1334              		.cfi_offset 4, -12
 1335              		.cfi_offset 5, -8
 1336              		.cfi_offset 14, -4
 1337 0002 83B0     		sub	sp, sp, #12
 1338              	.LCFI23:
ARM GAS  /tmp/ccUYTGX7.s 			page 45


 1339              		.cfi_def_cfa_offset 24
 1340 0004 0400     		movs	r4, r0
 385:Src/FUSB302.c **** 
 1341              		.loc 1 385 0
 1342 0006 2B4B     		ldr	r3, .L95
 1343 0008 8200     		lsls	r2, r0, #2
 1344 000a 1018     		adds	r0, r2, r0
 1345              	.LVL126:
 1346 000c 8100     		lsls	r1, r0, #2
 1347 000e 0120     		movs	r0, #1
 1348 0010 4042     		rsbs	r0, r0, #0
 1349 0012 C850     		str	r0, [r1, r3]
 388:Src/FUSB302.c **** 	/* set the voltage threshold for Rd vs Ra detection */
 1350              		.loc 1 388 0
 1351 0014 5B18     		adds	r3, r3, r1
 1352 0016 2622     		movs	r2, #38
 1353 0018 1A74     		strb	r2, [r3, #16]
 390:Src/FUSB302.c **** 
 1354              		.loc 1 390 0
 1355 001a 223A     		subs	r2, r2, #34
 1356 001c 5A74     		strb	r2, [r3, #17]
 397:Src/FUSB302.c **** 
 1357              		.loc 1 397 0
 1358 001e 033A     		subs	r2, r2, #3
 1359 0020 0C21     		movs	r1, #12
 1360 0022 2000     		movs	r0, r4
 1361 0024 FFF7FEFF 		bl	tcpc_write
 1362              	.LVL127:
 400:Src/FUSB302.c **** 	reg |= TCPC_REG_CONTROL3_AUTO_RETRY;
 1363              		.loc 1 400 0
 1364 0028 01AA     		add	r2, sp, #4
 1365 002a 0921     		movs	r1, #9
 1366 002c 2000     		movs	r0, r4
 1367 002e FFF7FEFF 		bl	tcpc_read
 1368              	.LVL128:
 401:Src/FUSB302.c **** 	reg |= (PD_RETRY_COUNT & 0x3) <<
 1369              		.loc 1 401 0
 1370 0032 0122     		movs	r2, #1
 1371 0034 019B     		ldr	r3, [sp, #4]
 1372 0036 1A43     		orrs	r2, r3
 402:Src/FUSB302.c **** 		TCPC_REG_CONTROL3_N_RETRIES_POS;
 1373              		.loc 1 402 0
 1374 0038 0623     		movs	r3, #6
 1375 003a 1A43     		orrs	r2, r3
 1376 003c 0192     		str	r2, [sp, #4]
 404:Src/FUSB302.c **** 
 1377              		.loc 1 404 0
 1378 003e 0921     		movs	r1, #9
 1379 0040 2000     		movs	r0, r4
 1380 0042 FFF7FEFF 		bl	tcpc_write
 1381              	.LVL129:
 415:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_MASK, reg);
 1382              		.loc 1 415 0
 1383 0046 E423     		movs	r3, #228
 1384 0048 0193     		str	r3, [sp, #4]
 416:Src/FUSB302.c **** 
 1385              		.loc 1 416 0
ARM GAS  /tmp/ccUYTGX7.s 			page 46


 1386 004a E422     		movs	r2, #228
 1387 004c 0A21     		movs	r1, #10
 1388 004e 2000     		movs	r0, r4
 1389 0050 FFF7FEFF 		bl	tcpc_write
 1390              	.LVL130:
 426:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_MASKA, reg);
 1391              		.loc 1 426 0
 1392 0054 E223     		movs	r3, #226
 1393 0056 0193     		str	r3, [sp, #4]
 427:Src/FUSB302.c **** 
 1394              		.loc 1 427 0
 1395 0058 E222     		movs	r2, #226
 1396 005a 0E21     		movs	r1, #14
 1397 005c 2000     		movs	r0, r4
 1398 005e FFF7FEFF 		bl	tcpc_write
 1399              	.LVL131:
 431:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_MASKB, reg);
 1400              		.loc 1 431 0
 1401 0062 FE23     		movs	r3, #254
 1402 0064 0193     		str	r3, [sp, #4]
 432:Src/FUSB302.c **** 
 1403              		.loc 1 432 0
 1404 0066 FE22     		movs	r2, #254
 1405 0068 0F21     		movs	r1, #15
 1406 006a 2000     		movs	r0, r4
 1407 006c FFF7FEFF 		bl	tcpc_write
 1408              	.LVL132:
 435:Src/FUSB302.c **** 	reg &= ~TCPC_REG_CONTROL0_INT_MASK;
 1409              		.loc 1 435 0
 1410 0070 01AA     		add	r2, sp, #4
 1411 0072 0621     		movs	r1, #6
 1412 0074 2000     		movs	r0, r4
 1413 0076 FFF7FEFF 		bl	tcpc_read
 1414              	.LVL133:
 436:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_CONTROL0, reg);
 1415              		.loc 1 436 0
 1416 007a 2023     		movs	r3, #32
 1417 007c 019A     		ldr	r2, [sp, #4]
 1418 007e 9A43     		bics	r2, r3
 1419 0080 0192     		str	r2, [sp, #4]
 437:Src/FUSB302.c **** 
 1420              		.loc 1 437 0
 1421 0082 0621     		movs	r1, #6
 1422 0084 2000     		movs	r0, r4
 1423 0086 FFF7FEFF 		bl	tcpc_write
 1424              	.LVL134:
 1425              	.LBB10:
 1426              	.LBB11:
 1427              		.loc 2 76 0
 1428 008a 2201     		lsls	r2, r4, #4
 1429 008c 0A4B     		ldr	r3, .L95+4
 1430 008e 9B18     		adds	r3, r3, r2
 1431 0090 9D68     		ldr	r5, [r3, #8]
 1432 0092 0021     		movs	r1, #0
 1433 0094 2000     		movs	r0, r4
 1434 0096 AB69     		ldr	r3, [r5, #24]
 1435 0098 9847     		blx	r3
ARM GAS  /tmp/ccUYTGX7.s 			page 47


 1436              	.LVL135:
 1437              	.LBE11:
 1438              	.LBE10:
 1439              	.LBB12:
 1440              	.LBB13:
  77:Inc/tcpm.h    **** }
  78:Inc/tcpm.h    **** 
  79:Inc/tcpm.h    **** static inline int tcpm_set_vconn(int port, int enable)
  80:Inc/tcpm.h    **** {
  81:Inc/tcpm.h    **** 	return tcpc_config[port].drv->set_vconn(port, enable);
 1441              		.loc 2 81 0
 1442 009a EB69     		ldr	r3, [r5, #28]
 1443 009c 0021     		movs	r1, #0
 1444 009e 2000     		movs	r0, r4
 1445 00a0 9847     		blx	r3
 1446              	.LVL136:
 1447              	.LBE13:
 1448              	.LBE12:
 445:Src/FUSB302.c **** 	
 1449              		.loc 1 445 0
 1450 00a2 0F22     		movs	r2, #15
 1451 00a4 0B21     		movs	r1, #11
 1452 00a6 2000     		movs	r0, r4
 1453 00a8 FFF7FEFF 		bl	tcpc_write
 1454              	.LVL137:
 450:Src/FUSB302.c **** 
 1455              		.loc 1 450 0
 1456 00ac 0020     		movs	r0, #0
 1457 00ae 03B0     		add	sp, sp, #12
 1458              		@ sp needed
 1459              	.LVL138:
 1460 00b0 30BD     		pop	{r4, r5, pc}
 1461              	.L96:
 1462 00b2 C046     		.align	2
 1463              	.L95:
 1464 00b4 00000000 		.word	.LANCHOR0
 1465 00b8 00000000 		.word	tcpc_config
 1466              		.cfi_endproc
 1467              	.LFE29:
 1469              		.section	.text.fusb302_send_message,"ax",%progbits
 1470              		.align	1
 1471              		.syntax unified
 1472              		.code	16
 1473              		.thumb_func
 1474              		.fpu softvfp
 1476              	fusb302_send_message:
 1477              	.LFB27:
 288:Src/FUSB302.c **** 	int rv;
 1478              		.loc 1 288 0
 1479              		.cfi_startproc
 1480              		@ args = 4, pretend = 0, frame = 8
 1481              		@ frame_needed = 0, uses_anonymous_args = 0
 1482              	.LVL139:
 1483 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1484              	.LCFI24:
 1485              		.cfi_def_cfa_offset 20
 1486              		.cfi_offset 4, -20
ARM GAS  /tmp/ccUYTGX7.s 			page 48


 1487              		.cfi_offset 5, -16
 1488              		.cfi_offset 6, -12
 1489              		.cfi_offset 7, -8
 1490              		.cfi_offset 14, -4
 1491 0002 85B0     		sub	sp, sp, #20
 1492              	.LCFI25:
 1493              		.cfi_def_cfa_offset 40
 1494 0004 0390     		str	r0, [sp, #12]
 1495 0006 0D00     		movs	r5, r1
 1496 0008 1600     		movs	r6, r2
 1497 000a 1F00     		movs	r7, r3
 1498 000c 0A9C     		ldr	r4, [sp, #40]
 293:Src/FUSB302.c **** 
 1499              		.loc 1 293 0
 1500 000e 0800     		movs	r0, r1
 1501              	.LVL140:
 1502 0010 FFF7FEFF 		bl	get_num_bytes
 1503              	.LVL141:
 301:Src/FUSB302.c **** 
 1504              		.loc 1 301 0
 1505 0014 1F23     		movs	r3, #31
 1506 0016 0340     		ands	r3, r0
 1507 0018 8022     		movs	r2, #128
 1508 001a 1343     		orrs	r3, r2
 1509              	.LVL142:
 303:Src/FUSB302.c **** 
 1510              		.loc 1 303 0
 1511 001c 611C     		adds	r1, r4, #1
 1512              	.LVL143:
 1513 001e 3B55     		strb	r3, [r7, r4]
 1514              	.LVL144:
 307:Src/FUSB302.c **** 
 1515              		.loc 1 307 0
 1516 0020 A21C     		adds	r2, r4, #2
 1517              	.LVL145:
 1518 0022 7D54     		strb	r5, [r7, r1]
 309:Src/FUSB302.c **** 	buf[buf_pos++] = reg & 0xFF;
 1519              		.loc 1 309 0
 1520 0024 2B12     		asrs	r3, r5, #8
 1521              	.LVL146:
 310:Src/FUSB302.c **** 
 1522              		.loc 1 310 0
 1523 0026 0334     		adds	r4, r4, #3
 1524              	.LVL147:
 1525 0028 BB54     		strb	r3, [r7, r2]
 313:Src/FUSB302.c **** 
 1526              		.loc 1 313 0
 1527 002a 851E     		subs	r5, r0, #2
 1528              	.LVL148:
 316:Src/FUSB302.c **** 	buf_pos += len;
 1529              		.loc 1 316 0
 1530 002c 3819     		adds	r0, r7, r4
 1531 002e 2A00     		movs	r2, r5
 1532 0030 3100     		movs	r1, r6
 1533 0032 FFF7FEFF 		bl	memcpy
 1534              	.LVL149:
 317:Src/FUSB302.c **** 
ARM GAS  /tmp/ccUYTGX7.s 			page 49


 1535              		.loc 1 317 0
 1536 0036 6419     		adds	r4, r4, r5
 1537              	.LVL150:
 320:Src/FUSB302.c **** 
 1538              		.loc 1 320 0
 1539 0038 631C     		adds	r3, r4, #1
 1540              	.LVL151:
 1541 003a FF21     		movs	r1, #255
 1542 003c 3955     		strb	r1, [r7, r4]
 323:Src/FUSB302.c **** 
 1543              		.loc 1 323 0
 1544 003e A11C     		adds	r1, r4, #2
 1545              	.LVL152:
 1546 0040 1420     		movs	r0, #20
 1547 0042 F854     		strb	r0, [r7, r3]
 326:Src/FUSB302.c **** 
 1548              		.loc 1 326 0
 1549 0044 E31C     		adds	r3, r4, #3
 1550              	.LVL153:
 1551 0046 EA30     		adds	r0, r0, #234
 1552 0048 7854     		strb	r0, [r7, r1]
 1553              	.LVL154:
 330:Src/FUSB302.c **** 
 1554              		.loc 1 330 0
 1555 004a 221D     		adds	r2, r4, #4
 1556              	.LVL155:
 1557 004c A121     		movs	r1, #161
 1558 004e F954     		strb	r1, [r7, r3]
 334:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 1559              		.loc 1 334 0
 1560 0050 0323     		movs	r3, #3
 1561 0052 0193     		str	r3, [sp, #4]
 1562 0054 0023     		movs	r3, #0
 1563 0056 0093     		str	r3, [sp]
 1564 0058 3900     		movs	r1, r7
 1565 005a 0398     		ldr	r0, [sp, #12]
 1566 005c FFF7FEFF 		bl	tcpc_xfer
 1567              	.LVL156:
 338:Src/FUSB302.c **** 
 1568              		.loc 1 338 0
 1569 0060 05B0     		add	sp, sp, #20
 1570              		@ sp needed
 1571              	.LVL157:
 1572              	.LVL158:
 1573              	.LVL159:
 1574              	.LVL160:
 1575 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 1576              		.cfi_endproc
 1577              	.LFE27:
 1579              		.section	.text.fusb302_tcpm_transmit,"ax",%progbits
 1580              		.align	1
 1581              		.syntax unified
 1582              		.code	16
 1583              		.thumb_func
 1584              		.fpu softvfp
 1586              	fusb302_tcpm_transmit:
 1587              	.LFB39:
ARM GAS  /tmp/ccUYTGX7.s 			page 50


 806:Src/FUSB302.c **** 	/*
 1588              		.loc 1 806 0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 48
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
 1592              	.LVL161:
 1593 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1594              	.LCFI26:
 1595              		.cfi_def_cfa_offset 20
 1596              		.cfi_offset 4, -20
 1597              		.cfi_offset 5, -16
 1598              		.cfi_offset 6, -12
 1599              		.cfi_offset 7, -8
 1600              		.cfi_offset 14, -4
 1601 0002 8FB0     		sub	sp, sp, #60
 1602              	.LCFI27:
 1603              		.cfi_def_cfa_offset 80
 1604 0004 0400     		movs	r4, r0
 1605 0006 0D00     		movs	r5, r1
 1606 0008 1600     		movs	r6, r2
 1607 000a 1F00     		movs	r7, r3
 1608              	.LVL162:
 827:Src/FUSB302.c **** 
 1609              		.loc 1 827 0
 1610 000c FFF7FEFF 		bl	fusb302_flush_tx_fifo
 1611              	.LVL163:
 829:Src/FUSB302.c **** 	case TCPC_TX_SOP:
 1612              		.loc 1 829 0
 1613 0010 052D     		cmp	r5, #5
 1614 0012 17D0     		beq	.L100
 1615 0014 072D     		cmp	r5, #7
 1616 0016 24D0     		beq	.L101
 1617 0018 002D     		cmp	r5, #0
 1618 001a 01D0     		beq	.L105
 873:Src/FUSB302.c **** 	}
 1619              		.loc 1 873 0
 1620 001c 0220     		movs	r0, #2
 1621 001e 0FE0     		b	.L98
 1622              	.L105:
 1623              	.LVL164:
 833:Src/FUSB302.c **** 
 1624              		.loc 1 833 0
 1625 0020 04AB     		add	r3, sp, #16
 1626 0022 4322     		movs	r2, #67
 1627 0024 1A70     		strb	r2, [r3]
 1628              	.LVL165:
 836:Src/FUSB302.c **** 		buf[buf_pos++] = fusb302_TKN_SYNC1;
 1629              		.loc 1 836 0
 1630 0026 313A     		subs	r2, r2, #49
 1631 0028 5A70     		strb	r2, [r3, #1]
 1632              	.LVL166:
 837:Src/FUSB302.c **** 		buf[buf_pos++] = fusb302_TKN_SYNC1;
 1633              		.loc 1 837 0
 1634 002a 9A70     		strb	r2, [r3, #2]
 1635              	.LVL167:
 838:Src/FUSB302.c **** 		buf[buf_pos++] = fusb302_TKN_SYNC2;
 1636              		.loc 1 838 0
ARM GAS  /tmp/ccUYTGX7.s 			page 51


 1637 002c DA70     		strb	r2, [r3, #3]
 1638              	.LVL168:
 839:Src/FUSB302.c **** 
 1639              		.loc 1 839 0
 1640 002e 0132     		adds	r2, r2, #1
 1641 0030 1A71     		strb	r2, [r3, #4]
 841:Src/FUSB302.c **** 	case TCPC_TX_HARD_RESET:
 1642              		.loc 1 841 0
 1643 0032 0E3A     		subs	r2, r2, #14
 1644 0034 0092     		str	r2, [sp]
 1645 0036 3A00     		movs	r2, r7
 1646 0038 3100     		movs	r1, r6
 1647 003a 2000     		movs	r0, r4
 1648 003c FFF7FEFF 		bl	fusb302_send_message
 1649              	.LVL169:
 1650              	.L98:
 877:Src/FUSB302.c **** 
 1651              		.loc 1 877 0
 1652 0040 0FB0     		add	sp, sp, #60
 1653              		@ sp needed
 1654              	.LVL170:
 1655              	.LVL171:
 1656 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1657              	.LVL172:
 1658              	.L100:
 845:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL3_SEND_HARDRESET;
 1659              		.loc 1 845 0
 1660 0044 03AA     		add	r2, sp, #12
 1661 0046 0921     		movs	r1, #9
 1662 0048 2000     		movs	r0, r4
 1663 004a FFF7FEFF 		bl	tcpc_read
 1664              	.LVL173:
 846:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL3, reg);
 1665              		.loc 1 846 0
 1666 004e 4022     		movs	r2, #64
 1667 0050 039B     		ldr	r3, [sp, #12]
 1668 0052 1A43     		orrs	r2, r3
 1669 0054 0392     		str	r2, [sp, #12]
 847:Src/FUSB302.c **** 		//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 1670              		.loc 1 847 0
 1671 0056 0921     		movs	r1, #9
 1672 0058 2000     		movs	r0, r4
 1673 005a FFF7FEFF 		bl	tcpc_write
 1674              	.LVL174:
 876:Src/FUSB302.c **** }
 1675              		.loc 1 876 0
 1676 005e 0020     		movs	r0, #0
 850:Src/FUSB302.c **** 	case TCPC_TX_BIST_MODE_2:
 1677              		.loc 1 850 0
 1678 0060 EEE7     		b	.L98
 1679              	.L101:
 854:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL1_BIST_MODE2;
 1680              		.loc 1 854 0
 1681 0062 03AA     		add	r2, sp, #12
 1682 0064 0721     		movs	r1, #7
 1683 0066 2000     		movs	r0, r4
 1684 0068 FFF7FEFF 		bl	tcpc_read
ARM GAS  /tmp/ccUYTGX7.s 			page 52


 1685              	.LVL175:
 855:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL1, reg);
 1686              		.loc 1 855 0
 1687 006c 1025     		movs	r5, #16
 1688 006e 039A     		ldr	r2, [sp, #12]
 1689 0070 2A43     		orrs	r2, r5
 1690 0072 0392     		str	r2, [sp, #12]
 856:Src/FUSB302.c **** 
 1691              		.loc 1 856 0
 1692 0074 0721     		movs	r1, #7
 1693 0076 2000     		movs	r0, r4
 1694 0078 FFF7FEFF 		bl	tcpc_write
 1695              	.LVL176:
 858:Src/FUSB302.c **** 		reg |= TCPC_REG_CONTROL0_TX_START;
 1696              		.loc 1 858 0
 1697 007c 03AA     		add	r2, sp, #12
 1698 007e 0621     		movs	r1, #6
 1699 0080 2000     		movs	r0, r4
 1700 0082 FFF7FEFF 		bl	tcpc_read
 1701              	.LVL177:
 859:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL0, reg);
 1702              		.loc 1 859 0
 1703 0086 0122     		movs	r2, #1
 1704 0088 039B     		ldr	r3, [sp, #12]
 1705 008a 1A43     		orrs	r2, r3
 1706 008c 0392     		str	r2, [sp, #12]
 860:Src/FUSB302.c **** 
 1707              		.loc 1 860 0
 1708 008e 0621     		movs	r1, #6
 1709 0090 2000     		movs	r0, r4
 1710 0092 FFF7FEFF 		bl	tcpc_write
 1711              	.LVL178:
 865:Src/FUSB302.c **** 		reg &= ~TCPC_REG_CONTROL1_BIST_MODE2;
 1712              		.loc 1 865 0
 1713 0096 03AA     		add	r2, sp, #12
 1714 0098 0721     		movs	r1, #7
 1715 009a 2000     		movs	r0, r4
 1716 009c FFF7FEFF 		bl	tcpc_read
 1717              	.LVL179:
 866:Src/FUSB302.c **** 		tcpc_write(port, TCPC_REG_CONTROL1, reg);
 1718              		.loc 1 866 0
 1719 00a0 039A     		ldr	r2, [sp, #12]
 1720 00a2 AA43     		bics	r2, r5
 1721 00a4 0392     		str	r2, [sp, #12]
 867:Src/FUSB302.c **** 		
 1722              		.loc 1 867 0
 1723 00a6 0721     		movs	r1, #7
 1724 00a8 2000     		movs	r0, r4
 1725 00aa FFF7FEFF 		bl	tcpc_write
 1726              	.LVL180:
 876:Src/FUSB302.c **** }
 1727              		.loc 1 876 0
 1728 00ae 0020     		movs	r0, #0
 871:Src/FUSB302.c **** 	default:
 1729              		.loc 1 871 0
 1730 00b0 C6E7     		b	.L98
 1731              		.cfi_endproc
ARM GAS  /tmp/ccUYTGX7.s 			page 53


 1732              	.LFE39:
 1734              		.section	.text.fusb302_tcpm_get_message,"ax",%progbits
 1735              		.align	1
 1736              		.syntax unified
 1737              		.code	16
 1738              		.thumb_func
 1739              		.fpu softvfp
 1741              	fusb302_tcpm_get_message:
 1742              	.LFB38:
 732:Src/FUSB302.c **** 	/*
 1743              		.loc 1 732 0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 40
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              	.LVL181:
 1748 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1749              	.LCFI28:
 1750              		.cfi_def_cfa_offset 20
 1751              		.cfi_offset 4, -20
 1752              		.cfi_offset 5, -16
 1753              		.cfi_offset 6, -12
 1754              		.cfi_offset 7, -8
 1755              		.cfi_offset 14, -4
 1756 0002 8DB0     		sub	sp, sp, #52
 1757              	.LCFI29:
 1758              		.cfi_def_cfa_offset 72
 1759 0004 0290     		str	r0, [sp, #8]
 1760 0006 0391     		str	r1, [sp, #12]
 1761 0008 1500     		movs	r5, r2
 745:Src/FUSB302.c **** 		return EC_ERROR_UNKNOWN;
 1762              		.loc 1 745 0
 1763 000a FFF7FEFF 		bl	fusb302_rx_fifo_is_empty
 1764              	.LVL182:
 1765 000e 0028     		cmp	r0, #0
 1766 0010 4AD1     		bne	.L111
 1767              	.L109:
 750:Src/FUSB302.c **** 		//i2c_master_lock(tcpc_config[port].i2c_host_port);
 1768              		.loc 1 750 0
 1769 0012 04AC     		add	r4, sp, #16
 1770 0014 4323     		movs	r3, #67
 1771 0016 2370     		strb	r3, [r4]
 757:Src/FUSB302.c **** 
 1772              		.loc 1 757 0
 1773 0018 0127     		movs	r7, #1
 1774 001a 0197     		str	r7, [sp, #4]
 1775 001c 0023     		movs	r3, #0
 1776 001e 0093     		str	r3, [sp]
 1777 0020 0122     		movs	r2, #1
 1778 0022 2100     		movs	r1, r4
 1779 0024 0298     		ldr	r0, [sp, #8]
 1780 0026 FFF7FEFF 		bl	tcpc_xfer
 1781              	.LVL183:
 1782 002a 0600     		movs	r6, r0
 1783              	.LVL184:
 766:Src/FUSB302.c **** 
 1784              		.loc 1 766 0
 1785 002c 0197     		str	r7, [sp, #4]
ARM GAS  /tmp/ccUYTGX7.s 			page 54


 1786 002e 0323     		movs	r3, #3
 1787 0030 0093     		str	r3, [sp]
 1788 0032 2300     		movs	r3, r4
 1789 0034 0022     		movs	r2, #0
 1790 0036 0021     		movs	r1, #0
 1791 0038 0298     		ldr	r0, [sp, #8]
 1792              	.LVL185:
 1793 003a FFF7FEFF 		bl	tcpc_xfer
 1794              	.LVL186:
 1795 003e 0643     		orrs	r6, r0
 1796              	.LVL187:
 1797 0040 3700     		movs	r7, r6
 1798              	.LVL188:
 769:Src/FUSB302.c **** 		*head |= ((buf[2] << 8) & 0xFF00);
 1799              		.loc 1 769 0
 1800 0042 6378     		ldrb	r3, [r4, #1]
 770:Src/FUSB302.c **** 
 1801              		.loc 1 770 0
 1802 0044 A078     		ldrb	r0, [r4, #2]
 1803 0046 0002     		lsls	r0, r0, #8
 1804 0048 1843     		orrs	r0, r3
 1805 004a 2860     		str	r0, [r5]
 773:Src/FUSB302.c **** 
 1806              		.loc 1 773 0
 1807 004c 80B2     		uxth	r0, r0
 1808 004e FFF7FEFF 		bl	get_num_bytes
 1809              	.LVL189:
 1810 0052 861E     		subs	r6, r0, #2
 1811              	.LVL190:
 780:Src/FUSB302.c **** 
 1812              		.loc 1 780 0
 1813 0054 0223     		movs	r3, #2
 1814 0056 0193     		str	r3, [sp, #4]
 1815 0058 0230     		adds	r0, r0, #2
 1816 005a 0090     		str	r0, [sp]
 1817 005c 2300     		movs	r3, r4
 1818 005e 0022     		movs	r2, #0
 1819 0060 0021     		movs	r1, #0
 1820 0062 029C     		ldr	r4, [sp, #8]
 1821 0064 2000     		movs	r0, r4
 1822 0066 FFF7FEFF 		bl	tcpc_xfer
 1823              	.LVL191:
 1824 006a 0743     		orrs	r7, r0
 1825              	.LVL192:
 784:Src/FUSB302.c **** 
 1826              		.loc 1 784 0
 1827 006c 0CD1     		bne	.L108
 783:Src/FUSB302.c **** 		 !fusb302_rx_fifo_is_empty(port));
 1828              		.loc 1 783 0
 1829 006e 2B68     		ldr	r3, [r5]
 1830 0070 0F22     		movs	r2, #15
 1831 0072 1A40     		ands	r2, r3
 1832 0074 012A     		cmp	r2, #1
 1833 0076 07D1     		bne	.L108
 783:Src/FUSB302.c **** 		 !fusb302_rx_fifo_is_empty(port));
 1834              		.loc 1 783 0 is_stmt 0 discriminator 1
 1835 0078 1B13     		asrs	r3, r3, #12
ARM GAS  /tmp/ccUYTGX7.s 			page 55


 1836 007a 5B07     		lsls	r3, r3, #29
 1837 007c 04D1     		bne	.L108
 784:Src/FUSB302.c **** 
 1838              		.loc 1 784 0 is_stmt 1 discriminator 2
 1839 007e 2000     		movs	r0, r4
 1840 0080 FFF7FEFF 		bl	fusb302_rx_fifo_is_empty
 1841              	.LVL193:
 783:Src/FUSB302.c **** 		 !fusb302_rx_fifo_is_empty(port));
 1842              		.loc 1 783 0 discriminator 2
 1843 0084 0028     		cmp	r0, #0
 1844 0086 C4D0     		beq	.L109
 1845              	.L108:
 786:Src/FUSB302.c **** 		/* Discard GoodCRC packets */
 1846              		.loc 1 786 0
 1847 0088 002F     		cmp	r7, #0
 1848 008a 0ED1     		bne	.L106
 788:Src/FUSB302.c **** 			rv = EC_ERROR_UNKNOWN;
 1849              		.loc 1 788 0
 1850 008c 2A68     		ldr	r2, [r5]
 1851 008e 0F23     		movs	r3, #15
 1852 0090 1340     		ands	r3, r2
 1853 0092 012B     		cmp	r3, #1
 1854 0094 02D1     		bne	.L110
 788:Src/FUSB302.c **** 			rv = EC_ERROR_UNKNOWN;
 1855              		.loc 1 788 0 is_stmt 0 discriminator 1
 1856 0096 1213     		asrs	r2, r2, #12
 1857 0098 5207     		lsls	r2, r2, #29
 1858 009a 09D0     		beq	.L112
 1859              	.L110:
 1860              	.LBB14:
 791:Src/FUSB302.c **** 	}
 1861              		.loc 1 791 0 is_stmt 1
 1862 009c 3200     		movs	r2, r6
 1863 009e 04A9     		add	r1, sp, #16
 1864 00a0 0398     		ldr	r0, [sp, #12]
 1865 00a2 FFF7FEFF 		bl	memcpy
 1866              	.LVL194:
 1867 00a6 00E0     		b	.L106
 1868              	.LVL195:
 1869              	.L111:
 1870              	.LBE14:
 746:Src/FUSB302.c **** 
 1871              		.loc 1 746 0
 1872 00a8 0127     		movs	r7, #1
 1873              	.L106:
 802:Src/FUSB302.c **** 
 1874              		.loc 1 802 0
 1875 00aa 3800     		movs	r0, r7
 1876 00ac 0DB0     		add	sp, sp, #52
 1877              		@ sp needed
 1878              	.LVL196:
 1879 00ae F0BD     		pop	{r4, r5, r6, r7, pc}
 1880              	.LVL197:
 1881              	.L112:
 789:Src/FUSB302.c **** 		else
 1882              		.loc 1 789 0
 1883 00b0 1F00     		movs	r7, r3
ARM GAS  /tmp/ccUYTGX7.s 			page 56


 1884              	.LVL198:
 1885 00b2 FAE7     		b	.L106
 1886              		.cfi_endproc
 1887              	.LFE38:
 1889              		.section	.text.measure_cc_pin_source,"ax",%progbits
 1890              		.align	1
 1891              		.syntax unified
 1892              		.code	16
 1893              		.thumb_func
 1894              		.fpu softvfp
 1896              	measure_cc_pin_source:
 1897              	.LFB23:
 105:Src/FUSB302.c **** 	int switches0_reg;
 1898              		.loc 1 105 0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 8
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902              	.LVL199:
 1903 0000 70B5     		push	{r4, r5, r6, lr}
 1904              	.LCFI30:
 1905              		.cfi_def_cfa_offset 16
 1906              		.cfi_offset 4, -16
 1907              		.cfi_offset 5, -12
 1908              		.cfi_offset 6, -8
 1909              		.cfi_offset 14, -4
 1910 0002 82B0     		sub	sp, sp, #8
 1911              	.LCFI31:
 1912              		.cfi_def_cfa_offset 24
 1913 0004 0400     		movs	r4, r0
 1914 0006 0D00     		movs	r5, r1
 113:Src/FUSB302.c **** 	/* Save current value */
 1915              		.loc 1 113 0
 1916 0008 01AA     		add	r2, sp, #4
 1917 000a 0221     		movs	r1, #2
 1918              	.LVL200:
 1919 000c FFF7FEFF 		bl	tcpc_read
 1920              	.LVL201:
 115:Src/FUSB302.c **** 	/* Clear pull-up register settings and measure bits */
 1921              		.loc 1 115 0
 1922 0010 019E     		ldr	r6, [sp, #4]
 1923              	.LVL202:
 117:Src/FUSB302.c **** 	/* Set desired pullup register bit */
 1924              		.loc 1 117 0
 1925 0012 0C23     		movs	r3, #12
 1926 0014 3200     		movs	r2, r6
 1927 0016 9A43     		bics	r2, r3
 1928 0018 1300     		movs	r3, r2
 119:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_CC1_PU_EN;
 1929              		.loc 1 119 0
 1930 001a 042D     		cmp	r5, #4
 1931 001c 27D0     		beq	.L119
 122:Src/FUSB302.c **** 	/* Set CC measure bit */
 1932              		.loc 1 122 0
 1933 001e 8022     		movs	r2, #128
 1934 0020 1343     		orrs	r3, r2
 1935 0022 0193     		str	r3, [sp, #4]
 1936              	.L115:
ARM GAS  /tmp/ccUYTGX7.s 			page 57


 124:Src/FUSB302.c **** 
 1937              		.loc 1 124 0
 1938 0024 019A     		ldr	r2, [sp, #4]
 1939 0026 2A43     		orrs	r2, r5
 1940 0028 0192     		str	r2, [sp, #4]
 127:Src/FUSB302.c **** 
 1941              		.loc 1 127 0
 1942 002a 0221     		movs	r1, #2
 1943 002c 2000     		movs	r0, r4
 1944 002e FFF7FEFF 		bl	tcpc_write
 1945              	.LVL203:
 130:Src/FUSB302.c **** 
 1946              		.loc 1 130 0
 1947 0032 A300     		lsls	r3, r4, #2
 1948 0034 1B19     		adds	r3, r3, r4
 1949 0036 9A00     		lsls	r2, r3, #2
 1950 0038 1B4B     		ldr	r3, .L122
 1951 003a 9B18     		adds	r3, r3, r2
 1952 003c 1A7C     		ldrb	r2, [r3, #16]
 1953 003e 0421     		movs	r1, #4
 1954 0040 2000     		movs	r0, r4
 1955 0042 FFF7FEFF 		bl	tcpc_write
 1956              	.LVL204:
 133:Src/FUSB302.c **** 
 1957              		.loc 1 133 0
 1958 0046 0120     		movs	r0, #1
 1959 0048 FFF7FEFF 		bl	osDelay
 1960              	.LVL205:
 136:Src/FUSB302.c **** 
 1961              		.loc 1 136 0
 1962 004c 01AA     		add	r2, sp, #4
 1963 004e 4021     		movs	r1, #64
 1964 0050 2000     		movs	r0, r4
 1965 0052 FFF7FEFF 		bl	tcpc_read
 1966              	.LVL206:
 142:Src/FUSB302.c **** 		/* Set MDAC for Rd vs Ra comparison */
 1967              		.loc 1 142 0
 1968 0056 019B     		ldr	r3, [sp, #4]
 1969 0058 9B06     		lsls	r3, r3, #26
 1970 005a 0CD5     		bpl	.L120
 139:Src/FUSB302.c **** 
 1971              		.loc 1 139 0
 1972 005c 0025     		movs	r5, #0
 1973              	.LVL207:
 1974              	.L116:
 157:Src/FUSB302.c **** 	
 1975              		.loc 1 157 0
 1976 005e 3200     		movs	r2, r6
 1977 0060 0221     		movs	r1, #2
 1978 0062 2000     		movs	r0, r4
 1979 0064 FFF7FEFF 		bl	tcpc_write
 1980              	.LVL208:
 162:Src/FUSB302.c **** 
 1981              		.loc 1 162 0
 1982 0068 2800     		movs	r0, r5
 1983 006a 02B0     		add	sp, sp, #8
 1984              		@ sp needed
ARM GAS  /tmp/ccUYTGX7.s 			page 58


 1985              	.LVL209:
 1986              	.LVL210:
 1987              	.LVL211:
 1988 006c 70BD     		pop	{r4, r5, r6, pc}
 1989              	.LVL212:
 1990              	.L119:
 120:Src/FUSB302.c **** 	else
 1991              		.loc 1 120 0
 1992 006e 4022     		movs	r2, #64
 1993 0070 1343     		orrs	r3, r2
 1994 0072 0193     		str	r3, [sp, #4]
 1995 0074 D6E7     		b	.L115
 1996              	.LVL213:
 1997              	.L120:
 144:Src/FUSB302.c **** 
 1998              		.loc 1 144 0
 1999 0076 A300     		lsls	r3, r4, #2
 2000 0078 1B19     		adds	r3, r3, r4
 2001 007a 9A00     		lsls	r2, r3, #2
 2002 007c 0A4B     		ldr	r3, .L122
 2003 007e 9B18     		adds	r3, r3, r2
 2004 0080 5A7C     		ldrb	r2, [r3, #17]
 2005 0082 0421     		movs	r1, #4
 2006 0084 2000     		movs	r0, r4
 2007 0086 FFF7FEFF 		bl	tcpc_write
 2008              	.LVL214:
 147:Src/FUSB302.c **** 
 2009              		.loc 1 147 0
 2010 008a 0120     		movs	r0, #1
 2011 008c FFF7FEFF 		bl	osDelay
 2012              	.LVL215:
 150:Src/FUSB302.c **** 
 2013              		.loc 1 150 0
 2014 0090 01AA     		add	r2, sp, #4
 2015 0092 4021     		movs	r1, #64
 2016 0094 2000     		movs	r0, r4
 2017 0096 FFF7FEFF 		bl	tcpc_read
 2018              	.LVL216:
 153:Src/FUSB302.c **** 	}
 2019              		.loc 1 153 0
 2020 009a 019B     		ldr	r3, [sp, #4]
 2021 009c 9B06     		lsls	r3, r3, #26
 2022 009e 01D4     		bmi	.L121
 2023 00a0 0125     		movs	r5, #1
 2024              	.LVL217:
 2025 00a2 DCE7     		b	.L116
 2026              	.LVL218:
 2027              	.L121:
 2028 00a4 0225     		movs	r5, #2
 2029              	.LVL219:
 2030 00a6 DAE7     		b	.L116
 2031              	.L123:
 2032              		.align	2
 2033              	.L122:
 2034 00a8 00000000 		.word	.LANCHOR0
 2035              		.cfi_endproc
 2036              	.LFE23:
ARM GAS  /tmp/ccUYTGX7.s 			page 59


 2038              		.section	.text.detect_cc_pin_source_manual,"ax",%progbits
 2039              		.align	1
 2040              		.syntax unified
 2041              		.code	16
 2042              		.thumb_func
 2043              		.fpu softvfp
 2045              	detect_cc_pin_source_manual:
 2046              	.LFB24:
 166:Src/FUSB302.c **** 	int cc1_measure = TCPC_REG_SWITCHES0_MEAS_CC1;
 2047              		.loc 1 166 0
 2048              		.cfi_startproc
 2049              		@ args = 0, pretend = 0, frame = 0
 2050              		@ frame_needed = 0, uses_anonymous_args = 0
 2051              	.LVL220:
 2052 0000 70B5     		push	{r4, r5, r6, lr}
 2053              	.LCFI32:
 2054              		.cfi_def_cfa_offset 16
 2055              		.cfi_offset 4, -16
 2056              		.cfi_offset 5, -12
 2057              		.cfi_offset 6, -8
 2058              		.cfi_offset 14, -4
 2059 0002 0400     		movs	r4, r0
 2060 0004 0E00     		movs	r6, r1
 2061 0006 1500     		movs	r5, r2
 2062              	.LVL221:
 170:Src/FUSB302.c **** 		/* If VCONN enabled, measure cc_pin that matches polarity */
 2063              		.loc 1 170 0
 2064 0008 8300     		lsls	r3, r0, #2
 2065 000a 1B18     		adds	r3, r3, r0
 2066 000c 9A00     		lsls	r2, r3, #2
 2067              	.LVL222:
 2068 000e 0E4B     		ldr	r3, .L128
 2069 0010 9B18     		adds	r3, r3, r2
 2070 0012 5B68     		ldr	r3, [r3, #4]
 2071 0014 002B     		cmp	r3, #0
 2072 0016 0DD0     		beq	.L125
 172:Src/FUSB302.c **** 			*cc2_lvl = measure_cc_pin_source(port, cc2_measure);
 2073              		.loc 1 172 0
 2074 0018 0B4B     		ldr	r3, .L128
 2075 001a D358     		ldr	r3, [r2, r3]
 2076 001c 002B     		cmp	r3, #0
 2077 001e 04D0     		beq	.L126
 173:Src/FUSB302.c **** 		else
 2078              		.loc 1 173 0
 2079 0020 0821     		movs	r1, #8
 2080              	.LVL223:
 2081 0022 FFF7FEFF 		bl	measure_cc_pin_source
 2082              	.LVL224:
 2083 0026 2860     		str	r0, [r5]
 2084              	.L124:
 182:Src/FUSB302.c **** 
 2085              		.loc 1 182 0
 2086              		@ sp needed
 2087              	.LVL225:
 2088              	.LVL226:
 2089              	.LVL227:
 2090 0028 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccUYTGX7.s 			page 60


 2091              	.LVL228:
 2092              	.L126:
 175:Src/FUSB302.c **** 	} else {
 2093              		.loc 1 175 0
 2094 002a 0421     		movs	r1, #4
 2095              	.LVL229:
 2096 002c FFF7FEFF 		bl	measure_cc_pin_source
 2097              	.LVL230:
 2098 0030 3060     		str	r0, [r6]
 2099 0032 F9E7     		b	.L124
 2100              	.LVL231:
 2101              	.L125:
 178:Src/FUSB302.c **** 		*cc2_lvl = measure_cc_pin_source(port, cc2_measure);
 2102              		.loc 1 178 0
 2103 0034 0421     		movs	r1, #4
 2104              	.LVL232:
 2105 0036 FFF7FEFF 		bl	measure_cc_pin_source
 2106              	.LVL233:
 2107 003a 3060     		str	r0, [r6]
 179:Src/FUSB302.c **** 	}
 2108              		.loc 1 179 0
 2109 003c 0821     		movs	r1, #8
 2110 003e 2000     		movs	r0, r4
 2111 0040 FFF7FEFF 		bl	measure_cc_pin_source
 2112              	.LVL234:
 2113 0044 2860     		str	r0, [r5]
 182:Src/FUSB302.c **** 
 2114              		.loc 1 182 0
 2115 0046 EFE7     		b	.L124
 2116              	.L129:
 2117              		.align	2
 2118              	.L128:
 2119 0048 00000000 		.word	.LANCHOR0
 2120              		.cfi_endproc
 2121              	.LFE24:
 2123              		.section	.text.detect_cc_pin_sink,"ax",%progbits
 2124              		.align	1
 2125              		.syntax unified
 2126              		.code	16
 2127              		.thumb_func
 2128              		.fpu softvfp
 2130              	detect_cc_pin_sink:
 2131              	.LFB25:
 186:Src/FUSB302.c **** 	int reg;
 2132              		.loc 1 186 0
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 24
 2135              		@ frame_needed = 0, uses_anonymous_args = 0
 2136              	.LVL235:
 2137 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2138              	.LCFI33:
 2139              		.cfi_def_cfa_offset 20
 2140              		.cfi_offset 4, -20
 2141              		.cfi_offset 5, -16
 2142              		.cfi_offset 6, -12
 2143              		.cfi_offset 7, -8
 2144              		.cfi_offset 14, -4
ARM GAS  /tmp/ccUYTGX7.s 			page 61


 2145 0002 D646     		mov	lr, r10
 2146 0004 4F46     		mov	r7, r9
 2147 0006 4646     		mov	r6, r8
 2148 0008 C0B5     		push	{r6, r7, lr}
 2149              	.LCFI34:
 2150              		.cfi_def_cfa_offset 32
 2151              		.cfi_offset 8, -32
 2152              		.cfi_offset 9, -28
 2153              		.cfi_offset 10, -24
 2154 000a 86B0     		sub	sp, sp, #24
 2155              	.LCFI35:
 2156              		.cfi_def_cfa_offset 56
 2157 000c 0190     		str	r0, [sp, #4]
 2158 000e 8946     		mov	r9, r1
 2159 0010 9046     		mov	r8, r2
 198:Src/FUSB302.c **** 
 2160              		.loc 1 198 0
 2161 0012 05AA     		add	r2, sp, #20
 2162              	.LVL236:
 2163 0014 0221     		movs	r1, #2
 2164              	.LVL237:
 2165 0016 FFF7FEFF 		bl	tcpc_read
 2166              	.LVL238:
 201:Src/FUSB302.c **** 		orig_meas_cc1 = 1;
 2167              		.loc 1 201 0
 2168 001a 059A     		ldr	r2, [sp, #20]
 2169 001c 0426     		movs	r6, #4
 2170 001e 1640     		ands	r6, r2
 2171 0020 00D0     		beq	.L131
 202:Src/FUSB302.c **** 	else
 2172              		.loc 1 202 0
 2173 0022 0126     		movs	r6, #1
 2174              	.L131:
 2175              	.LVL239:
 206:Src/FUSB302.c **** 		orig_meas_cc2 = 1;
 2176              		.loc 1 206 0
 2177 0024 0825     		movs	r5, #8
 2178 0026 1540     		ands	r5, r2
 2179 0028 00D0     		beq	.L132
 207:Src/FUSB302.c **** 	else
 2180              		.loc 1 207 0
 2181 002a 0125     		movs	r5, #1
 2182              	.L132:
 2183              	.LVL240:
 213:Src/FUSB302.c **** 	reg |= TCPC_REG_SWITCHES0_MEAS_CC1;
 2184              		.loc 1 213 0
 2185 002c 0827     		movs	r7, #8
 2186 002e BA43     		bics	r2, r7
 214:Src/FUSB302.c **** 
 2187              		.loc 1 214 0
 2188 0030 0423     		movs	r3, #4
 2189 0032 9A46     		mov	r10, r3
 2190 0034 1A43     		orrs	r2, r3
 2191 0036 0592     		str	r2, [sp, #20]
 216:Src/FUSB302.c **** 
 2192              		.loc 1 216 0
 2193 0038 0221     		movs	r1, #2
ARM GAS  /tmp/ccUYTGX7.s 			page 62


 2194 003a 019C     		ldr	r4, [sp, #4]
 2195 003c 2000     		movs	r0, r4
 2196 003e FFF7FEFF 		bl	tcpc_write
 2197              	.LVL241:
 221:Src/FUSB302.c **** 
 2198              		.loc 1 221 0
 2199 0042 0120     		movs	r0, #1
 2200 0044 FFF7FEFF 		bl	osDelay
 2201              	.LVL242:
 223:Src/FUSB302.c **** 
 2202              		.loc 1 223 0
 2203 0048 04AA     		add	r2, sp, #16
 2204 004a 4021     		movs	r1, #64
 2205 004c 0194     		str	r4, [sp, #4]
 2206              	.LVL243:
 2207 004e 2000     		movs	r0, r4
 2208 0050 FFF7FEFF 		bl	tcpc_read
 2209              	.LVL244:
 226:Src/FUSB302.c **** 
 2210              		.loc 1 226 0
 2211 0054 0324     		movs	r4, #3
 2212 0056 049B     		ldr	r3, [sp, #16]
 2213 0058 2340     		ands	r3, r4
 2214 005a 0493     		str	r3, [sp, #16]
 232:Src/FUSB302.c **** 
 2215              		.loc 1 232 0
 2216 005c 05AA     		add	r2, sp, #20
 2217 005e 0221     		movs	r1, #2
 2218 0060 0198     		ldr	r0, [sp, #4]
 2219 0062 FFF7FEFF 		bl	tcpc_read
 2220              	.LVL245:
 235:Src/FUSB302.c **** 	reg |= TCPC_REG_SWITCHES0_MEAS_CC2;
 2221              		.loc 1 235 0
 2222 0066 059A     		ldr	r2, [sp, #20]
 2223 0068 5346     		mov	r3, r10
 2224 006a 9A43     		bics	r2, r3
 236:Src/FUSB302.c **** 
 2225              		.loc 1 236 0
 2226 006c 3A43     		orrs	r2, r7
 2227 006e 0592     		str	r2, [sp, #20]
 238:Src/FUSB302.c **** 
 2228              		.loc 1 238 0
 2229 0070 0221     		movs	r1, #2
 2230 0072 019F     		ldr	r7, [sp, #4]
 2231 0074 3800     		movs	r0, r7
 2232 0076 FFF7FEFF 		bl	tcpc_write
 2233              	.LVL246:
 243:Src/FUSB302.c **** 
 2234              		.loc 1 243 0
 2235 007a 0120     		movs	r0, #1
 2236 007c FFF7FEFF 		bl	osDelay
 2237              	.LVL247:
 245:Src/FUSB302.c **** 
 2238              		.loc 1 245 0
 2239 0080 03AA     		add	r2, sp, #12
 2240 0082 4021     		movs	r1, #64
 2241 0084 0197     		str	r7, [sp, #4]
ARM GAS  /tmp/ccUYTGX7.s 			page 63


 2242 0086 3800     		movs	r0, r7
 2243 0088 FFF7FEFF 		bl	tcpc_read
 2244              	.LVL248:
 248:Src/FUSB302.c **** 
 2245              		.loc 1 248 0
 2246 008c 039B     		ldr	r3, [sp, #12]
 2247 008e 2340     		ands	r3, r4
 2248 0090 1F00     		movs	r7, r3
 2249 0092 0393     		str	r3, [sp, #12]
 250:Src/FUSB302.c **** 	*cc2 = convert_bc_lvl(port, bc_lvl_cc2);
 2250              		.loc 1 250 0
 2251 0094 0499     		ldr	r1, [sp, #16]
 2252 0096 019C     		ldr	r4, [sp, #4]
 2253 0098 2000     		movs	r0, r4
 2254 009a FFF7FEFF 		bl	convert_bc_lvl
 2255              	.LVL249:
 2256 009e 4B46     		mov	r3, r9
 2257 00a0 1860     		str	r0, [r3]
 251:Src/FUSB302.c **** 
 2258              		.loc 1 251 0
 2259 00a2 3900     		movs	r1, r7
 2260 00a4 2000     		movs	r0, r4
 2261 00a6 FFF7FEFF 		bl	convert_bc_lvl
 2262              	.LVL250:
 2263 00aa 4346     		mov	r3, r8
 2264 00ac 1860     		str	r0, [r3]
 254:Src/FUSB302.c **** 	if (orig_meas_cc1)
 2265              		.loc 1 254 0
 2266 00ae 05AA     		add	r2, sp, #20
 2267 00b0 0221     		movs	r1, #2
 2268 00b2 2000     		movs	r0, r4
 2269 00b4 FFF7FEFF 		bl	tcpc_read
 2270              	.LVL251:
 255:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_MEAS_CC1;
 2271              		.loc 1 255 0
 2272 00b8 002E     		cmp	r6, #0
 2273 00ba 14D0     		beq	.L133
 256:Src/FUSB302.c **** 	else
 2274              		.loc 1 256 0
 2275 00bc 0423     		movs	r3, #4
 2276 00be 059A     		ldr	r2, [sp, #20]
 2277 00c0 1343     		orrs	r3, r2
 2278 00c2 0593     		str	r3, [sp, #20]
 2279              	.L134:
 259:Src/FUSB302.c **** 		reg |= TCPC_REG_SWITCHES0_MEAS_CC2;
 2280              		.loc 1 259 0
 2281 00c4 002D     		cmp	r5, #0
 2282 00c6 13D1     		bne	.L137
 262:Src/FUSB302.c **** 
 2283              		.loc 1 262 0
 2284 00c8 0823     		movs	r3, #8
 2285 00ca 059A     		ldr	r2, [sp, #20]
 2286 00cc 9A43     		bics	r2, r3
 2287 00ce 0592     		str	r2, [sp, #20]
 2288              	.L136:
 264:Src/FUSB302.c **** 	
 2289              		.loc 1 264 0
ARM GAS  /tmp/ccUYTGX7.s 			page 64


 2290 00d0 059A     		ldr	r2, [sp, #20]
 2291 00d2 0221     		movs	r1, #2
 2292 00d4 0198     		ldr	r0, [sp, #4]
 2293 00d6 FFF7FEFF 		bl	tcpc_write
 2294              	.LVL252:
 267:Src/FUSB302.c **** 
 2295              		.loc 1 267 0
 2296 00da 06B0     		add	sp, sp, #24
 2297              		@ sp needed
 2298              	.LVL253:
 2299              	.LVL254:
 2300              	.LVL255:
 2301              	.LVL256:
 2302 00dc 1CBC     		pop	{r2, r3, r4}
 2303 00de 9046     		mov	r8, r2
 2304 00e0 9946     		mov	r9, r3
 2305 00e2 A246     		mov	r10, r4
 2306 00e4 F0BD     		pop	{r4, r5, r6, r7, pc}
 2307              	.LVL257:
 2308              	.L133:
 258:Src/FUSB302.c **** 	if (orig_meas_cc2)
 2309              		.loc 1 258 0
 2310 00e6 0423     		movs	r3, #4
 2311 00e8 059A     		ldr	r2, [sp, #20]
 2312 00ea 9A43     		bics	r2, r3
 2313 00ec 0592     		str	r2, [sp, #20]
 2314 00ee E9E7     		b	.L134
 2315              	.L137:
 260:Src/FUSB302.c **** 	else
 2316              		.loc 1 260 0
 2317 00f0 0823     		movs	r3, #8
 2318 00f2 059A     		ldr	r2, [sp, #20]
 2319 00f4 1343     		orrs	r3, r2
 2320 00f6 0593     		str	r3, [sp, #20]
 2321 00f8 EAE7     		b	.L136
 2322              		.cfi_endproc
 2323              	.LFE25:
 2325              		.section	.text.fusb302_tcpm_get_cc,"ax",%progbits
 2326              		.align	1
 2327              		.syntax unified
 2328              		.code	16
 2329              		.thumb_func
 2330              		.fpu softvfp
 2332              	fusb302_tcpm_get_cc:
 2333              	.LFB31:
 458:Src/FUSB302.c **** 	if (state[port].pulling_up) {
 2334              		.loc 1 458 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 0
 2337              		@ frame_needed = 0, uses_anonymous_args = 0
 2338              	.LVL258:
 2339 0000 10B5     		push	{r4, lr}
 2340              	.LCFI36:
 2341              		.cfi_def_cfa_offset 8
 2342              		.cfi_offset 4, -8
 2343              		.cfi_offset 14, -4
 459:Src/FUSB302.c **** 		/* Source mode? */
ARM GAS  /tmp/ccUYTGX7.s 			page 65


 2344              		.loc 1 459 0
 2345 0002 8300     		lsls	r3, r0, #2
 2346 0004 1B18     		adds	r3, r3, r0
 2347 0006 9C00     		lsls	r4, r3, #2
 2348 0008 054B     		ldr	r3, .L142
 2349 000a 1B19     		adds	r3, r3, r4
 2350 000c 9B68     		ldr	r3, [r3, #8]
 2351 000e 002B     		cmp	r3, #0
 2352 0010 03D1     		bne	.L141
 464:Src/FUSB302.c **** 	}
 2353              		.loc 1 464 0
 2354 0012 FFF7FEFF 		bl	detect_cc_pin_sink
 2355              	.LVL259:
 2356              	.L140:
 468:Src/FUSB302.c **** 
 2357              		.loc 1 468 0
 2358 0016 0020     		movs	r0, #0
 2359              		@ sp needed
 2360 0018 10BD     		pop	{r4, pc}
 2361              	.LVL260:
 2362              	.L141:
 461:Src/FUSB302.c **** 	} else {
 2363              		.loc 1 461 0
 2364 001a FFF7FEFF 		bl	detect_cc_pin_source_manual
 2365              	.LVL261:
 2366 001e FAE7     		b	.L140
 2367              	.L143:
 2368              		.align	2
 2369              	.L142:
 2370 0020 00000000 		.word	.LANCHOR0
 2371              		.cfi_endproc
 2372              	.LFE31:
 2374              		.section	.text.tcpm_set_bist_test_data,"ax",%progbits
 2375              		.align	1
 2376              		.global	tcpm_set_bist_test_data
 2377              		.syntax unified
 2378              		.code	16
 2379              		.thumb_func
 2380              		.fpu softvfp
 2382              	tcpm_set_bist_test_data:
 2383              	.LFB41:
 970:Src/FUSB302.c **** 
 971:Src/FUSB302.c **** /* For BIST receiving */
 972:Src/FUSB302.c **** void tcpm_set_bist_test_data(int port)
 973:Src/FUSB302.c **** {
 2384              		.loc 1 973 0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 8
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
 2388              	.LVL262:
 2389 0000 10B5     		push	{r4, lr}
 2390              	.LCFI37:
 2391              		.cfi_def_cfa_offset 8
 2392              		.cfi_offset 4, -8
 2393              		.cfi_offset 14, -4
 2394 0002 82B0     		sub	sp, sp, #8
 2395              	.LCFI38:
ARM GAS  /tmp/ccUYTGX7.s 			page 66


 2396              		.cfi_def_cfa_offset 16
 2397 0004 0400     		movs	r4, r0
 974:Src/FUSB302.c **** 	int reg;
 975:Src/FUSB302.c **** 	
 976:Src/FUSB302.c **** 	//i2c_master_lock(tcpc_config[port].i2c_host_port);
 977:Src/FUSB302.c **** 
 978:Src/FUSB302.c **** 	/* Read control3 register */
 979:Src/FUSB302.c **** 	tcpc_read(port, TCPC_REG_CONTROL3, &reg);
 2398              		.loc 1 979 0
 2399 0006 01AA     		add	r2, sp, #4
 2400 0008 0921     		movs	r1, #9
 2401 000a FFF7FEFF 		bl	tcpc_read
 2402              	.LVL263:
 980:Src/FUSB302.c **** 
 981:Src/FUSB302.c **** 	/* Set the BIST_TMODE bit (Clears on Hard Reset) */
 982:Src/FUSB302.c **** 	reg |= TCPC_REG_CONTROL3_BIST_TMODE;
 2403              		.loc 1 982 0
 2404 000e 2022     		movs	r2, #32
 2405 0010 019B     		ldr	r3, [sp, #4]
 2406 0012 1A43     		orrs	r2, r3
 2407 0014 0192     		str	r2, [sp, #4]
 983:Src/FUSB302.c **** 
 984:Src/FUSB302.c **** 	/* Write the updated value */
 985:Src/FUSB302.c **** 	tcpc_write(port, TCPC_REG_CONTROL3, reg);
 2408              		.loc 1 985 0
 2409 0016 0921     		movs	r1, #9
 2410 0018 2000     		movs	r0, r4
 2411 001a FFF7FEFF 		bl	tcpc_write
 2412              	.LVL264:
 986:Src/FUSB302.c **** 	
 987:Src/FUSB302.c **** 	//i2c_master_unlock(tcpc_config[port].i2c_host_port);
 988:Src/FUSB302.c **** }
 2413              		.loc 1 988 0
 2414 001e 02B0     		add	sp, sp, #8
 2415              		@ sp needed
 2416              	.LVL265:
 2417 0020 10BD     		pop	{r4, pc}
 2418              		.cfi_endproc
 2419              	.LFE41:
 2421              		.global	fusb302_tcpm_drv
 2422              		.section	.bss.state,"aw",%nobits
 2423              		.align	2
 2424              		.set	.LANCHOR0,. + 0
 2427              	state:
 2428 0000 00000000 		.space	20
 2428      00000000 
 2428      00000000 
 2428      00000000 
 2428      00000000 
 2429              		.section	.rodata.fusb302_tcpm_drv,"a",%progbits
 2430              		.align	2
 2433              	fusb302_tcpm_drv:
 2434 0000 00000000 		.word	fusb302_tcpm_init
 2435 0004 00000000 		.word	fusb302_tcpm_release
 2436 0008 00000000 		.word	fusb302_tcpm_get_cc
 2437 000c 00000000 		.space	4
 2438 0010 00000000 		.word	fusb302_tcpm_select_rp_value
ARM GAS  /tmp/ccUYTGX7.s 			page 67


 2439 0014 00000000 		.word	fusb302_tcpm_set_cc
 2440 0018 00000000 		.word	fusb302_tcpm_set_polarity
 2441 001c 00000000 		.word	fusb302_tcpm_set_vconn
 2442 0020 00000000 		.word	fusb302_tcpm_set_msg_header
 2443 0024 00000000 		.word	fusb302_tcpm_set_rx_enable
 2444 0028 00000000 		.word	fusb302_tcpm_get_message
 2445 002c 00000000 		.word	fusb302_tcpm_transmit
 2446 0030 00000000 		.word	fusb302_tcpc_alert
 2447 0034 00000000 		.space	8
 2447      00000000 
 2448              		.text
 2449              	.Letext0:
 2450              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2451              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2452              		.file 5 "Inc/usb_pd_tcpm.h"
 2453              		.file 6 "Inc/tcpm_driver.h"
 2454              		.file 7 "Inc/usb_pd.h"
 2455              		.file 8 "Inc/FUSB302.h"
 2456              		.file 9 "<built-in>"
ARM GAS  /tmp/ccUYTGX7.s 			page 68


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FUSB302.c
     /tmp/ccUYTGX7.s:16     .text.convert_bc_lvl:0000000000000000 $t
     /tmp/ccUYTGX7.s:22     .text.convert_bc_lvl:0000000000000000 convert_bc_lvl
     /tmp/ccUYTGX7.s:91     .text.convert_bc_lvl:0000000000000040 $d
     /tmp/ccUYTGX7.s:96     .text.get_num_bytes:0000000000000000 $t
     /tmp/ccUYTGX7.s:102    .text.get_num_bytes:0000000000000000 get_num_bytes
     /tmp/ccUYTGX7.s:129    .text.fusb302_tcpm_release:0000000000000000 $t
     /tmp/ccUYTGX7.s:135    .text.fusb302_tcpm_release:0000000000000000 fusb302_tcpm_release
     /tmp/ccUYTGX7.s:152    .text.fusb302_rx_fifo_is_empty:0000000000000000 $t
     /tmp/ccUYTGX7.s:158    .text.fusb302_rx_fifo_is_empty:0000000000000000 fusb302_rx_fifo_is_empty
     /tmp/ccUYTGX7.s:201    .text.fusb302_pd_reset:0000000000000000 $t
     /tmp/ccUYTGX7.s:207    .text.fusb302_pd_reset:0000000000000000 fusb302_pd_reset
     /tmp/ccUYTGX7.s:231    .text.fusb302_flush_rx_fifo:0000000000000000 $t
     /tmp/ccUYTGX7.s:237    .text.fusb302_flush_rx_fifo:0000000000000000 fusb302_flush_rx_fifo
     /tmp/ccUYTGX7.s:261    .text.fusb302_tcpc_alert:0000000000000000 $t
     /tmp/ccUYTGX7.s:268    .text.fusb302_tcpc_alert:0000000000000000 fusb302_tcpc_alert
     /tmp/ccUYTGX7.s:413    .text.fusb302_tcpc_alert:00000000000000b8 $d
     /tmp/ccUYTGX7.s:418    .text.fusb302_flush_tx_fifo:0000000000000000 $t
     /tmp/ccUYTGX7.s:424    .text.fusb302_flush_tx_fifo:0000000000000000 fusb302_flush_tx_fifo
     /tmp/ccUYTGX7.s:464    .text.fusb302_auto_goodcrc_enable:0000000000000000 $t
     /tmp/ccUYTGX7.s:470    .text.fusb302_auto_goodcrc_enable:0000000000000000 fusb302_auto_goodcrc_enable
     /tmp/ccUYTGX7.s:527    .text.fusb302_tcpm_set_rx_enable:0000000000000000 $t
     /tmp/ccUYTGX7.s:533    .text.fusb302_tcpm_set_rx_enable:0000000000000000 fusb302_tcpm_set_rx_enable
     /tmp/ccUYTGX7.s:672    .text.fusb302_tcpm_set_rx_enable:00000000000000b4 $d
     /tmp/ccUYTGX7.s:677    .text.fusb302_tcpm_set_msg_header:0000000000000000 $t
     /tmp/ccUYTGX7.s:683    .text.fusb302_tcpm_set_msg_header:0000000000000000 fusb302_tcpm_set_msg_header
     /tmp/ccUYTGX7.s:754    .text.fusb302_tcpm_set_vconn:0000000000000000 $t
     /tmp/ccUYTGX7.s:760    .text.fusb302_tcpm_set_vconn:0000000000000000 fusb302_tcpm_set_vconn
     /tmp/ccUYTGX7.s:837    .text.fusb302_tcpm_set_vconn:000000000000004c $d
     /tmp/ccUYTGX7.s:843    .text.fusb302_tcpm_set_polarity:0000000000000000 $t
     /tmp/ccUYTGX7.s:849    .text.fusb302_tcpm_set_polarity:0000000000000000 fusb302_tcpm_set_polarity
     /tmp/ccUYTGX7.s:982    .text.fusb302_tcpm_set_polarity:00000000000000a8 $d
     /tmp/ccUYTGX7.s:987    .text.fusb302_tcpm_set_cc:0000000000000000 $t
     /tmp/ccUYTGX7.s:993    .text.fusb302_tcpm_set_cc:0000000000000000 fusb302_tcpm_set_cc
     /tmp/ccUYTGX7.s:1199   .text.fusb302_tcpm_set_cc:0000000000000108 $d
     /tmp/ccUYTGX7.s:1204   .text.fusb302_tcpm_select_rp_value:0000000000000000 $t
     /tmp/ccUYTGX7.s:1210   .text.fusb302_tcpm_select_rp_value:0000000000000000 fusb302_tcpm_select_rp_value
     /tmp/ccUYTGX7.s:1313   .text.fusb302_tcpm_select_rp_value:0000000000000064 $d
     /tmp/ccUYTGX7.s:1318   .text.fusb302_tcpm_init:0000000000000000 $t
     /tmp/ccUYTGX7.s:1324   .text.fusb302_tcpm_init:0000000000000000 fusb302_tcpm_init
     /tmp/ccUYTGX7.s:1464   .text.fusb302_tcpm_init:00000000000000b4 $d
     /tmp/ccUYTGX7.s:1470   .text.fusb302_send_message:0000000000000000 $t
     /tmp/ccUYTGX7.s:1476   .text.fusb302_send_message:0000000000000000 fusb302_send_message
     /tmp/ccUYTGX7.s:1580   .text.fusb302_tcpm_transmit:0000000000000000 $t
     /tmp/ccUYTGX7.s:1586   .text.fusb302_tcpm_transmit:0000000000000000 fusb302_tcpm_transmit
     /tmp/ccUYTGX7.s:1735   .text.fusb302_tcpm_get_message:0000000000000000 $t
     /tmp/ccUYTGX7.s:1741   .text.fusb302_tcpm_get_message:0000000000000000 fusb302_tcpm_get_message
     /tmp/ccUYTGX7.s:1890   .text.measure_cc_pin_source:0000000000000000 $t
     /tmp/ccUYTGX7.s:1896   .text.measure_cc_pin_source:0000000000000000 measure_cc_pin_source
     /tmp/ccUYTGX7.s:2034   .text.measure_cc_pin_source:00000000000000a8 $d
     /tmp/ccUYTGX7.s:2039   .text.detect_cc_pin_source_manual:0000000000000000 $t
     /tmp/ccUYTGX7.s:2045   .text.detect_cc_pin_source_manual:0000000000000000 detect_cc_pin_source_manual
     /tmp/ccUYTGX7.s:2119   .text.detect_cc_pin_source_manual:0000000000000048 $d
     /tmp/ccUYTGX7.s:2124   .text.detect_cc_pin_sink:0000000000000000 $t
     /tmp/ccUYTGX7.s:2130   .text.detect_cc_pin_sink:0000000000000000 detect_cc_pin_sink
     /tmp/ccUYTGX7.s:2326   .text.fusb302_tcpm_get_cc:0000000000000000 $t
ARM GAS  /tmp/ccUYTGX7.s 			page 69


     /tmp/ccUYTGX7.s:2332   .text.fusb302_tcpm_get_cc:0000000000000000 fusb302_tcpm_get_cc
     /tmp/ccUYTGX7.s:2370   .text.fusb302_tcpm_get_cc:0000000000000020 $d
     /tmp/ccUYTGX7.s:2375   .text.tcpm_set_bist_test_data:0000000000000000 $t
     /tmp/ccUYTGX7.s:2382   .text.tcpm_set_bist_test_data:0000000000000000 tcpm_set_bist_test_data
     /tmp/ccUYTGX7.s:2433   .rodata.fusb302_tcpm_drv:0000000000000000 fusb302_tcpm_drv
     /tmp/ccUYTGX7.s:2423   .bss.state:0000000000000000 $d
     /tmp/ccUYTGX7.s:2427   .bss.state:0000000000000000 state
     /tmp/ccUYTGX7.s:2430   .rodata.fusb302_tcpm_drv:0000000000000000 $d

UNDEFINED SYMBOLS
tcpc_read
tcpc_write
pd_transmit_complete
pd_execute_hard_reset
tcpc_config
memcpy
tcpc_xfer
osDelay
