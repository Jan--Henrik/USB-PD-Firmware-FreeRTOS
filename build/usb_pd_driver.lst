ARM GAS  /tmp/ccuEiptx.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_pd_driver.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.pd_task_set_event,"ax",%progbits
  16              		.align	1
  17              		.global	pd_task_set_event
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	pd_task_set_event:
  25              	.LVL0:
  26              	.LFB18:
  27              		.file 1 "Src/usb_pd_driver.c"
   1:Src/usb_pd_driver.c **** /*
   2:Src/usb_pd_driver.c ****  * usb_pd_driver.c
   3:Src/usb_pd_driver.c ****  *
   4:Src/usb_pd_driver.c ****  * Created: 11/11/2017 23:55:12
   5:Src/usb_pd_driver.c ****  *  Author: jason
   6:Src/usb_pd_driver.c ****  */ 
   7:Src/usb_pd_driver.c **** 
   8:Src/usb_pd_driver.c **** #include "usb_pd_driver.h"
   9:Src/usb_pd_driver.c **** #include "usb_pd.h"
  10:Src/usb_pd_driver.c **** 
  11:Src/usb_pd_driver.c **** #ifndef ARRAY_SIZE
  12:Src/usb_pd_driver.c **** #define ARRAY_SIZE(t) (sizeof(t) / sizeof(t[0]))
  13:Src/usb_pd_driver.c **** #endif
  14:Src/usb_pd_driver.c **** 
  15:Src/usb_pd_driver.c **** extern struct tc_module tc_instance;
  16:Src/usb_pd_driver.c **** extern uint32_t g_us_timestamp_upper_32bit;
  17:Src/usb_pd_driver.c **** 
  18:Src/usb_pd_driver.c **** uint32_t pd_task_set_event(uint32_t event, int wait_for_reply)
  19:Src/usb_pd_driver.c **** {
  28              		.loc 1 19 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  20:Src/usb_pd_driver.c **** 	switch (event)
  33              		.loc 1 20 2 view .LVU1
  21:Src/usb_pd_driver.c **** 	{
  22:Src/usb_pd_driver.c **** 		case PD_EVENT_TX:
  23:Src/usb_pd_driver.c **** 			break;
  24:Src/usb_pd_driver.c **** 		default:
  25:Src/usb_pd_driver.c **** 			break;
ARM GAS  /tmp/ccuEiptx.s 			page 2


  26:Src/usb_pd_driver.c **** 	}
  27:Src/usb_pd_driver.c **** 	return 0;
  34              		.loc 1 27 2 view .LVU2
  28:Src/usb_pd_driver.c **** }
  35              		.loc 1 28 1 is_stmt 0 view .LVU3
  36 0000 0020     		movs	r0, #0
  37              	.LVL1:
  38              		.loc 1 28 1 view .LVU4
  39              		@ sp needed
  40 0002 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE18:
  44              		.section	.text.pd_set_input_current_limit,"ax",%progbits
  45              		.align	1
  46              		.global	pd_set_input_current_limit
  47              		.syntax unified
  48              		.code	16
  49              		.thumb_func
  50              		.fpu softvfp
  52              	pd_set_input_current_limit:
  53              	.LVL2:
  54              	.LFB19:
  29:Src/usb_pd_driver.c **** 
  30:Src/usb_pd_driver.c **** const uint32_t pd_src_pdo[] = {
  31:Src/usb_pd_driver.c **** 	PDO_FIXED(5000, 1500, PDO_FIXED_FLAGS),
  32:Src/usb_pd_driver.c **** };
  33:Src/usb_pd_driver.c **** const int pd_src_pdo_cnt = ARRAY_SIZE(pd_src_pdo);
  34:Src/usb_pd_driver.c **** 
  35:Src/usb_pd_driver.c **** const uint32_t pd_snk_pdo[] = {
  36:Src/usb_pd_driver.c **** 	PDO_FIXED(5000, 500, PDO_FIXED_FLAGS),
  37:Src/usb_pd_driver.c **** 	PDO_FIXED(9000, 500, PDO_FIXED_FLAGS),
  38:Src/usb_pd_driver.c **** 	PDO_FIXED(20000, 500, PDO_FIXED_FLAGS),
  39:Src/usb_pd_driver.c **** };
  40:Src/usb_pd_driver.c **** const int pd_snk_pdo_cnt = ARRAY_SIZE(pd_snk_pdo);
  41:Src/usb_pd_driver.c **** 
  42:Src/usb_pd_driver.c **** void pd_set_input_current_limit(int port, uint32_t max_ma,
  43:Src/usb_pd_driver.c **** 	uint32_t supply_voltage)
  44:Src/usb_pd_driver.c **** {
  55              		.loc 1 44 1 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  45:Src/usb_pd_driver.c **** 
  46:Src/usb_pd_driver.c **** }
  60              		.loc 1 46 1 view .LVU6
  61              		@ sp needed
  62 0000 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE19:
  66              		.section	.text.pd_is_valid_input_voltage,"ax",%progbits
  67              		.align	1
  68              		.global	pd_is_valid_input_voltage
  69              		.syntax unified
  70              		.code	16
  71              		.thumb_func
  72              		.fpu softvfp
ARM GAS  /tmp/ccuEiptx.s 			page 3


  74              	pd_is_valid_input_voltage:
  75              	.LVL3:
  76              	.LFB20:
  47:Src/usb_pd_driver.c **** 
  48:Src/usb_pd_driver.c **** int pd_is_valid_input_voltage(int mv)
  49:Src/usb_pd_driver.c **** {
  77              		.loc 1 49 1 view -0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  50:Src/usb_pd_driver.c **** 	return 1;
  82              		.loc 1 50 2 view .LVU8
  51:Src/usb_pd_driver.c **** }
  83              		.loc 1 51 1 is_stmt 0 view .LVU9
  84 0000 0120     		movs	r0, #1
  85              	.LVL4:
  86              		.loc 1 51 1 view .LVU10
  87              		@ sp needed
  88 0002 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE20:
  92              		.section	.text.pd_snk_is_vbus_provided,"ax",%progbits
  93              		.align	1
  94              		.global	pd_snk_is_vbus_provided
  95              		.syntax unified
  96              		.code	16
  97              		.thumb_func
  98              		.fpu softvfp
 100              	pd_snk_is_vbus_provided:
 101              	.LVL5:
 102              	.LFB21:
  52:Src/usb_pd_driver.c **** 
  53:Src/usb_pd_driver.c **** int pd_snk_is_vbus_provided(int port)
  54:Src/usb_pd_driver.c **** {
 103              		.loc 1 54 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
  55:Src/usb_pd_driver.c **** 	return 1;
 108              		.loc 1 55 2 view .LVU12
  56:Src/usb_pd_driver.c **** }
 109              		.loc 1 56 1 is_stmt 0 view .LVU13
 110 0000 0120     		movs	r0, #1
 111              	.LVL6:
 112              		.loc 1 56 1 view .LVU14
 113              		@ sp needed
 114 0002 7047     		bx	lr
 115              		.cfi_endproc
 116              	.LFE21:
 118              		.section	.text.get_time,"ax",%progbits
 119              		.align	1
 120              		.global	get_time
 121              		.syntax unified
 122              		.code	16
 123              		.thumb_func
ARM GAS  /tmp/ccuEiptx.s 			page 4


 124              		.fpu softvfp
 126              	get_time:
 127              	.LVL7:
 128              	.LFB22:
  57:Src/usb_pd_driver.c **** 
  58:Src/usb_pd_driver.c **** timestamp_t get_time(void)
  59:Src/usb_pd_driver.c **** {
 129              		.loc 1 59 1 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		.loc 1 59 1 is_stmt 0 view .LVU16
 134 0000 10B5     		push	{r4, lr}
 135              	.LCFI0:
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 4, -8
 138              		.cfi_offset 14, -4
 139 0002 0400     		movs	r4, r0
  60:Src/usb_pd_driver.c **** 	timestamp_t t;
 140              		.loc 1 60 2 is_stmt 1 view .LVU17
  61:Src/usb_pd_driver.c **** 	
  62:Src/usb_pd_driver.c **** 	t.val = xTaskGetTickCount();
 141              		.loc 1 62 2 view .LVU18
 142              		.loc 1 62 10 is_stmt 0 view .LVU19
 143 0004 FFF7FEFF 		bl	xTaskGetTickCount
 144              	.LVL8:
 145              		.loc 1 62 8 view .LVU20
 146 0008 2060     		str	r0, [r4]
 147 000a 0023     		movs	r3, #0
 148 000c 6360     		str	r3, [r4, #4]
  63:Src/usb_pd_driver.c **** 	t.le.lo = t.val;
 149              		.loc 1 63 2 is_stmt 1 view .LVU21
  64:Src/usb_pd_driver.c **** 	t.le.hi = (t.val >> 32);
 150              		.loc 1 64 2 view .LVU22
  65:Src/usb_pd_driver.c **** 	
  66:Src/usb_pd_driver.c **** 	return t;
 151              		.loc 1 66 2 view .LVU23
  67:Src/usb_pd_driver.c **** }
 152              		.loc 1 67 1 is_stmt 0 view .LVU24
 153 000e 2000     		movs	r0, r4
 154              		@ sp needed
 155              	.LVL9:
 156              		.loc 1 67 1 view .LVU25
 157 0010 10BD     		pop	{r4, pc}
 158              		.cfi_endproc
 159              	.LFE22:
 161              		.section	.text.pd_power_supply_reset,"ax",%progbits
 162              		.align	1
 163              		.global	pd_power_supply_reset
 164              		.syntax unified
 165              		.code	16
 166              		.thumb_func
 167              		.fpu softvfp
 169              	pd_power_supply_reset:
 170              	.LVL10:
 171              	.LFB23:
  68:Src/usb_pd_driver.c **** 
ARM GAS  /tmp/ccuEiptx.s 			page 5


  69:Src/usb_pd_driver.c **** 
  70:Src/usb_pd_driver.c **** void pd_power_supply_reset(int port)
  71:Src/usb_pd_driver.c **** {
 172              		.loc 1 71 1 is_stmt 1 view -0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		@ link register save eliminated.
  72:Src/usb_pd_driver.c **** 	return;
 177              		.loc 1 72 2 view .LVU27
  73:Src/usb_pd_driver.c **** }
 178              		.loc 1 73 1 is_stmt 0 view .LVU28
 179              		@ sp needed
 180 0000 7047     		bx	lr
 181              		.cfi_endproc
 182              	.LFE23:
 184              		.section	.text.pd_custom_vdm,"ax",%progbits
 185              		.align	1
 186              		.global	pd_custom_vdm
 187              		.syntax unified
 188              		.code	16
 189              		.thumb_func
 190              		.fpu softvfp
 192              	pd_custom_vdm:
 193              	.LVL11:
 194              	.LFB24:
  74:Src/usb_pd_driver.c **** 
  75:Src/usb_pd_driver.c **** int pd_custom_vdm(int port, int cnt, uint32_t *payload,
  76:Src/usb_pd_driver.c **** 		  uint32_t **rpayload)
  77:Src/usb_pd_driver.c **** {
 195              		.loc 1 77 1 is_stmt 1 view -0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		@ link register save eliminated.
  78:Src/usb_pd_driver.c **** #if 0
  79:Src/usb_pd_driver.c **** 	int cmd = PD_VDO_CMD(payload[0]);
  80:Src/usb_pd_driver.c **** 	uint16_t dev_id = 0;
  81:Src/usb_pd_driver.c **** 	int is_rw, is_latest;
  82:Src/usb_pd_driver.c **** 
  83:Src/usb_pd_driver.c **** 	/* make sure we have some payload */
  84:Src/usb_pd_driver.c **** 	if (cnt == 0)
  85:Src/usb_pd_driver.c **** 		return 0;
  86:Src/usb_pd_driver.c **** 
  87:Src/usb_pd_driver.c **** 	switch (cmd) {
  88:Src/usb_pd_driver.c **** 	case VDO_CMD_VERSION:
  89:Src/usb_pd_driver.c **** 		/* guarantee last byte of payload is null character */
  90:Src/usb_pd_driver.c **** 		*(payload + cnt - 1) = 0;
  91:Src/usb_pd_driver.c **** 		//CPRINTF("version: %s\n", (char *)(payload+1));
  92:Src/usb_pd_driver.c **** 		break;
  93:Src/usb_pd_driver.c **** 	case VDO_CMD_READ_INFO:
  94:Src/usb_pd_driver.c **** 	case VDO_CMD_SEND_INFO:
  95:Src/usb_pd_driver.c **** 		/* copy hash */
  96:Src/usb_pd_driver.c **** 		if (cnt == 7) {
  97:Src/usb_pd_driver.c **** 			dev_id = VDO_INFO_HW_DEV_ID(payload[6]);
  98:Src/usb_pd_driver.c **** 			is_rw = VDO_INFO_IS_RW(payload[6]);
  99:Src/usb_pd_driver.c **** 
ARM GAS  /tmp/ccuEiptx.s 			page 6


 100:Src/usb_pd_driver.c **** 			is_latest = pd_dev_store_rw_hash(port,
 101:Src/usb_pd_driver.c **** 							 dev_id,
 102:Src/usb_pd_driver.c **** 							 payload + 1,
 103:Src/usb_pd_driver.c **** 							 is_rw ?
 104:Src/usb_pd_driver.c **** 							 SYSTEM_IMAGE_RW :
 105:Src/usb_pd_driver.c **** 							 SYSTEM_IMAGE_RO);
 106:Src/usb_pd_driver.c **** 
 107:Src/usb_pd_driver.c **** 			/*
 108:Src/usb_pd_driver.c **** 			 * Send update host event unless our RW hash is
 109:Src/usb_pd_driver.c **** 			 * already known to be the latest update RW.
 110:Src/usb_pd_driver.c **** 			 */
 111:Src/usb_pd_driver.c **** 			if (!is_rw || !is_latest)
 112:Src/usb_pd_driver.c **** 				pd_send_host_event(PD_EVENT_UPDATE_DEVICE);
 113:Src/usb_pd_driver.c **** 
 114:Src/usb_pd_driver.c **** 			//CPRINTF("DevId:%d.%d SW:%d RW:%d\n",
 115:Src/usb_pd_driver.c **** 			//	HW_DEV_ID_MAJ(dev_id),
 116:Src/usb_pd_driver.c **** 			//	HW_DEV_ID_MIN(dev_id),
 117:Src/usb_pd_driver.c **** 			//	VDO_INFO_SW_DBG_VER(payload[6]),
 118:Src/usb_pd_driver.c **** 			//	is_rw);
 119:Src/usb_pd_driver.c **** 		} else if (cnt == 6) {
 120:Src/usb_pd_driver.c **** 			/* really old devices don't have last byte */
 121:Src/usb_pd_driver.c **** 			pd_dev_store_rw_hash(port, dev_id, payload + 1,
 122:Src/usb_pd_driver.c **** 					     SYSTEM_IMAGE_UNKNOWN);
 123:Src/usb_pd_driver.c **** 		}
 124:Src/usb_pd_driver.c **** 		break;
 125:Src/usb_pd_driver.c **** 	case VDO_CMD_CURRENT:
 126:Src/usb_pd_driver.c **** 		CPRINTF("Current: %dmA\n", payload[1]);
 127:Src/usb_pd_driver.c **** 		break;
 128:Src/usb_pd_driver.c **** 	case VDO_CMD_FLIP:
 129:Src/usb_pd_driver.c **** 		/* TODO: usb_mux_flip(port); */
 130:Src/usb_pd_driver.c **** 		break;
 131:Src/usb_pd_driver.c **** #ifdef CONFIG_USB_PD_LOGGING
 132:Src/usb_pd_driver.c **** 	case VDO_CMD_GET_LOG:
 133:Src/usb_pd_driver.c **** 		pd_log_recv_vdm(port, cnt, payload);
 134:Src/usb_pd_driver.c **** 		break;
 135:Src/usb_pd_driver.c **** #endif /* CONFIG_USB_PD_LOGGING */
 136:Src/usb_pd_driver.c **** 	}
 137:Src/usb_pd_driver.c **** #endif // if 0
 138:Src/usb_pd_driver.c **** 
 139:Src/usb_pd_driver.c **** 	return 0;
 200              		.loc 1 139 2 view .LVU30
 140:Src/usb_pd_driver.c **** }
 201              		.loc 1 140 1 is_stmt 0 view .LVU31
 202 0000 0020     		movs	r0, #0
 203              	.LVL12:
 204              		.loc 1 140 1 view .LVU32
 205              		@ sp needed
 206 0002 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE24:
 210              		.section	.text.pd_execute_data_swap,"ax",%progbits
 211              		.align	1
 212              		.global	pd_execute_data_swap
 213              		.syntax unified
 214              		.code	16
 215              		.thumb_func
 216              		.fpu softvfp
ARM GAS  /tmp/ccuEiptx.s 			page 7


 218              	pd_execute_data_swap:
 219              	.LVL13:
 220              	.LFB25:
 141:Src/usb_pd_driver.c **** 
 142:Src/usb_pd_driver.c **** void pd_execute_data_swap(int port, int data_role)
 143:Src/usb_pd_driver.c **** {
 221              		.loc 1 143 1 is_stmt 1 view -0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 144:Src/usb_pd_driver.c **** 	/* Do nothing */
 145:Src/usb_pd_driver.c **** }
 226              		.loc 1 145 1 view .LVU34
 227              		@ sp needed
 228 0000 7047     		bx	lr
 229              		.cfi_endproc
 230              	.LFE25:
 232              		.section	.text.pd_check_data_swap,"ax",%progbits
 233              		.align	1
 234              		.global	pd_check_data_swap
 235              		.syntax unified
 236              		.code	16
 237              		.thumb_func
 238              		.fpu softvfp
 240              	pd_check_data_swap:
 241              	.LVL14:
 242              	.LFB26:
 146:Src/usb_pd_driver.c **** 
 147:Src/usb_pd_driver.c **** int pd_check_data_swap(int port, int data_role)
 148:Src/usb_pd_driver.c **** {
 243              		.loc 1 148 1 view -0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              		@ link register save eliminated.
 149:Src/usb_pd_driver.c **** 	// Never allow data swap
 150:Src/usb_pd_driver.c **** 	return 0;
 248              		.loc 1 150 2 view .LVU36
 151:Src/usb_pd_driver.c **** }
 249              		.loc 1 151 1 is_stmt 0 view .LVU37
 250 0000 0020     		movs	r0, #0
 251              	.LVL15:
 252              		.loc 1 151 1 view .LVU38
 253              		@ sp needed
 254 0002 7047     		bx	lr
 255              		.cfi_endproc
 256              	.LFE26:
 258              		.section	.text.pd_check_power_swap,"ax",%progbits
 259              		.align	1
 260              		.global	pd_check_power_swap
 261              		.syntax unified
 262              		.code	16
 263              		.thumb_func
 264              		.fpu softvfp
 266              	pd_check_power_swap:
 267              	.LVL16:
ARM GAS  /tmp/ccuEiptx.s 			page 8


 268              	.LFB27:
 152:Src/usb_pd_driver.c **** 
 153:Src/usb_pd_driver.c **** int pd_check_power_swap(int port)
 154:Src/usb_pd_driver.c **** {
 269              		.loc 1 154 1 is_stmt 1 view -0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 155:Src/usb_pd_driver.c **** 	/* Always refuse power swap */
 156:Src/usb_pd_driver.c **** 	return 0;
 274              		.loc 1 156 2 view .LVU40
 157:Src/usb_pd_driver.c **** }
 275              		.loc 1 157 1 is_stmt 0 view .LVU41
 276 0000 0020     		movs	r0, #0
 277              	.LVL17:
 278              		.loc 1 157 1 view .LVU42
 279              		@ sp needed
 280 0002 7047     		bx	lr
 281              		.cfi_endproc
 282              	.LFE27:
 284              		.section	.text.pd_board_checks,"ax",%progbits
 285              		.align	1
 286              		.global	pd_board_checks
 287              		.syntax unified
 288              		.code	16
 289              		.thumb_func
 290              		.fpu softvfp
 292              	pd_board_checks:
 293              	.LFB28:
 158:Src/usb_pd_driver.c **** 
 159:Src/usb_pd_driver.c **** int pd_board_checks(void)
 160:Src/usb_pd_driver.c **** {
 294              		.loc 1 160 1 is_stmt 1 view -0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 161:Src/usb_pd_driver.c **** 	return EC_SUCCESS;
 299              		.loc 1 161 2 view .LVU44
 162:Src/usb_pd_driver.c **** }
 300              		.loc 1 162 1 is_stmt 0 view .LVU45
 301 0000 0020     		movs	r0, #0
 302              		@ sp needed
 303 0002 7047     		bx	lr
 304              		.cfi_endproc
 305              	.LFE28:
 307              		.section	.text.pd_set_power_supply_ready,"ax",%progbits
 308              		.align	1
 309              		.global	pd_set_power_supply_ready
 310              		.syntax unified
 311              		.code	16
 312              		.thumb_func
 313              		.fpu softvfp
 315              	pd_set_power_supply_ready:
 316              	.LVL18:
 317              	.LFB29:
ARM GAS  /tmp/ccuEiptx.s 			page 9


 163:Src/usb_pd_driver.c **** 
 164:Src/usb_pd_driver.c **** int pd_set_power_supply_ready(int port)
 165:Src/usb_pd_driver.c **** {
 318              		.loc 1 165 1 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 166:Src/usb_pd_driver.c **** #if 0
 167:Src/usb_pd_driver.c **** 	/* Disable charging */
 168:Src/usb_pd_driver.c **** 	gpio_set_level(GPIO_USB_C0_CHARGE_L, 1);
 169:Src/usb_pd_driver.c **** 
 170:Src/usb_pd_driver.c **** 	/* Enable VBUS source */
 171:Src/usb_pd_driver.c **** 	gpio_set_level(GPIO_USB_C0_5V_EN, 1);
 172:Src/usb_pd_driver.c **** 
 173:Src/usb_pd_driver.c **** 	/* notify host of power info change */
 174:Src/usb_pd_driver.c **** 	pd_send_host_event(PD_EVENT_POWER_CHANGE);
 175:Src/usb_pd_driver.c **** #endif // if 0
 176:Src/usb_pd_driver.c **** 	return EC_SUCCESS; /* we are ready */
 323              		.loc 1 176 2 view .LVU47
 177:Src/usb_pd_driver.c **** }
 324              		.loc 1 177 1 is_stmt 0 view .LVU48
 325 0000 0020     		movs	r0, #0
 326              	.LVL19:
 327              		.loc 1 177 1 view .LVU49
 328              		@ sp needed
 329 0002 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE29:
 333              		.section	.text.pd_transition_voltage,"ax",%progbits
 334              		.align	1
 335              		.global	pd_transition_voltage
 336              		.syntax unified
 337              		.code	16
 338              		.thumb_func
 339              		.fpu softvfp
 341              	pd_transition_voltage:
 342              	.LVL20:
 343              	.LFB30:
 178:Src/usb_pd_driver.c **** 
 179:Src/usb_pd_driver.c **** void pd_transition_voltage(int idx)
 180:Src/usb_pd_driver.c **** {
 344              		.loc 1 180 1 is_stmt 1 view -0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 181:Src/usb_pd_driver.c **** 	/* No-operation: we are always 5V */
 182:Src/usb_pd_driver.c **** 	
 183:Src/usb_pd_driver.c **** #if 0
 184:Src/usb_pd_driver.c **** 	timestamp_t deadline;
 185:Src/usb_pd_driver.c **** 	uint32_t mv = src_pdo_charge[idx - 1].mv;
 186:Src/usb_pd_driver.c **** 
 187:Src/usb_pd_driver.c **** 	/* Is this a transition to a new voltage? */
 188:Src/usb_pd_driver.c **** 	if (charge_port_is_active() && vbus[CHG].mv != mv) {
 189:Src/usb_pd_driver.c **** 		/*
 190:Src/usb_pd_driver.c **** 		 * Alter voltage limit on charge port, this should cause
ARM GAS  /tmp/ccuEiptx.s 			page 10


 191:Src/usb_pd_driver.c **** 		 * the port to select the desired PDO.
 192:Src/usb_pd_driver.c **** 		 */
 193:Src/usb_pd_driver.c **** 		pd_set_external_voltage_limit(CHG, mv);
 194:Src/usb_pd_driver.c **** 
 195:Src/usb_pd_driver.c **** 		/* Wait for CHG transition */
 196:Src/usb_pd_driver.c **** 		deadline.val = get_time().val + PD_T_PS_TRANSITION;
 197:Src/usb_pd_driver.c **** 		CPRINTS("Waiting for CHG port transition");
 198:Src/usb_pd_driver.c **** 		while (charge_port_is_active() &&
 199:Src/usb_pd_driver.c **** 		       vbus[CHG].mv != mv &&
 200:Src/usb_pd_driver.c **** 		       get_time().val < deadline.val)
 201:Src/usb_pd_driver.c **** 			msleep(10);
 202:Src/usb_pd_driver.c **** 
 203:Src/usb_pd_driver.c **** 		if (vbus[CHG].mv != mv) {
 204:Src/usb_pd_driver.c **** 			CPRINTS("Missed CHG transition, resetting DUT");
 205:Src/usb_pd_driver.c **** 			pd_power_supply_reset(DUT);
 206:Src/usb_pd_driver.c **** 			return;
 207:Src/usb_pd_driver.c **** 		}
 208:Src/usb_pd_driver.c **** 
 209:Src/usb_pd_driver.c **** 		CPRINTS("CHG transitioned");
 210:Src/usb_pd_driver.c **** 	}
 211:Src/usb_pd_driver.c **** 
 212:Src/usb_pd_driver.c **** 	vbus[DUT].mv = vbus[CHG].mv;
 213:Src/usb_pd_driver.c **** 	vbus[DUT].ma = vbus[CHG].ma;
 214:Src/usb_pd_driver.c **** #endif // if 0
 215:Src/usb_pd_driver.c **** 
 216:Src/usb_pd_driver.c **** }
 349              		.loc 1 216 1 view .LVU51
 350              		@ sp needed
 351 0000 7047     		bx	lr
 352              		.cfi_endproc
 353              	.LFE30:
 355              		.section	.text.pd_check_dr_role,"ax",%progbits
 356              		.align	1
 357              		.global	pd_check_dr_role
 358              		.syntax unified
 359              		.code	16
 360              		.thumb_func
 361              		.fpu softvfp
 363              	pd_check_dr_role:
 364              	.LVL21:
 365              	.LFB31:
 217:Src/usb_pd_driver.c **** 
 218:Src/usb_pd_driver.c **** void pd_check_dr_role(int port, int dr_role, int flags)
 219:Src/usb_pd_driver.c **** {
 366              		.loc 1 219 1 view -0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 220:Src/usb_pd_driver.c **** #if 0
 221:Src/usb_pd_driver.c **** 	/* If UFP, try to switch to DFP */
 222:Src/usb_pd_driver.c **** 	if ((flags & PD_FLAGS_PARTNER_DR_DATA) && dr_role == PD_ROLE_UFP)
 223:Src/usb_pd_driver.c **** 	pd_request_data_swap(port);
 224:Src/usb_pd_driver.c **** #endif
 225:Src/usb_pd_driver.c **** }
 371              		.loc 1 225 1 view .LVU53
 372              		@ sp needed
ARM GAS  /tmp/ccuEiptx.s 			page 11


 373 0000 7047     		bx	lr
 374              		.cfi_endproc
 375              	.LFE31:
 377              		.section	.text.pd_check_pr_role,"ax",%progbits
 378              		.align	1
 379              		.global	pd_check_pr_role
 380              		.syntax unified
 381              		.code	16
 382              		.thumb_func
 383              		.fpu softvfp
 385              	pd_check_pr_role:
 386              	.LVL22:
 387              	.LFB32:
 226:Src/usb_pd_driver.c **** 
 227:Src/usb_pd_driver.c **** void pd_check_pr_role(int port, int pr_role, int flags)
 228:Src/usb_pd_driver.c **** {
 388              		.loc 1 228 1 view -0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 229:Src/usb_pd_driver.c **** #if 0
 230:Src/usb_pd_driver.c **** 	/*
 231:Src/usb_pd_driver.c **** 	 * If partner is dual-role power and dualrole toggling is on, consider
 232:Src/usb_pd_driver.c **** 	 * if a power swap is necessary.
 233:Src/usb_pd_driver.c **** 	 */
 234:Src/usb_pd_driver.c **** 	if ((flags & PD_FLAGS_PARTNER_DR_POWER) &&
 235:Src/usb_pd_driver.c **** 	    pd_get_dual_role() == PD_DRP_TOGGLE_ON) {
 236:Src/usb_pd_driver.c **** 		/*
 237:Src/usb_pd_driver.c **** 		 * If we are a sink and partner is not externally powered, then
 238:Src/usb_pd_driver.c **** 		 * swap to become a source. If we are source and partner is
 239:Src/usb_pd_driver.c **** 		 * externally powered, swap to become a sink.
 240:Src/usb_pd_driver.c **** 		 */
 241:Src/usb_pd_driver.c **** 		int partner_extpower = flags & PD_FLAGS_PARTNER_EXTPOWER;
 242:Src/usb_pd_driver.c **** 
 243:Src/usb_pd_driver.c **** 		if ((!partner_extpower && pr_role == PD_ROLE_SINK) ||
 244:Src/usb_pd_driver.c **** 		     (partner_extpower && pr_role == PD_ROLE_SOURCE))
 245:Src/usb_pd_driver.c **** 			pd_request_power_swap(port);
 246:Src/usb_pd_driver.c **** 	}
 247:Src/usb_pd_driver.c **** #endif // if 0
 248:Src/usb_pd_driver.c **** }
 393              		.loc 1 248 1 view .LVU55
 394              		@ sp needed
 395 0000 7047     		bx	lr
 396              		.cfi_endproc
 397              	.LFE32:
 399              		.section	.text.pd_process_source_cap_callback,"ax",%progbits
 400              		.align	1
 401              		.global	pd_process_source_cap_callback
 402              		.syntax unified
 403              		.code	16
 404              		.thumb_func
 405              		.fpu softvfp
 407              	pd_process_source_cap_callback:
 408              	.LVL23:
 409              	.LFB33:
 249:Src/usb_pd_driver.c **** 
ARM GAS  /tmp/ccuEiptx.s 			page 12


 250:Src/usb_pd_driver.c **** void pd_process_source_cap_callback(int port, int cnt, uint32_t *src_caps)
 251:Src/usb_pd_driver.c **** {
 410              		.loc 1 251 1 view -0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 252:Src/usb_pd_driver.c **** 	//har str[256];
 253:Src/usb_pd_driver.c **** 	//int i;
 254:Src/usb_pd_driver.c **** 	//uint32_t ma, mv, pdo;
 255:Src/usb_pd_driver.c **** 	/*
 256:Src/usb_pd_driver.c **** 	memset(display_buffer, 0x00, DISP_MEM_SIZE);
 257:Src/usb_pd_driver.c **** 	
 258:Src/usb_pd_driver.c **** 	sprintf(str, "Has Power Delivery");
 259:Src/usb_pd_driver.c **** 	UG_PutString(0, 8, str);
 260:Src/usb_pd_driver.c **** 	
 261:Src/usb_pd_driver.c **** 	for (i = 0; i < cnt; i++)
 262:Src/usb_pd_driver.c **** 	{
 263:Src/usb_pd_driver.c **** 		pd_extract_pdo_power(src_caps[i], &ma, &mv);
 264:Src/usb_pd_driver.c **** 		sprintf(str, "%5.2f V, %5.2f A", (float)mv/1000, (float)ma/1000);
 265:Src/usb_pd_driver.c **** 		UG_PutString(0, 8*(i+2), str);
 266:Src/usb_pd_driver.c **** 	}
 267:Src/usb_pd_driver.c **** 	
 268:Src/usb_pd_driver.c **** 	ssd1306_write_data_n(display_buffer, DISP_MEM_SIZE);
 269:Src/usb_pd_driver.c **** 	*/
 270:Src/usb_pd_driver.c **** }
 415              		.loc 1 270 1 view .LVU57
 416              		@ sp needed
 417 0000 7047     		bx	lr
 418              		.cfi_endproc
 419              	.LFE33:
 421              		.global	pd_snk_pdo_cnt
 422              		.global	pd_snk_pdo
 423              		.global	pd_src_pdo_cnt
 424              		.global	pd_src_pdo
 425              		.section	.rodata.pd_snk_pdo,"a"
 426              		.align	2
 429              	pd_snk_pdo:
 430 0000 32900126 		.word	637636658
 431 0004 32D00226 		.word	637718578
 432 0008 32400626 		.word	637943858
 433              		.section	.rodata.pd_snk_pdo_cnt,"a"
 434              		.align	2
 437              	pd_snk_pdo_cnt:
 438 0000 03000000 		.word	3
 439              		.section	.rodata.pd_src_pdo,"a"
 440              		.align	2
 443              	pd_src_pdo:
 444 0000 96900126 		.word	637636758
 445              		.section	.rodata.pd_src_pdo_cnt,"a"
 446              		.align	2
 449              	pd_src_pdo_cnt:
 450 0000 01000000 		.word	1
 451              		.text
 452              	.Letext0:
 453              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 454              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
ARM GAS  /tmp/ccuEiptx.s 			page 13


 455              		.file 4 "/usr/arm-none-eabi/include/sys/lock.h"
 456              		.file 5 "/usr/arm-none-eabi/include/sys/_types.h"
 457              		.file 6 "/usr/lib/gcc/arm-none-eabi/8.2.0/include/stddef.h"
 458              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 459              		.file 8 "Inc/FreeRTOSConfig.h"
 460              		.file 9 "Inc/usb_pd_tcpm.h"
 461              		.file 10 "Inc/tcpm.h"
 462              		.file 11 "Inc/FUSB302.h"
 463              		.file 12 "Inc/tcpm_driver.h"
 464              		.file 13 "Inc/usb_pd.h"
 465              		.file 14 "Inc/usb_pd_driver.h"
 466              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccuEiptx.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_pd_driver.c
     /tmp/ccuEiptx.s:16     .text.pd_task_set_event:0000000000000000 $t
     /tmp/ccuEiptx.s:24     .text.pd_task_set_event:0000000000000000 pd_task_set_event
     /tmp/ccuEiptx.s:45     .text.pd_set_input_current_limit:0000000000000000 $t
     /tmp/ccuEiptx.s:52     .text.pd_set_input_current_limit:0000000000000000 pd_set_input_current_limit
     /tmp/ccuEiptx.s:67     .text.pd_is_valid_input_voltage:0000000000000000 $t
     /tmp/ccuEiptx.s:74     .text.pd_is_valid_input_voltage:0000000000000000 pd_is_valid_input_voltage
     /tmp/ccuEiptx.s:93     .text.pd_snk_is_vbus_provided:0000000000000000 $t
     /tmp/ccuEiptx.s:100    .text.pd_snk_is_vbus_provided:0000000000000000 pd_snk_is_vbus_provided
     /tmp/ccuEiptx.s:119    .text.get_time:0000000000000000 $t
     /tmp/ccuEiptx.s:126    .text.get_time:0000000000000000 get_time
     /tmp/ccuEiptx.s:162    .text.pd_power_supply_reset:0000000000000000 $t
     /tmp/ccuEiptx.s:169    .text.pd_power_supply_reset:0000000000000000 pd_power_supply_reset
     /tmp/ccuEiptx.s:185    .text.pd_custom_vdm:0000000000000000 $t
     /tmp/ccuEiptx.s:192    .text.pd_custom_vdm:0000000000000000 pd_custom_vdm
     /tmp/ccuEiptx.s:211    .text.pd_execute_data_swap:0000000000000000 $t
     /tmp/ccuEiptx.s:218    .text.pd_execute_data_swap:0000000000000000 pd_execute_data_swap
     /tmp/ccuEiptx.s:233    .text.pd_check_data_swap:0000000000000000 $t
     /tmp/ccuEiptx.s:240    .text.pd_check_data_swap:0000000000000000 pd_check_data_swap
     /tmp/ccuEiptx.s:259    .text.pd_check_power_swap:0000000000000000 $t
     /tmp/ccuEiptx.s:266    .text.pd_check_power_swap:0000000000000000 pd_check_power_swap
     /tmp/ccuEiptx.s:285    .text.pd_board_checks:0000000000000000 $t
     /tmp/ccuEiptx.s:292    .text.pd_board_checks:0000000000000000 pd_board_checks
     /tmp/ccuEiptx.s:308    .text.pd_set_power_supply_ready:0000000000000000 $t
     /tmp/ccuEiptx.s:315    .text.pd_set_power_supply_ready:0000000000000000 pd_set_power_supply_ready
     /tmp/ccuEiptx.s:334    .text.pd_transition_voltage:0000000000000000 $t
     /tmp/ccuEiptx.s:341    .text.pd_transition_voltage:0000000000000000 pd_transition_voltage
     /tmp/ccuEiptx.s:356    .text.pd_check_dr_role:0000000000000000 $t
     /tmp/ccuEiptx.s:363    .text.pd_check_dr_role:0000000000000000 pd_check_dr_role
     /tmp/ccuEiptx.s:378    .text.pd_check_pr_role:0000000000000000 $t
     /tmp/ccuEiptx.s:385    .text.pd_check_pr_role:0000000000000000 pd_check_pr_role
     /tmp/ccuEiptx.s:400    .text.pd_process_source_cap_callback:0000000000000000 $t
     /tmp/ccuEiptx.s:407    .text.pd_process_source_cap_callback:0000000000000000 pd_process_source_cap_callback
     /tmp/ccuEiptx.s:437    .rodata.pd_snk_pdo_cnt:0000000000000000 pd_snk_pdo_cnt
     /tmp/ccuEiptx.s:429    .rodata.pd_snk_pdo:0000000000000000 pd_snk_pdo
     /tmp/ccuEiptx.s:449    .rodata.pd_src_pdo_cnt:0000000000000000 pd_src_pdo_cnt
     /tmp/ccuEiptx.s:443    .rodata.pd_src_pdo:0000000000000000 pd_src_pdo
     /tmp/ccuEiptx.s:426    .rodata.pd_snk_pdo:0000000000000000 $d
     /tmp/ccuEiptx.s:434    .rodata.pd_snk_pdo_cnt:0000000000000000 $d
     /tmp/ccuEiptx.s:440    .rodata.pd_src_pdo:0000000000000000 $d
     /tmp/ccuEiptx.s:446    .rodata.pd_src_pdo_cnt:0000000000000000 $d

UNDEFINED SYMBOLS
xTaskGetTickCount
